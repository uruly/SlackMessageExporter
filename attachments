
      <!DOCTYPE html>
      <html lang="ja">
      <head>
        <meta charset="UTF-8">
        <title>Slack Messages</title>
        <style>
          table { border-collapse: collapse; width: 100%; }
          th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
          th { background-color: #f4f4f4; }
          :root,[data-color-mode=light][data-light-theme=light],[data-color-mode=dark][data-dark-theme=light]{--color-canvas-default-transparent:rgba(255,255,255,0);--color-prettylights-syntax-comment:#57606a;--color-prettylights-syntax-constant:#0550ae;--color-prettylights-syntax-entity:#6639ba;--color-prettylights-syntax-storage-modifier-import:#24292f;--color-prettylights-syntax-entity-tag:#116329;--color-prettylights-syntax-keyword:#cf222e;--color-prettylights-syntax-string:#0a3069;--color-prettylights-syntax-variable:#953800;--color-prettylights-syntax-string-regexp:#116329;--color-prettylights-syntax-markup-deleted-text:#82071e;--color-prettylights-syntax-markup-deleted-bg:#ffebe9;--color-prettylights-syntax-markup-inserted-text:#116329;--color-prettylights-syntax-markup-inserted-bg:#dafbe1;--color-prettylights-syntax-constant-other-reference-link:#0a3069;--color-fg-default:#1f2328;--color-fg-muted:#656d76;--color-canvas-default:#fff;--color-canvas-subtle:#f6f8fa;--color-border-default:#d0d7de;--color-border-muted:#d8dee4;--color-neutral-muted:rgba(175,184,193,.2);--color-accent-fg:#0969da;--color-accent-emphasis:#0969da;--color-danger-fg:#d1242f}:root::selection{--color-canvas-default-transparent:rgba(255,255,255,0);--color-prettylights-syntax-comment:#57606a;--color-prettylights-syntax-constant:#0550ae;--color-prettylights-syntax-entity:#6639ba;--color-prettylights-syntax-storage-modifier-import:#24292f;--color-prettylights-syntax-entity-tag:#116329;--color-prettylights-syntax-keyword:#cf222e;--color-prettylights-syntax-string:#0a3069;--color-prettylights-syntax-variable:#953800;--color-prettylights-syntax-string-regexp:#116329;--color-prettylights-syntax-markup-deleted-text:#82071e;--color-prettylights-syntax-markup-deleted-bg:#ffebe9;--color-prettylights-syntax-markup-inserted-text:#116329;--color-prettylights-syntax-markup-inserted-bg:#dafbe1;--color-prettylights-syntax-constant-other-reference-link:#0a3069;--color-fg-default:#1f2328;--color-fg-muted:#656d76;--color-canvas-default:#fff;--color-canvas-subtle:#f6f8fa;--color-border-default:#d0d7de;--color-border-muted:#d8dee4;--color-neutral-muted:rgba(175,184,193,.2);--color-accent-fg:#0969da;--color-accent-emphasis:#0969da;--color-danger-fg:#d1242f}[data-color-mode=light][data-light-theme=light]::selection{--color-canvas-default-transparent:rgba(255,255,255,0);--color-prettylights-syntax-comment:#57606a;--color-prettylights-syntax-constant:#0550ae;--color-prettylights-syntax-entity:#6639ba;--color-prettylights-syntax-storage-modifier-import:#24292f;--color-prettylights-syntax-entity-tag:#116329;--color-prettylights-syntax-keyword:#cf222e;--color-prettylights-syntax-string:#0a3069;--color-prettylights-syntax-variable:#953800;--color-prettylights-syntax-string-regexp:#116329;--color-prettylights-syntax-markup-deleted-text:#82071e;--color-prettylights-syntax-markup-deleted-bg:#ffebe9;--color-prettylights-syntax-markup-inserted-text:#116329;--color-prettylights-syntax-markup-inserted-bg:#dafbe1;--color-prettylights-syntax-constant-other-reference-link:#0a3069;--color-fg-default:#1f2328;--color-fg-muted:#656d76;--color-canvas-default:#fff;--color-canvas-subtle:#f6f8fa;--color-border-default:#d0d7de;--color-border-muted:#d8dee4;--color-neutral-muted:rgba(175,184,193,.2);--color-accent-fg:#0969da;--color-accent-emphasis:#0969da;--color-danger-fg:#d1242f}[data-color-mode=dark][data-dark-theme=light]::selection{--color-canvas-default-transparent:rgba(255,255,255,0);--color-prettylights-syntax-comment:#57606a;--color-prettylights-syntax-constant:#0550ae;--color-prettylights-syntax-entity:#6639ba;--color-prettylights-syntax-storage-modifier-import:#24292f;--color-prettylights-syntax-entity-tag:#116329;--color-prettylights-syntax-keyword:#cf222e;--color-prettylights-syntax-string:#0a3069;--color-prettylights-syntax-variable:#953800;--color-prettylights-syntax-string-regexp:#116329;--color-prettylights-syntax-markup-deleted-text:#82071e;--color-prettylights-syntax-markup-deleted-bg:#ffebe9;--color-prettylights-syntax-markup-inserted-text:#116329;--color-prettylights-syntax-markup-inserted-bg:#dafbe1;--color-prettylights-syntax-constant-other-reference-link:#0a3069;--color-fg-default:#1f2328;--color-fg-muted:#656d76;--color-canvas-default:#fff;--color-canvas-subtle:#f6f8fa;--color-border-default:#d0d7de;--color-border-muted:#d8dee4;--color-neutral-muted:rgba(175,184,193,.2);--color-accent-fg:#0969da;--color-accent-emphasis:#0969da;--color-danger-fg:#d1242f}[data-color-mode=light][data-light-theme=light] ::-webkit-backdrop{--color-canvas-default-transparent:rgba(255,255,255,0);--color-prettylights-syntax-comment:#57606a;--color-prettylights-syntax-constant:#0550ae;--color-prettylights-syntax-entity:#6639ba;--color-prettylights-syntax-storage-modifier-import:#24292f;--color-prettylights-syntax-entity-tag:#116329;--color-prettylights-syntax-keyword:#cf222e;--color-prettylights-syntax-string:#0a3069;--color-prettylights-syntax-variable:#953800;--color-prettylights-syntax-string-regexp:#116329;--color-prettylights-syntax-markup-deleted-text:#82071e;--color-prettylights-syntax-markup-deleted-bg:#ffebe9;--color-prettylights-syntax-markup-inserted-text:#116329;--color-prettylights-syntax-markup-inserted-bg:#dafbe1;--color-prettylights-syntax-constant-other-reference-link:#0a3069;--color-fg-default:#1f2328;--color-fg-muted:#656d76;--color-canvas-default:#fff;--color-canvas-subtle:#f6f8fa;--color-border-default:#d0d7de;--color-border-muted:#d8dee4;--color-neutral-muted:rgba(175,184,193,.2);--color-accent-fg:#0969da;--color-accent-emphasis:#0969da;--color-danger-fg:#d1242f}[data-color-mode=light][data-light-theme=light] ::backdrop{--color-canvas-default-transparent:rgba(255,255,255,0);--color-prettylights-syntax-comment:#57606a;--color-prettylights-syntax-constant:#0550ae;--color-prettylights-syntax-entity:#6639ba;--color-prettylights-syntax-storage-modifier-import:#24292f;--color-prettylights-syntax-entity-tag:#116329;--color-prettylights-syntax-keyword:#cf222e;--color-prettylights-syntax-string:#0a3069;--color-prettylights-syntax-variable:#953800;--color-prettylights-syntax-string-regexp:#116329;--color-prettylights-syntax-markup-deleted-text:#82071e;--color-prettylights-syntax-markup-deleted-bg:#ffebe9;--color-prettylights-syntax-markup-inserted-text:#116329;--color-prettylights-syntax-markup-inserted-bg:#dafbe1;--color-prettylights-syntax-constant-other-reference-link:#0a3069;--color-fg-default:#1f2328;--color-fg-muted:#656d76;--color-canvas-default:#fff;--color-canvas-subtle:#f6f8fa;--color-border-default:#d0d7de;--color-border-muted:#d8dee4;--color-neutral-muted:rgba(175,184,193,.2);--color-accent-fg:#0969da;--color-accent-emphasis:#0969da;--color-danger-fg:#d1242f}[data-color-mode=dark][data-dark-theme=light] ::-webkit-backdrop{--color-canvas-default-transparent:rgba(255,255,255,0);--color-prettylights-syntax-comment:#57606a;--color-prettylights-syntax-constant:#0550ae;--color-prettylights-syntax-entity:#6639ba;--color-prettylights-syntax-storage-modifier-import:#24292f;--color-prettylights-syntax-entity-tag:#116329;--color-prettylights-syntax-keyword:#cf222e;--color-prettylights-syntax-string:#0a3069;--color-prettylights-syntax-variable:#953800;--color-prettylights-syntax-string-regexp:#116329;--color-prettylights-syntax-markup-deleted-text:#82071e;--color-prettylights-syntax-markup-deleted-bg:#ffebe9;--color-prettylights-syntax-markup-inserted-text:#116329;--color-prettylights-syntax-markup-inserted-bg:#dafbe1;--color-prettylights-syntax-constant-other-reference-link:#0a3069;--color-fg-default:#1f2328;--color-fg-muted:#656d76;--color-canvas-default:#fff;--color-canvas-subtle:#f6f8fa;--color-border-default:#d0d7de;--color-border-muted:#d8dee4;--color-neutral-muted:rgba(175,184,193,.2);--color-accent-fg:#0969da;--color-accent-emphasis:#0969da;--color-danger-fg:#d1242f}[data-color-mode=dark][data-dark-theme=light] ::backdrop{--color-canvas-default-transparent:rgba(255,255,255,0);--color-prettylights-syntax-comment:#57606a;--color-prettylights-syntax-constant:#0550ae;--color-prettylights-syntax-entity:#6639ba;--color-prettylights-syntax-storage-modifier-import:#24292f;--color-prettylights-syntax-entity-tag:#116329;--color-prettylights-syntax-keyword:#cf222e;--color-prettylights-syntax-string:#0a3069;--color-prettylights-syntax-variable:#953800;--color-prettylights-syntax-string-regexp:#116329;--color-prettylights-syntax-markup-deleted-text:#82071e;--color-prettylights-syntax-markup-deleted-bg:#ffebe9;--color-prettylights-syntax-markup-inserted-text:#116329;--color-prettylights-syntax-markup-inserted-bg:#dafbe1;--color-prettylights-syntax-constant-other-reference-link:#0a3069;--color-fg-default:#1f2328;--color-fg-muted:#656d76;--color-canvas-default:#fff;--color-canvas-subtle:#f6f8fa;--color-border-default:#d0d7de;--color-border-muted:#d8dee4;--color-neutral-muted:rgba(175,184,193,.2);--color-accent-fg:#0969da;--color-accent-emphasis:#0969da;--color-danger-fg:#d1242f}@media (prefers-color-scheme:light){[data-color-mode=auto][data-light-theme=light]{--color-canvas-default-transparent:rgba(255,255,255,0);--color-prettylights-syntax-comment:#57606a;--color-prettylights-syntax-constant:#0550ae;--color-prettylights-syntax-entity:#6639ba;--color-prettylights-syntax-storage-modifier-import:#24292f;--color-prettylights-syntax-entity-tag:#116329;--color-prettylights-syntax-keyword:#cf222e;--color-prettylights-syntax-string:#0a3069;--color-prettylights-syntax-variable:#953800;--color-prettylights-syntax-string-regexp:#116329;--color-prettylights-syntax-markup-deleted-text:#82071e;--color-prettylights-syntax-markup-deleted-bg:#ffebe9;--color-prettylights-syntax-markup-inserted-text:#116329;--color-prettylights-syntax-markup-inserted-bg:#dafbe1;--color-prettylights-syntax-constant-other-reference-link:#0a3069;--color-fg-default:#1f2328;--color-fg-muted:#656d76;--color-canvas-default:#fff;--color-canvas-subtle:#f6f8fa;--color-border-default:#d0d7de;--color-border-muted:#d8dee4;--color-neutral-muted:rgba(175,184,193,.2);--color-accent-fg:#0969da;--color-accent-emphasis:#0969da;--color-danger-fg:#d1242f}[data-color-mode=auto][data-light-theme=light]::selection{--color-canvas-default-transparent:rgba(255,255,255,0);--color-prettylights-syntax-comment:#57606a;--color-prettylights-syntax-constant:#0550ae;--color-prettylights-syntax-entity:#6639ba;--color-prettylights-syntax-storage-modifier-import:#24292f;--color-prettylights-syntax-entity-tag:#116329;--color-prettylights-syntax-keyword:#cf222e;--color-prettylights-syntax-string:#0a3069;--color-prettylights-syntax-variable:#953800;--color-prettylights-syntax-string-regexp:#116329;--color-prettylights-syntax-markup-deleted-text:#82071e;--color-prettylights-syntax-markup-deleted-bg:#ffebe9;--color-prettylights-syntax-markup-inserted-text:#116329;--color-prettylights-syntax-markup-inserted-bg:#dafbe1;--color-prettylights-syntax-constant-other-reference-link:#0a3069;--color-fg-default:#1f2328;--color-fg-muted:#656d76;--color-canvas-default:#fff;--color-canvas-subtle:#f6f8fa;--color-border-default:#d0d7de;--color-border-muted:#d8dee4;--color-neutral-muted:rgba(175,184,193,.2);--color-accent-fg:#0969da;--color-accent-emphasis:#0969da;--color-danger-fg:#d1242f}[data-color-mode=auto][data-light-theme=light] ::-webkit-backdrop{--color-canvas-default-transparent:rgba(255,255,255,0);--color-prettylights-syntax-comment:#57606a;--color-prettylights-syntax-constant:#0550ae;--color-prettylights-syntax-entity:#6639ba;--color-prettylights-syntax-storage-modifier-import:#24292f;--color-prettylights-syntax-entity-tag:#116329;--color-prettylights-syntax-keyword:#cf222e;--color-prettylights-syntax-string:#0a3069;--color-prettylights-syntax-variable:#953800;--color-prettylights-syntax-string-regexp:#116329;--color-prettylights-syntax-markup-deleted-text:#82071e;--color-prettylights-syntax-markup-deleted-bg:#ffebe9;--color-prettylights-syntax-markup-inserted-text:#116329;--color-prettylights-syntax-markup-inserted-bg:#dafbe1;--color-prettylights-syntax-constant-other-reference-link:#0a3069;--color-fg-default:#1f2328;--color-fg-muted:#656d76;--color-canvas-default:#fff;--color-canvas-subtle:#f6f8fa;--color-border-default:#d0d7de;--color-border-muted:#d8dee4;--color-neutral-muted:rgba(175,184,193,.2);--color-accent-fg:#0969da;--color-accent-emphasis:#0969da;--color-danger-fg:#d1242f}[data-color-mode=auto][data-light-theme=light] ::backdrop{--color-canvas-default-transparent:rgba(255,255,255,0);--color-prettylights-syntax-comment:#57606a;--color-prettylights-syntax-constant:#0550ae;--color-prettylights-syntax-entity:#6639ba;--color-prettylights-syntax-storage-modifier-import:#24292f;--color-prettylights-syntax-entity-tag:#116329;--color-prettylights-syntax-keyword:#cf222e;--color-prettylights-syntax-string:#0a3069;--color-prettylights-syntax-variable:#953800;--color-prettylights-syntax-string-regexp:#116329;--color-prettylights-syntax-markup-deleted-text:#82071e;--color-prettylights-syntax-markup-deleted-bg:#ffebe9;--color-prettylights-syntax-markup-inserted-text:#116329;--color-prettylights-syntax-markup-inserted-bg:#dafbe1;--color-prettylights-syntax-constant-other-reference-link:#0a3069;--color-fg-default:#1f2328;--color-fg-muted:#656d76;--color-canvas-default:#fff;--color-canvas-subtle:#f6f8fa;--color-border-default:#d0d7de;--color-border-muted:#d8dee4;--color-neutral-muted:rgba(175,184,193,.2);--color-accent-fg:#0969da;--color-accent-emphasis:#0969da;--color-danger-fg:#d1242f}}@media (prefers-color-scheme:dark){[data-color-mode=auto][data-dark-theme=light]{--color-canvas-default-transparent:rgba(255,255,255,0);--color-prettylights-syntax-comment:#57606a;--color-prettylights-syntax-constant:#0550ae;--color-prettylights-syntax-entity:#6639ba;--color-prettylights-syntax-storage-modifier-import:#24292f;--color-prettylights-syntax-entity-tag:#116329;--color-prettylights-syntax-keyword:#cf222e;--color-prettylights-syntax-string:#0a3069;--color-prettylights-syntax-variable:#953800;--color-prettylights-syntax-string-regexp:#116329;--color-prettylights-syntax-markup-deleted-text:#82071e;--color-prettylights-syntax-markup-deleted-bg:#ffebe9;--color-prettylights-syntax-markup-inserted-text:#116329;--color-prettylights-syntax-markup-inserted-bg:#dafbe1;--color-prettylights-syntax-constant-other-reference-link:#0a3069;--color-fg-default:#1f2328;--color-fg-muted:#656d76;--color-canvas-default:#fff;--color-canvas-subtle:#f6f8fa;--color-border-default:#d0d7de;--color-border-muted:#d8dee4;--color-neutral-muted:rgba(175,184,193,.2);--color-accent-fg:#0969da;--color-accent-emphasis:#0969da;--color-danger-fg:#d1242f}[data-color-mode=auto][data-dark-theme=light]::selection{--color-canvas-default-transparent:rgba(255,255,255,0);--color-prettylights-syntax-comment:#57606a;--color-prettylights-syntax-constant:#0550ae;--color-prettylights-syntax-entity:#6639ba;--color-prettylights-syntax-storage-modifier-import:#24292f;--color-prettylights-syntax-entity-tag:#116329;--color-prettylights-syntax-keyword:#cf222e;--color-prettylights-syntax-string:#0a3069;--color-prettylights-syntax-variable:#953800;--color-prettylights-syntax-string-regexp:#116329;--color-prettylights-syntax-markup-deleted-text:#82071e;--color-prettylights-syntax-markup-deleted-bg:#ffebe9;--color-prettylights-syntax-markup-inserted-text:#116329;--color-prettylights-syntax-markup-inserted-bg:#dafbe1;--color-prettylights-syntax-constant-other-reference-link:#0a3069;--color-fg-default:#1f2328;--color-fg-muted:#656d76;--color-canvas-default:#fff;--color-canvas-subtle:#f6f8fa;--color-border-default:#d0d7de;--color-border-muted:#d8dee4;--color-neutral-muted:rgba(175,184,193,.2);--color-accent-fg:#0969da;--color-accent-emphasis:#0969da;--color-danger-fg:#d1242f}[data-color-mode=auto][data-light-theme=light] ::-webkit-backdrop{--color-canvas-default-transparent:rgba(255,255,255,0);--color-prettylights-syntax-comment:#57606a;--color-prettylights-syntax-constant:#0550ae;--color-prettylights-syntax-entity:#6639ba;--color-prettylights-syntax-storage-modifier-import:#24292f;--color-prettylights-syntax-entity-tag:#116329;--color-prettylights-syntax-keyword:#cf222e;--color-prettylights-syntax-string:#0a3069;--color-prettylights-syntax-variable:#953800;--color-prettylights-syntax-string-regexp:#116329;--color-prettylights-syntax-markup-deleted-text:#82071e;--color-prettylights-syntax-markup-deleted-bg:#ffebe9;--color-prettylights-syntax-markup-inserted-text:#116329;--color-prettylights-syntax-markup-inserted-bg:#dafbe1;--color-prettylights-syntax-constant-other-reference-link:#0a3069;--color-fg-default:#1f2328;--color-fg-muted:#656d76;--color-canvas-default:#fff;--color-canvas-subtle:#f6f8fa;--color-border-default:#d0d7de;--color-border-muted:#d8dee4;--color-neutral-muted:rgba(175,184,193,.2);--color-accent-fg:#0969da;--color-accent-emphasis:#0969da;--color-danger-fg:#d1242f}[data-color-mode=auto][data-light-theme=light] ::backdrop{--color-canvas-default-transparent:rgba(255,255,255,0);--color-prettylights-syntax-comment:#57606a;--color-prettylights-syntax-constant:#0550ae;--color-prettylights-syntax-entity:#6639ba;--color-prettylights-syntax-storage-modifier-import:#24292f;--color-prettylights-syntax-entity-tag:#116329;--color-prettylights-syntax-keyword:#cf222e;--color-prettylights-syntax-string:#0a3069;--color-prettylights-syntax-variable:#953800;--color-prettylights-syntax-string-regexp:#116329;--color-prettylights-syntax-markup-deleted-text:#82071e;--color-prettylights-syntax-markup-deleted-bg:#ffebe9;--color-prettylights-syntax-markup-inserted-text:#116329;--color-prettylights-syntax-markup-inserted-bg:#dafbe1;--color-prettylights-syntax-constant-other-reference-link:#0a3069;--color-fg-default:#1f2328;--color-fg-muted:#656d76;--color-canvas-default:#fff;--color-canvas-subtle:#f6f8fa;--color-border-default:#d0d7de;--color-border-muted:#d8dee4;--color-neutral-muted:rgba(175,184,193,.2);--color-accent-fg:#0969da;--color-accent-emphasis:#0969da;--color-danger-fg:#d1242f}}[data-color-mode=light][data-light-theme=dark],[data-color-mode=dark][data-dark-theme=dark]{--color-canvas-default-transparent:rgba(13,17,23,0);--color-prettylights-syntax-comment:#8b949e;--color-prettylights-syntax-constant:#79c0ff;--color-prettylights-syntax-entity:#d2a8ff;--color-prettylights-syntax-storage-modifier-import:#c9d1d9;--color-prettylights-syntax-entity-tag:#7ee787;--color-prettylights-syntax-keyword:#ff7b72;--color-prettylights-syntax-string:#a5d6ff;--color-prettylights-syntax-variable:#ffa657;--color-prettylights-syntax-string-regexp:#7ee787;--color-prettylights-syntax-markup-deleted-text:#ffdcd7;--color-prettylights-syntax-markup-deleted-bg:#67060c;--color-prettylights-syntax-markup-inserted-text:#aff5b4;--color-prettylights-syntax-markup-inserted-bg:#033a16;--color-prettylights-syntax-constant-other-reference-link:#a5d6ff;--color-fg-default:#e6edf3;--color-fg-muted:#848d97;--color-canvas-default:#0d1117;--color-canvas-subtle:#161b22;--color-border-default:#30363d;--color-border-muted:#21262d;--color-neutral-muted:rgba(110,118,129,.4);--color-accent-fg:#2f81f7;--color-accent-emphasis:#1f6feb;--color-danger-fg:#f85149}[data-color-mode=light][data-light-theme=dark]::selection{--color-canvas-default-transparent:rgba(13,17,23,0);--color-prettylights-syntax-comment:#8b949e;--color-prettylights-syntax-constant:#79c0ff;--color-prettylights-syntax-entity:#d2a8ff;--color-prettylights-syntax-storage-modifier-import:#c9d1d9;--color-prettylights-syntax-entity-tag:#7ee787;--color-prettylights-syntax-keyword:#ff7b72;--color-prettylights-syntax-string:#a5d6ff;--color-prettylights-syntax-variable:#ffa657;--color-prettylights-syntax-string-regexp:#7ee787;--color-prettylights-syntax-markup-deleted-text:#ffdcd7;--color-prettylights-syntax-markup-deleted-bg:#67060c;--color-prettylights-syntax-markup-inserted-text:#aff5b4;--color-prettylights-syntax-markup-inserted-bg:#033a16;--color-prettylights-syntax-constant-other-reference-link:#a5d6ff;--color-fg-default:#e6edf3;--color-fg-muted:#848d97;--color-canvas-default:#0d1117;--color-canvas-subtle:#161b22;--color-border-default:#30363d;--color-border-muted:#21262d;--color-neutral-muted:rgba(110,118,129,.4);--color-accent-fg:#2f81f7;--color-accent-emphasis:#1f6feb;--color-danger-fg:#f85149}[data-color-mode=dark][data-dark-theme=dark]::selection{--color-canvas-default-transparent:rgba(13,17,23,0);--color-prettylights-syntax-comment:#8b949e;--color-prettylights-syntax-constant:#79c0ff;--color-prettylights-syntax-entity:#d2a8ff;--color-prettylights-syntax-storage-modifier-import:#c9d1d9;--color-prettylights-syntax-entity-tag:#7ee787;--color-prettylights-syntax-keyword:#ff7b72;--color-prettylights-syntax-string:#a5d6ff;--color-prettylights-syntax-variable:#ffa657;--color-prettylights-syntax-string-regexp:#7ee787;--color-prettylights-syntax-markup-deleted-text:#ffdcd7;--color-prettylights-syntax-markup-deleted-bg:#67060c;--color-prettylights-syntax-markup-inserted-text:#aff5b4;--color-prettylights-syntax-markup-inserted-bg:#033a16;--color-prettylights-syntax-constant-other-reference-link:#a5d6ff;--color-fg-default:#e6edf3;--color-fg-muted:#848d97;--color-canvas-default:#0d1117;--color-canvas-subtle:#161b22;--color-border-default:#30363d;--color-border-muted:#21262d;--color-neutral-muted:rgba(110,118,129,.4);--color-accent-fg:#2f81f7;--color-accent-emphasis:#1f6feb;--color-danger-fg:#f85149}::-webkit-backdrop{--color-canvas-default-transparent:rgba(13,17,23,0);--color-prettylights-syntax-comment:#8b949e;--color-prettylights-syntax-constant:#79c0ff;--color-prettylights-syntax-entity:#d2a8ff;--color-prettylights-syntax-storage-modifier-import:#c9d1d9;--color-prettylights-syntax-entity-tag:#7ee787;--color-prettylights-syntax-keyword:#ff7b72;--color-prettylights-syntax-string:#a5d6ff;--color-prettylights-syntax-variable:#ffa657;--color-prettylights-syntax-string-regexp:#7ee787;--color-prettylights-syntax-markup-deleted-text:#ffdcd7;--color-prettylights-syntax-markup-deleted-bg:#67060c;--color-prettylights-syntax-markup-inserted-text:#aff5b4;--color-prettylights-syntax-markup-inserted-bg:#033a16;--color-prettylights-syntax-constant-other-reference-link:#a5d6ff;--color-fg-default:#e6edf3;--color-fg-muted:#848d97;--color-canvas-default:#0d1117;--color-canvas-subtle:#161b22;--color-border-default:#30363d;--color-border-muted:#21262d;--color-neutral-muted:rgba(110,118,129,.4);--color-accent-fg:#2f81f7;--color-accent-emphasis:#1f6feb;--color-danger-fg:#f85149}::backdrop{--color-canvas-default-transparent:rgba(13,17,23,0);--color-prettylights-syntax-comment:#8b949e;--color-prettylights-syntax-constant:#79c0ff;--color-prettylights-syntax-entity:#d2a8ff;--color-prettylights-syntax-storage-modifier-import:#c9d1d9;--color-prettylights-syntax-entity-tag:#7ee787;--color-prettylights-syntax-keyword:#ff7b72;--color-prettylights-syntax-string:#a5d6ff;--color-prettylights-syntax-variable:#ffa657;--color-prettylights-syntax-string-regexp:#7ee787;--color-prettylights-syntax-markup-deleted-text:#ffdcd7;--color-prettylights-syntax-markup-deleted-bg:#67060c;--color-prettylights-syntax-markup-inserted-text:#aff5b4;--color-prettylights-syntax-markup-inserted-bg:#033a16;--color-prettylights-syntax-constant-other-reference-link:#a5d6ff;--color-fg-default:#e6edf3;--color-fg-muted:#848d97;--color-canvas-default:#0d1117;--color-canvas-subtle:#161b22;--color-border-default:#30363d;--color-border-muted:#21262d;--color-neutral-muted:rgba(110,118,129,.4);--color-accent-fg:#2f81f7;--color-accent-emphasis:#1f6feb;--color-danger-fg:#f85149}[data-color-mode=light][data-light-theme=dark] ::-webkit-backdrop{--color-canvas-default-transparent:rgba(13,17,23,0);--color-prettylights-syntax-comment:#8b949e;--color-prettylights-syntax-constant:#79c0ff;--color-prettylights-syntax-entity:#d2a8ff;--color-prettylights-syntax-storage-modifier-import:#c9d1d9;--color-prettylights-syntax-entity-tag:#7ee787;--color-prettylights-syntax-keyword:#ff7b72;--color-prettylights-syntax-string:#a5d6ff;--color-prettylights-syntax-variable:#ffa657;--color-prettylights-syntax-string-regexp:#7ee787;--color-prettylights-syntax-markup-deleted-text:#ffdcd7;--color-prettylights-syntax-markup-deleted-bg:#67060c;--color-prettylights-syntax-markup-inserted-text:#aff5b4;--color-prettylights-syntax-markup-inserted-bg:#033a16;--color-prettylights-syntax-constant-other-reference-link:#a5d6ff;--color-fg-default:#e6edf3;--color-fg-muted:#848d97;--color-canvas-default:#0d1117;--color-canvas-subtle:#161b22;--color-border-default:#30363d;--color-border-muted:#21262d;--color-neutral-muted:rgba(110,118,129,.4);--color-accent-fg:#2f81f7;--color-accent-emphasis:#1f6feb;--color-danger-fg:#f85149}[data-color-mode=light][data-light-theme=dark] ::backdrop{--color-canvas-default-transparent:rgba(13,17,23,0);--color-prettylights-syntax-comment:#8b949e;--color-prettylights-syntax-constant:#79c0ff;--color-prettylights-syntax-entity:#d2a8ff;--color-prettylights-syntax-storage-modifier-import:#c9d1d9;--color-prettylights-syntax-entity-tag:#7ee787;--color-prettylights-syntax-keyword:#ff7b72;--color-prettylights-syntax-string:#a5d6ff;--color-prettylights-syntax-variable:#ffa657;--color-prettylights-syntax-string-regexp:#7ee787;--color-prettylights-syntax-markup-deleted-text:#ffdcd7;--color-prettylights-syntax-markup-deleted-bg:#67060c;--color-prettylights-syntax-markup-inserted-text:#aff5b4;--color-prettylights-syntax-markup-inserted-bg:#033a16;--color-prettylights-syntax-constant-other-reference-link:#a5d6ff;--color-fg-default:#e6edf3;--color-fg-muted:#848d97;--color-canvas-default:#0d1117;--color-canvas-subtle:#161b22;--color-border-default:#30363d;--color-border-muted:#21262d;--color-neutral-muted:rgba(110,118,129,.4);--color-accent-fg:#2f81f7;--color-accent-emphasis:#1f6feb;--color-danger-fg:#f85149}[data-color-mode=dark][data-dark-theme=dark] ::-webkit-backdrop{--color-canvas-default-transparent:rgba(13,17,23,0);--color-prettylights-syntax-comment:#8b949e;--color-prettylights-syntax-constant:#79c0ff;--color-prettylights-syntax-entity:#d2a8ff;--color-prettylights-syntax-storage-modifier-import:#c9d1d9;--color-prettylights-syntax-entity-tag:#7ee787;--color-prettylights-syntax-keyword:#ff7b72;--color-prettylights-syntax-string:#a5d6ff;--color-prettylights-syntax-variable:#ffa657;--color-prettylights-syntax-string-regexp:#7ee787;--color-prettylights-syntax-markup-deleted-text:#ffdcd7;--color-prettylights-syntax-markup-deleted-bg:#67060c;--color-prettylights-syntax-markup-inserted-text:#aff5b4;--color-prettylights-syntax-markup-inserted-bg:#033a16;--color-prettylights-syntax-constant-other-reference-link:#a5d6ff;--color-fg-default:#e6edf3;--color-fg-muted:#848d97;--color-canvas-default:#0d1117;--color-canvas-subtle:#161b22;--color-border-default:#30363d;--color-border-muted:#21262d;--color-neutral-muted:rgba(110,118,129,.4);--color-accent-fg:#2f81f7;--color-accent-emphasis:#1f6feb;--color-danger-fg:#f85149}[data-color-mode=dark][data-dark-theme=dark] ::backdrop{--color-canvas-default-transparent:rgba(13,17,23,0);--color-prettylights-syntax-comment:#8b949e;--color-prettylights-syntax-constant:#79c0ff;--color-prettylights-syntax-entity:#d2a8ff;--color-prettylights-syntax-storage-modifier-import:#c9d1d9;--color-prettylights-syntax-entity-tag:#7ee787;--color-prettylights-syntax-keyword:#ff7b72;--color-prettylights-syntax-string:#a5d6ff;--color-prettylights-syntax-variable:#ffa657;--color-prettylights-syntax-string-regexp:#7ee787;--color-prettylights-syntax-markup-deleted-text:#ffdcd7;--color-prettylights-syntax-markup-deleted-bg:#67060c;--color-prettylights-syntax-markup-inserted-text:#aff5b4;--color-prettylights-syntax-markup-inserted-bg:#033a16;--color-prettylights-syntax-constant-other-reference-link:#a5d6ff;--color-fg-default:#e6edf3;--color-fg-muted:#848d97;--color-canvas-default:#0d1117;--color-canvas-subtle:#161b22;--color-border-default:#30363d;--color-border-muted:#21262d;--color-neutral-muted:rgba(110,118,129,.4);--color-accent-fg:#2f81f7;--color-accent-emphasis:#1f6feb;--color-danger-fg:#f85149}@media (prefers-color-scheme:light){[data-color-mode=auto][data-light-theme=dark]{--color-canvas-default-transparent:rgba(13,17,23,0);--color-prettylights-syntax-comment:#8b949e;--color-prettylights-syntax-constant:#79c0ff;--color-prettylights-syntax-entity:#d2a8ff;--color-prettylights-syntax-storage-modifier-import:#c9d1d9;--color-prettylights-syntax-entity-tag:#7ee787;--color-prettylights-syntax-keyword:#ff7b72;--color-prettylights-syntax-string:#a5d6ff;--color-prettylights-syntax-variable:#ffa657;--color-prettylights-syntax-string-regexp:#7ee787;--color-prettylights-syntax-markup-deleted-text:#ffdcd7;--color-prettylights-syntax-markup-deleted-bg:#67060c;--color-prettylights-syntax-markup-inserted-text:#aff5b4;--color-prettylights-syntax-markup-inserted-bg:#033a16;--color-prettylights-syntax-constant-other-reference-link:#a5d6ff;--color-fg-default:#e6edf3;--color-fg-muted:#848d97;--color-canvas-default:#0d1117;--color-canvas-subtle:#161b22;--color-border-default:#30363d;--color-border-muted:#21262d;--color-neutral-muted:rgba(110,118,129,.4);--color-accent-fg:#2f81f7;--color-accent-emphasis:#1f6feb;--color-danger-fg:#f85149}[data-color-mode=auto][data-light-theme=dark]::selection{--color-canvas-default-transparent:rgba(13,17,23,0);--color-prettylights-syntax-comment:#8b949e;--color-prettylights-syntax-constant:#79c0ff;--color-prettylights-syntax-entity:#d2a8ff;--color-prettylights-syntax-storage-modifier-import:#c9d1d9;--color-prettylights-syntax-entity-tag:#7ee787;--color-prettylights-syntax-keyword:#ff7b72;--color-prettylights-syntax-string:#a5d6ff;--color-prettylights-syntax-variable:#ffa657;--color-prettylights-syntax-string-regexp:#7ee787;--color-prettylights-syntax-markup-deleted-text:#ffdcd7;--color-prettylights-syntax-markup-deleted-bg:#67060c;--color-prettylights-syntax-markup-inserted-text:#aff5b4;--color-prettylights-syntax-markup-inserted-bg:#033a16;--color-prettylights-syntax-constant-other-reference-link:#a5d6ff;--color-fg-default:#e6edf3;--color-fg-muted:#848d97;--color-canvas-default:#0d1117;--color-canvas-subtle:#161b22;--color-border-default:#30363d;--color-border-muted:#21262d;--color-neutral-muted:rgba(110,118,129,.4);--color-accent-fg:#2f81f7;--color-accent-emphasis:#1f6feb;--color-danger-fg:#f85149}[data-color-mode=auto][data-light-theme=dark] ::-webkit-backdrop{--color-canvas-default-transparent:rgba(13,17,23,0);--color-prettylights-syntax-comment:#8b949e;--color-prettylights-syntax-constant:#79c0ff;--color-prettylights-syntax-entity:#d2a8ff;--color-prettylights-syntax-storage-modifier-import:#c9d1d9;--color-prettylights-syntax-entity-tag:#7ee787;--color-prettylights-syntax-keyword:#ff7b72;--color-prettylights-syntax-string:#a5d6ff;--color-prettylights-syntax-variable:#ffa657;--color-prettylights-syntax-string-regexp:#7ee787;--color-prettylights-syntax-markup-deleted-text:#ffdcd7;--color-prettylights-syntax-markup-deleted-bg:#67060c;--color-prettylights-syntax-markup-inserted-text:#aff5b4;--color-prettylights-syntax-markup-inserted-bg:#033a16;--color-prettylights-syntax-constant-other-reference-link:#a5d6ff;--color-fg-default:#e6edf3;--color-fg-muted:#848d97;--color-canvas-default:#0d1117;--color-canvas-subtle:#161b22;--color-border-default:#30363d;--color-border-muted:#21262d;--color-neutral-muted:rgba(110,118,129,.4);--color-accent-fg:#2f81f7;--color-accent-emphasis:#1f6feb;--color-danger-fg:#f85149}[data-color-mode=auto][data-light-theme=dark] ::backdrop{--color-canvas-default-transparent:rgba(13,17,23,0);--color-prettylights-syntax-comment:#8b949e;--color-prettylights-syntax-constant:#79c0ff;--color-prettylights-syntax-entity:#d2a8ff;--color-prettylights-syntax-storage-modifier-import:#c9d1d9;--color-prettylights-syntax-entity-tag:#7ee787;--color-prettylights-syntax-keyword:#ff7b72;--color-prettylights-syntax-string:#a5d6ff;--color-prettylights-syntax-variable:#ffa657;--color-prettylights-syntax-string-regexp:#7ee787;--color-prettylights-syntax-markup-deleted-text:#ffdcd7;--color-prettylights-syntax-markup-deleted-bg:#67060c;--color-prettylights-syntax-markup-inserted-text:#aff5b4;--color-prettylights-syntax-markup-inserted-bg:#033a16;--color-prettylights-syntax-constant-other-reference-link:#a5d6ff;--color-fg-default:#e6edf3;--color-fg-muted:#848d97;--color-canvas-default:#0d1117;--color-canvas-subtle:#161b22;--color-border-default:#30363d;--color-border-muted:#21262d;--color-neutral-muted:rgba(110,118,129,.4);--color-accent-fg:#2f81f7;--color-accent-emphasis:#1f6feb;--color-danger-fg:#f85149}}@media (prefers-color-scheme:dark){[data-color-mode=auto][data-dark-theme=dark]{--color-canvas-default-transparent:rgba(13,17,23,0);--color-prettylights-syntax-comment:#8b949e;--color-prettylights-syntax-constant:#79c0ff;--color-prettylights-syntax-entity:#d2a8ff;--color-prettylights-syntax-storage-modifier-import:#c9d1d9;--color-prettylights-syntax-entity-tag:#7ee787;--color-prettylights-syntax-keyword:#ff7b72;--color-prettylights-syntax-string:#a5d6ff;--color-prettylights-syntax-variable:#ffa657;--color-prettylights-syntax-string-regexp:#7ee787;--color-prettylights-syntax-markup-deleted-text:#ffdcd7;--color-prettylights-syntax-markup-deleted-bg:#67060c;--color-prettylights-syntax-markup-inserted-text:#aff5b4;--color-prettylights-syntax-markup-inserted-bg:#033a16;--color-prettylights-syntax-constant-other-reference-link:#a5d6ff;--color-fg-default:#e6edf3;--color-fg-muted:#848d97;--color-canvas-default:#0d1117;--color-canvas-subtle:#161b22;--color-border-default:#30363d;--color-border-muted:#21262d;--color-neutral-muted:rgba(110,118,129,.4);--color-accent-fg:#2f81f7;--color-accent-emphasis:#1f6feb;--color-danger-fg:#f85149}[data-color-mode=auto][data-dark-theme=dark]::selection{--color-canvas-default-transparent:rgba(13,17,23,0);--color-prettylights-syntax-comment:#8b949e;--color-prettylights-syntax-constant:#79c0ff;--color-prettylights-syntax-entity:#d2a8ff;--color-prettylights-syntax-storage-modifier-import:#c9d1d9;--color-prettylights-syntax-entity-tag:#7ee787;--color-prettylights-syntax-keyword:#ff7b72;--color-prettylights-syntax-string:#a5d6ff;--color-prettylights-syntax-variable:#ffa657;--color-prettylights-syntax-string-regexp:#7ee787;--color-prettylights-syntax-markup-deleted-text:#ffdcd7;--color-prettylights-syntax-markup-deleted-bg:#67060c;--color-prettylights-syntax-markup-inserted-text:#aff5b4;--color-prettylights-syntax-markup-inserted-bg:#033a16;--color-prettylights-syntax-constant-other-reference-link:#a5d6ff;--color-fg-default:#e6edf3;--color-fg-muted:#848d97;--color-canvas-default:#0d1117;--color-canvas-subtle:#161b22;--color-border-default:#30363d;--color-border-muted:#21262d;--color-neutral-muted:rgba(110,118,129,.4);--color-accent-fg:#2f81f7;--color-accent-emphasis:#1f6feb;--color-danger-fg:#f85149}[data-color-mode=auto][data-light-theme=dark] ::-webkit-backdrop{--color-canvas-default-transparent:rgba(13,17,23,0);--color-prettylights-syntax-comment:#8b949e;--color-prettylights-syntax-constant:#79c0ff;--color-prettylights-syntax-entity:#d2a8ff;--color-prettylights-syntax-storage-modifier-import:#c9d1d9;--color-prettylights-syntax-entity-tag:#7ee787;--color-prettylights-syntax-keyword:#ff7b72;--color-prettylights-syntax-string:#a5d6ff;--color-prettylights-syntax-variable:#ffa657;--color-prettylights-syntax-string-regexp:#7ee787;--color-prettylights-syntax-markup-deleted-text:#ffdcd7;--color-prettylights-syntax-markup-deleted-bg:#67060c;--color-prettylights-syntax-markup-inserted-text:#aff5b4;--color-prettylights-syntax-markup-inserted-bg:#033a16;--color-prettylights-syntax-constant-other-reference-link:#a5d6ff;--color-fg-default:#e6edf3;--color-fg-muted:#848d97;--color-canvas-default:#0d1117;--color-canvas-subtle:#161b22;--color-border-default:#30363d;--color-border-muted:#21262d;--color-neutral-muted:rgba(110,118,129,.4);--color-accent-fg:#2f81f7;--color-accent-emphasis:#1f6feb;--color-danger-fg:#f85149}[data-color-mode=auto][data-light-theme=dark] ::backdrop{--color-canvas-default-transparent:rgba(13,17,23,0);--color-prettylights-syntax-comment:#8b949e;--color-prettylights-syntax-constant:#79c0ff;--color-prettylights-syntax-entity:#d2a8ff;--color-prettylights-syntax-storage-modifier-import:#c9d1d9;--color-prettylights-syntax-entity-tag:#7ee787;--color-prettylights-syntax-keyword:#ff7b72;--color-prettylights-syntax-string:#a5d6ff;--color-prettylights-syntax-variable:#ffa657;--color-prettylights-syntax-string-regexp:#7ee787;--color-prettylights-syntax-markup-deleted-text:#ffdcd7;--color-prettylights-syntax-markup-deleted-bg:#67060c;--color-prettylights-syntax-markup-inserted-text:#aff5b4;--color-prettylights-syntax-markup-inserted-bg:#033a16;--color-prettylights-syntax-constant-other-reference-link:#a5d6ff;--color-fg-default:#e6edf3;--color-fg-muted:#848d97;--color-canvas-default:#0d1117;--color-canvas-subtle:#161b22;--color-border-default:#30363d;--color-border-muted:#21262d;--color-neutral-muted:rgba(110,118,129,.4);--color-accent-fg:#2f81f7;--color-accent-emphasis:#1f6feb;--color-danger-fg:#f85149}}.markdown-body{word-wrap:break-word;font-family:-apple-system,BlinkMacSystemFont,Segoe UI,Noto Sans,Helvetica,Arial,sans-serif,Apple Color Emoji,Segoe UI Emoji;font-size:16px;line-height:1.5}.markdown-body:before{content:"";display:table}.markdown-body:after{clear:both;content:"";display:table}.markdown-body>:first-child{margin-top:0!important}.markdown-body>:last-child{margin-bottom:0!important}.markdown-body a:not([href]){color:inherit;text-decoration:none}.markdown-body .absent{color:var(--fgColor-danger,var(--color-danger-fg))}.markdown-body .anchor{float:left;margin-left:-20px;padding-right:4px;line-height:1}.markdown-body .anchor:focus{outline:none}.markdown-body p,.markdown-body blockquote,.markdown-body ul,.markdown-body ol,.markdown-body dl,.markdown-body table,.markdown-body pre,.markdown-body details{margin-top:0;margin-bottom:16px}.markdown-body hr{background-color:var(--borderColor-default,var(--color-border-default));border:0;height:.25em;margin:24px 0;padding:0}.markdown-body blockquote{color:var(--fgColor-muted,var(--color-fg-muted));border-left:.25em solid var(--borderColor-default,var(--color-border-default));padding:0 1em}.markdown-body blockquote>:first-child{margin-top:0}.markdown-body blockquote>:last-child{margin-bottom:0}.markdown-body h1,.markdown-body h2,.markdown-body h3,.markdown-body h4,.markdown-body h5,.markdown-body h6{font-weight:var(--base-text-weight-semibold,600);margin-top:24px;margin-bottom:16px;line-height:1.25}.markdown-body h1 .octicon-link,.markdown-body h2 .octicon-link,.markdown-body h3 .octicon-link,.markdown-body h4 .octicon-link,.markdown-body h5 .octicon-link,.markdown-body h6 .octicon-link{color:var(--fgColor-default,var(--color-fg-default));vertical-align:middle;visibility:hidden}.markdown-body h1:hover .anchor,.markdown-body h2:hover .anchor,.markdown-body h3:hover .anchor,.markdown-body h4:hover .anchor,.markdown-body h5:hover .anchor,.markdown-body h6:hover .anchor{text-decoration:none}.markdown-body h1:hover .anchor .octicon-link,.markdown-body h2:hover .anchor .octicon-link,.markdown-body h3:hover .anchor .octicon-link,.markdown-body h4:hover .anchor .octicon-link,.markdown-body h5:hover .anchor .octicon-link,.markdown-body h6:hover .anchor .octicon-link{visibility:visible}.markdown-body h1 tt,.markdown-body h1 code,.markdown-body h2 tt,.markdown-body h2 code,.markdown-body h3 tt,.markdown-body h3 code,.markdown-body h4 tt,.markdown-body h4 code,.markdown-body h5 tt,.markdown-body h5 code,.markdown-body h6 tt,.markdown-body h6 code{font-size:inherit;padding:0 .2em}.markdown-body h1{border-bottom:1px solid var(--borderColor-muted,var(--color-border-muted));padding-bottom:.3em;font-size:2em}.markdown-body h2{border-bottom:1px solid var(--borderColor-muted,var(--color-border-muted));padding-bottom:.3em;font-size:1.5em}.markdown-body h3{font-size:1.25em}.markdown-body h4{font-size:1em}.markdown-body h5{font-size:.875em}.markdown-body h6{color:var(--fgColor-muted,var(--color-fg-muted));font-size:.85em}.markdown-body summary h1,.markdown-body summary h2,.markdown-body summary h3,.markdown-body summary h4,.markdown-body summary h5,.markdown-body summary h6{display:inline-block}.markdown-body summary h1 .anchor,.markdown-body summary h2 .anchor,.markdown-body summary h3 .anchor,.markdown-body summary h4 .anchor,.markdown-body summary h5 .anchor,.markdown-body summary h6 .anchor{margin-left:-40px}.markdown-body summary h1,.markdown-body summary h2{border-bottom:0;padding-bottom:0}.markdown-body ul,.markdown-body ol{padding-left:2em}.markdown-body ul.no-list,.markdown-body ol.no-list{padding:0;list-style-type:none}.markdown-body ol[type=a s]{list-style-type:lower-alpha}.markdown-body ol[type=A s]{list-style-type:upper-alpha}.markdown-body ol[type=i s]{list-style-type:lower-roman}.markdown-body ol[type=I s]{list-style-type:upper-roman}.markdown-body ol[type="1"]{list-style-type:decimal}.markdown-body div>ol:not([type]){list-style-type:decimal}.markdown-body ul ul,.markdown-body ul ol,.markdown-body ol ol,.markdown-body ol ul{margin-top:0;margin-bottom:0}.markdown-body li>p{margin-top:16px}.markdown-body li+li{margin-top:.25em}.markdown-body dl{padding:0}.markdown-body dl dt{font-size:1em;font-style:italic;font-weight:var(--base-text-weight-semibold,600);margin-top:16px;padding:0}.markdown-body dl dd{margin-bottom:16px;padding:0 16px}.markdown-body table{width:100%;width:max-content;max-width:100%;display:block;overflow:auto}.markdown-body table th{font-weight:var(--base-text-weight-semibold,600)}.markdown-body table th,.markdown-body table td{border:1px solid var(--borderColor-default,var(--color-border-default));padding:6px 13px}.markdown-body table td>:last-child{margin-bottom:0}.markdown-body table tr{background-color:var(--bgColor-default,var(--color-canvas-default));border-top:1px solid var(--borderColor-muted,var(--color-border-muted))}.markdown-body table tr:nth-child(2n){background-color:var(--bgColor-muted,var(--color-canvas-subtle))}.markdown-body table img{background-color:transparent}.markdown-body img{box-sizing:content-box;background-color:var(--bgColor-default,var(--color-canvas-default));max-width:100%}.markdown-body img[align=right]{padding-left:20px}.markdown-body img[align=left]{padding-right:20px}.markdown-body .emoji{vertical-align:text-top;background-color:transparent;max-width:none}.markdown-body span.frame{display:block;overflow:hidden}.markdown-body span.frame>span{float:left;border:1px solid var(--borderColor-default,var(--color-border-default));width:auto;margin:13px 0 0;padding:7px;display:block;overflow:hidden}.markdown-body span.frame span img{float:left;display:block}.markdown-body span.frame span span{clear:both;color:var(--fgColor-default,var(--color-fg-default));padding:5px 0 0;display:block}.markdown-body span.align-center{clear:both;display:block;overflow:hidden}.markdown-body span.align-center>span{text-align:center;margin:13px auto 0;display:block;overflow:hidden}.markdown-body span.align-center span img{text-align:center;margin:0 auto}.markdown-body span.align-right{clear:both;display:block;overflow:hidden}.markdown-body span.align-right>span{text-align:right;margin:13px 0 0;display:block;overflow:hidden}.markdown-body span.align-right span img{text-align:right;margin:0}.markdown-body span.float-left{float:left;margin-right:13px;display:block;overflow:hidden}.markdown-body span.float-left span{margin:13px 0 0}.markdown-body span.float-right{float:right;margin-left:13px;display:block;overflow:hidden}.markdown-body span.float-right>span{text-align:right;margin:13px auto 0;display:block;overflow:hidden}.markdown-body code,.markdown-body tt{white-space:break-spaces;background-color:var(--bgColor-neutral-muted,var(--color-neutral-muted));border-radius:6px;margin:0;padding:.2em .4em;font-size:85%}.markdown-body code br,.markdown-body tt br{display:none}.markdown-body del code{-webkit-text-decoration:inherit;-webkit-text-decoration:inherit;text-decoration:inherit}.markdown-body samp{font-size:85%}.markdown-body pre{word-wrap:normal}.markdown-body pre code{font-size:100%}.markdown-body pre>code{word-break:normal;white-space:pre;background:0 0;border:0;margin:0;padding:0}.markdown-body .highlight{margin-bottom:16px}.markdown-body .highlight pre{word-break:normal;margin-bottom:0}.markdown-body .highlight pre,.markdown-body pre{color:var(--fgColor-default,var(--color-fg-default));background-color:var(--bgColor-muted,var(--color-canvas-subtle));border-radius:6px;padding:16px;font-size:85%;line-height:1.45;overflow:auto}.markdown-body pre code,.markdown-body pre tt{max-width:auto;line-height:inherit;word-wrap:normal;background-color:transparent;border:0;margin:0;padding:0;display:inline;overflow:visible}.markdown-body .csv-data td,.markdown-body .csv-data th{text-align:left;white-space:nowrap;padding:5px;font-size:12px;line-height:1;overflow:hidden}.markdown-body .csv-data .blob-num{text-align:right;background:var(--bgColor-default,var(--color-canvas-default));border:0;padding:10px 8px 9px}.markdown-body .csv-data tr{border-top:0}.markdown-body .csv-data th{font-weight:var(--base-text-weight-semibold,600);background:var(--bgColor-muted,var(--color-canvas-subtle));border-top:0}.markdown-body [data-footnote-ref]:before{content:"["}.markdown-body [data-footnote-ref]:after{content:"]"}.markdown-body .footnotes{color:var(--fgColor-muted,var(--color-fg-muted));border-top:1px solid var(--borderColor-default,var(--color-border-default));font-size:12px}.markdown-body .footnotes ol{padding-left:16px}.markdown-body .footnotes ol ul{margin-top:16px;padding-left:16px;display:inline-block}.markdown-body .footnotes li{position:relative}.markdown-body .footnotes li:target:before{pointer-events:none;content:"";border:2px solid var(--borderColor-accent-emphasis,var(--color-accent-emphasis));border-radius:6px;position:absolute;top:-8px;bottom:-8px;left:-24px;right:-8px}.markdown-body .footnotes li:target{color:var(--fgColor-default,var(--color-fg-default))}.markdown-body .footnotes .data-footnote-backref g-emoji{font-family:monospace}.markdown-body{background-color:var(--color-canvas-default);color:var(--color-fg-default)}.markdown-body a{color:var(--color-accent-fg);text-decoration:none}.markdown-body a:hover{text-decoration:underline}.markdown-body img{display:inline}.markdown-body img[align=center]{margin:0 auto}.markdown-body iframe{background-color:#fff;border:0;margin-bottom:16px}.markdown-body svg.octicon{fill:currentColor}.markdown-body .anchor>.octicon{display:inline}.markdown-body figcaption{text-align:center;padding-top:2px}.markdown-body ol{list-style:decimal}.markdown-body ul{list-style:disc}.markdown-body table{width:-webkit-fit-content;width:-moz-fit-content;width:fit-content}.markdown-body .highlight .token.keyword,.gfm-highlight .token.keyword{color:var(--color-prettylights-syntax-keyword)}.markdown-body .highlight .token.tag .token.class-name,.markdown-body .highlight .token.tag .token.script .token.punctuation,.gfm-highlight .token.tag .token.class-name,.gfm-highlight .token.tag .token.script .token.punctuation{color:var(--color-prettylights-syntax-storage-modifier-import)}.markdown-body .highlight .token.operator,.markdown-body .highlight .token.number,.markdown-body .highlight .token.boolean,.markdown-body .highlight .token.tag .token.punctuation,.markdown-body .highlight .token.tag .token.script .token.script-punctuation,.markdown-body .highlight .token.tag .token.attr-name,.gfm-highlight .token.operator,.gfm-highlight .token.number,.gfm-highlight .token.boolean,.gfm-highlight .token.tag .token.punctuation,.gfm-highlight .token.tag .token.script .token.script-punctuation,.gfm-highlight .token.tag .token.attr-name{color:var(--color-prettylights-syntax-constant)}.markdown-body .highlight .token.atrule,.gfm-highlight .token.atrule{color:var(--color-prettylights-syntax-keyword)}.markdown-body .highlight .token.punctuation,.gfm-highlight .token.punctuation,.markdown-body .highlight .token.function,.gfm-highlight .token.function{color:var(--color-prettylights-syntax-entity)}.markdown-body .highlight .token.string,.gfm-highlight .token.string{color:var(--color-prettylights-syntax-string)}.markdown-body .highlight .token.comment,.gfm-highlight .token.comment{color:var(--color-prettylights-syntax-comment)}.markdown-body .highlight .token.class-name,.gfm-highlight .token.class-name{color:var(--color-prettylights-syntax-variable)}.markdown-body .highlight .token.regex,.gfm-highlight .token.regex{color:var(--color-prettylights-syntax-string)}.markdown-body .highlight .token.regex .regex-delimiter,.gfm-highlight .token.regex .regex-delimiter{color:var(--color-prettylights-syntax-constant)}.markdown-body .highlight .token.tag .token.tag,.markdown-body .highlight .token.property,.gfm-highlight .token.tag .token.tag,.gfm-highlight .token.property{color:var(--color-prettylights-syntax-entity-tag)}.markdown-body .highlight .token.deleted,.gfm-highlight .token.deleted{color:var(--color-prettylights-syntax-markup-deleted-text);background-color:var(--color-prettylights-syntax-markup-deleted-bg)}.markdown-body .highlight .token.inserted,.gfm-highlight .token.inserted{color:var(--color-prettylights-syntax-markup-inserted-text);background-color:var(--color-prettylights-syntax-markup-inserted-bg)}.sr-only{clip:rect(0,0,0,0);word-wrap:normal;border:0;width:1px;height:1px;padding:0;position:absolute;overflow:hidden}[data-footnote-ref]:before{content:"["}[data-footnote-ref]:after{content:"]"}
        </style>
      </head>
      <body>
        <h1>undefined | undefined</h1>
        <table>
          <thead>
            <tr><th>Timestamp (JST)</th><th>User</th><th>Text</th><th>Attachment</th></tr>
          </thead>
          <tbody>
            <tr>
          <td>2020/7/28 23:40:52</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>&lt;@U017V9EGJ90&gt;さんがチャンネルに参加しました</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/7/29 0:18:56</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>&lt;@U017VC4LL7L&gt;さんがチャンネルに参加しました</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/7/29 0:20:31</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>招待ありがとうございます！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/7/29 0:37:25</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>僕の情報とかまったく知らずに不安かもなので、これだけは把握しておきたいとかありましたら気軽に聞いてくださいね！  </p>
<p>こちらから同じ質問を仕返すとかはしないので安心してください！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/7/29 13:18:47</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>そうですねー<br />普段はお仕事しててその合間にSwiftをしてるって感じですか？</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/7/29 13:19:13</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>それとも仕事でもSwiftやってらっしゃる…？？</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/7/29 13:19:33</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>私も聞かれて困ることはそんなないと思うので<br />気になることあったら気軽に聞いてください！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/7/29 19:48:54</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>仕事でもSwiftやってる感じです。  </p>
<p>Swift経験のある方と話せる機会が今までほとんどなくて、気になる事は意外とあるかもなので少しずついろいろと聞かせて頂けると嬉しいです！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/7/29 20:27:02</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>あーそうなんですね！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/7/29 20:27:45</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>自分にわかることってそんなにないかもですがいつでもなんでも聞いてください〜</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/7/29 21:18:10</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>これをきっかけにReoさんが教えるのもいいなって思えたら不幸中の幸いというかなんというかです！笑  </p>
<p>また8月になったら質問の有無にかかわらず一度連絡致しますのでよろしくお願い致します！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/7/29 21:54:12</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>いやｗいまも不幸ではないですよｗ<br />承知しましたー！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/8/1 12:27:55</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>こんにちはー！<br />今日から開始ということで一応契約内容というと堅苦しいですが約束事をおさらいしておきます。  </p>
<pre><code>1, 開始日 2020/08/01  
2, 終了日 2020/08/31  
- 備考  
- reoさんがやめたくなったらその時に終了するのもOK  
- 9月以降は支払いの時に延長が可能か教えて頂けたらと思います。  
- 延長の場合は契約内容改善の要望がありましたら、相談頂けたらと思います。  

3, 料金 月 6000円  
- 支払い方法 kyashアプリでの支払い  
- kyash の支払い先の情報を教えて頂き次第振り込み致します。  

4,対応して頂きたいこと  
- 勉強で詰まったことなどのアドバイス  </code></pre><p>あとはプライベートは優先してください！<br />質問の対応はできる時にする。(基本的に急ぎで回答を求めている事はないです)<br />やめたい時にやめるってぐらいの軽い気持ちでお願いできればと思います。  </p>
<p>内容に漏れなどあれば教えてください。<br />という事でこれからよろしくお願い致します！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/8/1 12:29:25</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>承知しました！<br />よろしくお願い致しますー！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/8/1 12:30:21</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>質問等は平日休日問わずいつでも気軽に投げてください〜</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/8/1 12:32:51</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>了解致しました。<br />助かります！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/8/1 18:51:16</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>こんにちは、さっそく質問です！<br /><em>Reoさんのブログの「ひとつの画面に複数のUICollectionViewやUITableViewを実装してみた」を読んでの</em>質問  </p>
<p>1, <br />記事の方法で tableViewを表示するとなぜスクロールがされないようになるのでしょうか？<br />tableViewは cell数が0の場合でも isScrollEnabled を falseにしないとスクロール(引っ張れる)ができてしまうと思っていたので<br />仕組み的なことを知っていましたら教えて頂きたいです。  </p>
<p>2,<br />tableViewの delegateの処理を他のクラスに切り分けようと考えた時に、自分が思いつく事が記事では UIViewControllerのサブクラスで作ったところを、<br /> UIViewのサブクラスを作って表示させる方法でした。(ChildViewController? という方法を知らなかったので)<br />これら2つの表示方法のメリットの違いなどがありましたら教えて頂きたいです。  </p>
<p>上記2点のご対応のほどよろしくお願い致します！  </p>
<p>↓↓ 2番の説明がしづらかったのでこんな感じの事です。1つ目のコードの部分を、2つ目のコードでやるとメリット、デメリットの違いはあるか  </p>
<pre><code>// tableView表示用の UIViewControllerのサブクラスを作りそれをメインとなる viewに表示させる方法 (記事の方法)  
class TableViewController: UIViewController {  
    lazy var tableView: UITableView = { [weak self] in  
        /*  
         省略  
         */  
    }()  

    override func loadView() {  
        super.loadView()  
          
        view.addSubview(tableView)  
        tableView.translatesAutoresizingMaskIntoConstraints = false  
        tableView.topAnchor.constraint(equalTo: view.topAnchor).isActive = true  
        /*  
         省略  
         */  
    }  
}  </code></pre><pre><code>// tableView表示用の UIViewのサブクラスを作りそれをメインとなる viewに表示させる方法  
class TableViewController: UIView {  
    lazy var tableView: UITableView = { [weak self] in  
        /*  
         省略  
         */  
    }()  
      
    init() {  
        super.init(frame: .zero)  
          
        addSubview(tableView)  
        tableView.translatesAutoresizingMaskIntoConstraints = false  
        tableView.topAnchor.constraint(equalTo: topAnchor).isActive = true  
        /*  
         省略  
         */  
    }  
}  </code></pre></td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/8/2 0:23:05</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>ちょっと外泊で手元にPCがない状態で申し訳ないですが、答えられる範囲で失礼します！  </p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/8/2 0:36:06</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>1は 詳細はみないとちょっとわかりませんね…普通に何の疑問も持ってなかったので  </p>
<p>ちなみに普通のUITableViewでも以下のようにしてやれば、スクロールはしなくなります…<br />tableView.tableFooterView = UIView() </p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/8/2 0:42:14</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>2 は、<br />個人的にデカイメリットとして、UIViewControllerの方を使うと、そこから直接他の画面へ遷移できることだと思います。  </p>
<p>UITableViewを使っている場合は、セルをタップした時に遷移したい場合、デリゲートやNotificationCenter等を使ってやる必要があるので。。</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/8/2 3:33:17</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>回答ありがとうございます！  </p>
<p>tableFooterViewでのスクロールできなくするやり方は知りませんでした。<br />2 に関しても画面遷移がそこから直接できるのは大きいですね。  </p>
<p>そういえば、reoさんのアプリを勉強の参考にしたくて動かしてみてたんですけどめっちゃすごかったです！！<br />難しそうな機能が当たり前のようについてるし、機能数も多いしで実装する立場で考えてみようとしたら頭がついていかずに<br />寝落ちするぐらいダメージを受けました笑</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/8/2 11:22:54</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>大した回答できずにすみません。。。  </p>
<p>わぁありがとうございます！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/8/2 12:11:17</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>十分助かりましたー<br />ありがとうございます！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/8/3 9:44:02</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>こんにちはー！<br />Reoさんのアプリの機能で教わりたい事がありましたので質問させて頂きます。  </p>
<p>1,<br />メインとなる画面のタブとメモを表示する部分の動作の紐付け方について<br />「選択されたタブが変わったらメモ部分がスクロールされる」「メモ部分をスクロールして表示するカテゴリが変わったらタブの位置もスクロールする」<br />という動作の結びつけ方なのですが今まで class間の紐付けは delegateを使ってしか行った事がなく、今回みたいな互いが互いの状態に影響を受けるような場合、delegateでいいのかな？と思ったのですがreoさんの推奨するやり方などありましたら教えて頂きたいです。  </p>
<p>2,<br />カラーセットの説明ダイアログをシャーって飛ばすアニメーションめっちゃ好きなんですがあれって自作アニメーションですか？  </p>
<p>上記2点、教えて頂けますと幸いです！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/8/3 9:59:23</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>こんにちは〜</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/8/3 10:03:05</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>1<br />そのアプリではdelegateで実装しています。<br />NotificationCenter 使ったり、RxSwiftを導入してやったりするのもアリだと思いますよ。<br />RxSwiftは敷居高いかもなんで、NotificationCenterつかえば楽かも…</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/8/3 10:03:18</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>2は自作アニメーションです…！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/8/3 12:25:08</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>やっぱりRxは難しいんですね、、<br />NotificationCenterはいい機会なので勉強してみます。  </p>
<p>自作のクオリティ凄すぎる！！w  </p>
<p>ご対応頂きありがとうございました！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/8/3 13:29:43</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>NotificationCenter はどこに繋がってるか分かりづらくて可読性が下がるっていうデメリットもあるので、多用しすぎはちょっと注意かもです〜</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/8/3 19:17:48</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>結構デメリット大きいですね！<br />分かりました、ありがとうございます！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/8/7 21:28:48</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>こんばんはー！<br />AppAppのコード見てて聞きたいことはいろいろあるんですが、全然まとまらないのでまた今度聞かせてもらうとして、<br />ちょっとコードの質問から外れてしまうんですが reoさんはフリーランスで働いてるかって聞いても大丈夫ですか？</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/8/7 21:37:20</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>こんばんは〜<br />一応フリーランスで働いてますよ。<br />仕事とってきたりせずにずっと同じとこに所属してるので<br />フリーランスって言えるか怪しいですが…</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/8/7 22:02:02</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>そうなんですね！<br />今の時期ってフリーだとコロナの影響で大変だったりしますか？</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/8/7 22:04:12</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>ここら辺の質問はちょっとプライベートに踏み込みすぎてるので答えたくない事とかは、黙秘って言ってくれて大丈夫です！！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/8/7 22:29:50</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>自分は多分すごく特殊な働き方してると思うんでコロナの影響は全くないですねー</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/8/7 22:30:45</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>iOSエンジニアはそこまで影響受けてないんじゃないですかね？<br />むしろ人手はどこも足りてないと思うので</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/8/7 22:59:16</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>特殊な働き方をしているところに特殊な弟子入りみたいなやつがきた感じでしたか。はい、無視してください。  </p>
<p>とういう事で少し本筋の質問に戻るのですが、reoさんのコード見ててめっちゃ綺麗だなって思いました。<br />あんな風にかけるようになるのは、いろんなコードを見たり描いたりしてきて自然にできるようになったのでしょうか、<br />それとも何か意識的に気をつけて書くようになった事などはありますか？</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/8/7 23:02:03</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>職場のリードエンジニアの方がめちゃくちゃ綺麗なコードを書く方で<br />その人のコードをとにかく真似して書くことでめっちゃ進歩しましたねー</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/8/7 23:03:18</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>あとはコードレビューとかもしてもらったので、それで今みたいな感じになってます！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/8/7 23:14:01</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>なるほど〜<br />ちなみに xibはなるべく使うべきでしょうか？  </p>
<p>今までコードレビューしてもらった事がなくてめちゃくちゃな状態なので何か機能を実装した時など、<br />コードを見てもらったりできると嬉しいです！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/8/7 23:23:22</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>個人的には xib 使うべきだと思いますね</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/8/7 23:24:34</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>• xib派<br />• Storyboard派<br />• コードだけで書く派<br />の3通りかなーと思うんですけど、小林さんは今どのやり方ですかね？</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/8/7 23:25:55</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>コードレビューするの自体は全然いいんですけど<br />それするとかなり月額安すぎ問題になってしまうんですよねｗｗ</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/8/7 23:38:07</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>コードだけでやってます〜  </p>
<p>コードレビューを含める場合は月額は見直します！<br />ちなみに希望額などございますか？</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/8/7 23:43:34</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>とりあえず来月からの契約見直しになるので、一応コードレビューを含めた場合の月額を決めておいて<br />今月の終わりくらいに延長してもいいよって感じでしたら決めた金額での契約にさせて頂けたらと思います！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/8/8 0:29:42</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>自分も最初はコードだけでやってたんですけど、<br />やっぱりxib上で設定できるものは全部xibでやることで<br />すごくコードがスッキリするのでおすすめです！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/8/8 0:31:25</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>そうですね！ちょっと考えてみます。<br />でもコードレビューするなら、月額よりレビュー単価決めてやる方がいいのかなーって気もしてます。。</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/8/8 8:59:06</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>xibほとんど使ったことなかったので、これから使ってみます！  </p>
<p>単価制でも問題ないので、ぜひ検討頂けると嬉しいです！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/8/8 19:56:15</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>是美是非〜！<br />承知しました🙇‍♀️🙇‍♀️</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/8/8 19:59:55</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>あ、コードレビューする場合なんですけど<br />こちらから適当に課題出して小林さんにやってもらってレビューする方式はどうでしょう？？</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/8/8 20:30:13</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>課題を頂けると助かるのでぜひその方式でお願いしたいです！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/8/8 20:42:01</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>了解です！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/8/8 20:44:11</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>単価決めたら月額と別でできるので<br />来月まで待たずに始めることできます…！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/8/8 20:45:06</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>いくらがいいでしょうね……<br />予算………</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/8/8 21:01:23</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>コードレビューの単価相場が正直どれくらいか分からなかったので<br />コードレビュー込みの月額プランをいろいろ見てたのですが、<br />10000 ~ 12000円くらいの人が多いかなって感じたので、単価 8000円でどうでしょうか？？</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/8/8 21:05:56</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>調べてくれてありがとうございます…！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/8/8 21:08:51</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>自分 iOSエンジニアで働いている時は時給3000円だったんですよね（フリーのエンジニア的には多分大分低い）<br />なので月額6000円で引き受けたって話を友達にするとバカって言われたりしたんですけどｗｗ</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/8/8 21:10:29</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>課題の規模によっちゃうと思うので、30分でできるコードレビューなのに<br />8000円もらうのちょっとアレなんで、課題出すときに毎回見積もり出す感じでもいいですか？</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/8/8 21:12:39</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>とりあえず<br />コードレビューにかかりそうな時間 * 2000 くらいでどうでしょう？  </p>
<p>私が課題出すときに 1時間でコードレビューする見積もりを出した場合、<br /> 1(hour) * 2000(円) で 単価2000円といった感じです！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/8/8 21:27:05</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>分かりました。<br />コードレビューの単価はそれでお願いします！  </p>
<p>月額の方は見直した方が良さそうですね。<br />と言っても月 10000円が限界かなという感じなのでそれでよければ、<br />来月から月額 10000円 + レビュー課題が欲しい時に提案頂いた単価で課題を頂く<br />というのはどうでしょうか？</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/8/8 21:30:23</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>あっ いや、今のところ月額はそのままで大丈夫ですよ！<br />他人には安すぎって言われちゃうけど自分は今のところ不満ないので！すみません！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/8/8 21:31:59</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>6000円 + 課題 でいきましょう！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/8/8 21:43:35</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>俺としては、個人同士の契約になるので「自分が得する事しか考えていない提案はしない人」ってくらいの信頼は得て、<br /> reoさんが安心できる契約環境は整えたいので明らかにおかしい部分はできるかぎり直します！  </p>
<p>なので、来月からは月額 10000円 + レビュー課題が欲しい時に提案頂いた単価にしましょう！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/8/8 21:51:22</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>承知しました〜<br />でももし、課題与えてそれに関する質問やコードレビューがほとんどになったら<br />何に対しての月額料金何だろうって気になってきちゃうので<br />とりあえず来月それでやってみてまた調整が必要だったらしましょう！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/8/8 21:55:06</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>個人的には 金額が高くなればなるほど、ちゃんとやらないとっていう不安感増しちゃうので<br />それはそれで だったりするんですよw（めんどくさくて申し訳ない</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/8/8 21:55:28</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>ちなみに小林さん GitHub は使ってますか？？</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/8/8 22:04:55</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>分かりました。<br />頼んでおいていろいろ手探りになって申し訳ないです！  </p>
<p>確かにそれはそれでプレッシャーになりますね<br />でもそういうつもりはないので気楽にやりましょーw<br />GitHub はプッシュするまでならできます！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/8/8 22:10:52</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>いえいえ！こちらも初めてなので一緒に手探りでやっていきましょう！ｗ</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/8/8 22:12:22</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>課題やる時はGitHub使いたいと思うので、<br />その辺の使い方も是非覚えましょ！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/8/8 22:36:54</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>ありがとうございます！<br />課題は reoさんの準備が整い次第頂ければと思います。<br />支払いはコードレビューをお願いする時にして、支払い完了の確認を頂いてからレビューしてもらう流れでも大丈夫でしょうか？</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/8/8 22:43:00</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>了解です！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/8/17 23:15:23</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>9月からの契約内容更新しました！  </p>
<pre><code>1, 開始日 2020/09/01  
2, 終了日 未定  
- 備考  
- reoさんがやめたくなったらその時に終了するのもOK  
- 上記の「やめたくなったら終了」が全てなので終了日の設定はとりあえず無くしました。  

3, 料金 月 10000円  
- 支払い方法 kyashアプリでの支払い  
- 月の中旬頃に支払いをする  

4, 課題コードレビュー  
- 支払い方法 kyashアプリでの支払い  
- コードレビューにかかる見込み時間 × 2000円  
- 課題を頂く都度、金額を設定してもらう  
- コードレビューをお願いする時に支払いをする  

5,対応して頂きたいこと  
- 勉強で詰まったことなどのアドバイス  
- 課題コードレビュー  </code></pre><p>変更点  </p>
<ul>
<li>2の終了日は未定にしました。  </li>
<li>3の月額を変更いたしました。  </li>
<li>4の課題コードレビュを追加いたしました。  </li>
<li>5の対応頂きたい内容にもコードレビューを追加いたしました。</li>
</ul>
<p>こちらちょっと早いですが、更新致しますのでご確認頂けれますと幸いです！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/8/18 14:29:56</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>ありがとうございます！ 🙇‍♀️</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/8/30 16:42:18</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>課題とは別に、tableViewのレイアウトで上手く行かない事がありましたので質問させて頂きます！  </p>
<pre><code>- 問題点  
     - tableViewの heightが cellに合わせて更新されず、全てのセルが表示されない。  

- 前提となる情報  
     - tableViewの cellの heightは100  
     - tableViewの cell数は20  
     - collectionViewCell の subViewに scrollViewを置き、 scrollViewの subViewに tableViewを表示させる  
     (tableViewをスクロールした時にセルが再利用される動きが嫌だったので、tableViewをスクロールさせないようにして scrollViewをスクロールさせるためにこのような配置にしています。)  
     - tableViewの cellの heightを指定しない場合は想定した挙動になります。  

       
- 想定していたこと  
     - tableView.contentSizeは 2000になる。  
     - tableViewHeightConstraints.constant = tableView.contentSize.height をした後の,  
     tableView.frame.size.heightは 2000になる。  
     - scrollViewをスクロールすることで cellが全て表示される。  
       

- 実際の挙動  
     - tableView.contentSizeは 1048になっている。  
     - tableViewHeightConstraints.constant = tableView.contentSize.height をした後の,  
     tableView.frame.size.heightは 100になっている。 &amp;lt;- この100という値は xibで heightの constraintsで設定した値です。  </code></pre><p>tableViewの heightの更新コード<br /><code>CustomCollectionViewCell.swift</code>  </p>
<pre><code>override func layoutSubviews() {  
   super.layoutSubviews()  
   tableView.layoutIfNeeded()  
   tableViewHeightConstraints.constant = tableView.contentSize.height  
          
   print("tableView.contentSize.height: \(tableView.contentSize.height)")  
   print("tableView.frame.size.height: \(tableView.frame.size.height)")  
}  </code></pre><ul>
<li>tableView の cellの heightを指定すると、正しい contentSizeにならない理由。  </li>
<li>tableView の constraintsを変更した後、tableView.frame.size.height の値が変わっていない理由。<br />上記2点のアドバイスを頂けますと助かります。<br />お手隙の際によろしくお願いします！</li>
</ul>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/8/30 18:42:28</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p><code>CustomCollectionViewCell</code> 上の <code>layoutSubviews()</code> が呼ばれるタイミングで<br />セルの高さがまだ決まってないんじゃないでしょうか？<br />なので、デフォルトの高さ * セルの数 で <code>contentSize.height</code> が割り出されている状態かな？って気がします。  </p>
<p>まず、根本的な問題なんですが、  </p>
<blockquote>
<p>collectionViewCell の subViewに scrollViewを置き、 scrollViewの subViewに tableViewを表示させる  </p>
</blockquote>
<p>っていうのがかなり地獄なので、避けられませんか？  </p>
<p><code>tableView</code> と <code>collectionView</code> の入れ子になる状況を避けたいです。（私もそういうふうに作って怒られたことがあるんですけどねｗ）  </p>
<p>挙動が思い通りにいかないのも入れ子になっていると<br /><code>tableView</code> の問題なのか、 <code>tableViewCell</code> の問題なのか、そもそも<code>collectionViewCell</code> の方の問題なのか等の判別も難しくなってしまうんですよね。  </p>
<p>なので、個人的には設計の仕方のほうを直した方が良いかなーと思います。。</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/8/30 19:48:25</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>なるほど、<code>tableView</code> と <code>collectionView</code> の入れ子状態は自分が両方苦手だから分かりづらいのかなって思ってたんですが、<br />一般的にもよくない設計だったんですね！  </p>
<p>違う方法で見直してみます。<br />ありがとうございます！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/8/30 21:09:16</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>そうなんですよ〜<br />結局誰でもわかりやすい設計ってのが一番良いので、自分複雑な実装できてすごい！って思ってる時こそ意外ともっといい方法があったりするんですよねｗ</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/8/30 22:00:55</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>ちゃんと設計を考えてから実装をするようにしないと簡潔なコードでの実装ってできるようにならなそうですね！<br />なるべく簡単にを意識してやってみます！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/9/24 0:33:36</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>CollectionViewについての質問です！  </p>
<p>下記のコードについて<br />• 期待する挙動<br />一つ目のセルには赤と青の viewが表示。<br />二つ目のセルには赤、黄、茶の viewが表示。<br />三つ目のセルには黄、茶、青の viewが表示。  </p>
<p>• 実際の挙動<br />最初の表示は 期待する挙動 の通りになっているのですが、3つ目のセルまでスワイプして再度1つ目のセルに戻ると表示が 赤、青、赤、青のように増えていて、<br />1つ目のセルまでスワイプして3つ目のセルまで戻ると 黄、茶、青、黄、茶、青 のように増えてしまいます。<br />2つ目のセルは変わらないです。  </p>
<p>• 回答頂きたいこと  </p>
<ul>
<li>このような挙動になる理由  </li>
<li>解決方法<br />こちらを教えて頂けると助かります！<br />よろしくお願いします。</li>
</ul>
<p><code>MainCollectionViewController.swift</code>  </p>
<pre><code>final class MainCollectionViewController: UIViewController {  

    @IBOutlet private weak var collectionView: UICollectionView! {  
        /* 省略 */  
    }  

    private let colors: [[UIColor]] = [  
        [.red, .blue],  
        [.red, .yellow, .brown],  
        [.yellow, .brown, .blue]  
    ]  
      
    override func viewDidLoad() {  
        super.viweDidLoad()  
    }  
}  

// MARK: - UICollectionViewDelegate  

extension MainCollectionViewController: UICollectionViewDelegate {}  

// MARK: - UICollectionViewDataSource  

extension MainCollectionViewController: UICollectionViewDataSource {  
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -&gt; Int {  
        return colors.count  
    }  

    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -&gt; UICollectionViewCell {  
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: R.reuseIdentifier.mainCollectionViewCell, for: indexPath)!  
        cell.configure(colors: colors[indexPath.item])  
        return cell  
    }  
}  </code></pre><p><code>MainCollectionViewCell.swift</code>  </p>
<pre><code>final class MainCollectionViewCell: UICollectionViewCell {  

    @IBOutlet private weak var stackView: UIStackView!  

    func configure(colors: [UIColor]) {  
        colors.forEach { color in  
            let view = UIView()  
            view.backgroundColor = color  
            stackView.addArrangedSubview(view)  
            view.translatesAutoresizingMaskIntoConstraints = false  
            view.heightAnchor.constraint(equalToConstant: 150).isActive = true  
        }  
    }  
}  </code></pre></td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/9/24 18:49:50</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>このコードの問題はcellの設定部分にありますね。  </p>
<pre><code>colors.forEach { color in  
    let view = UIView()  
    view.backgroundColor = color  
    // ここが問題  
    stackView.addArrangedSubview(view)  
    view.translatesAutoresizingMaskIntoConstraints = false  
    view.heightAnchor.constraint(equalToConstant: 150).isActive = true  
}  </code></pre><p>UICollectionViewやUITableViewはセルが再利用して使われる仕組みになっていて、<br />再利用時には既にStackViewにViewが追加されたものが使われることになります。  </p>
<p>なので、一度画面上から消えてしまう1つ目のセルや3つ目のセルでは、再利用されたセルが使われて  </p>
<blockquote>
<p>1つ目のセルまでスワイプして3つ目のセルまで戻ると 黄、茶、青、黄、茶、青 のように増えてしまいます。  </p>
</blockquote>
<p>のような現象が起きてしまいます。</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/9/24 18:55:38</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>この問題は <code>prepareForReuse</code> というセルの再利用時に呼ばれる関数で初期化することによって対策することができます。  </p>
<pre><code>final class MainCollectionViewCell: UICollectionViewCell {  

    @IBOutlet private weak var stackView: UIStackView!  
      
    // ここを追加  

    override func prepareForReuse() {  
        super.prepareForReuse()  
        stackView.subviews.forEach { $0.removeFromSuperview() }  
    }  

    func configure(colors: [UIColor]) {  
        colors.forEach { color in  
            let view = UIView()  
            view.backgroundColor = color  
            stackView.addArrangedSubview(view)  
            view.translatesAutoresizingMaskIntoConstraints = false  
            view.heightAnchor.constraint(equalToConstant: 150).isActive = true  
        }  
    }  
}  </code></pre><p>基本的に <code>collectionView(*_* collectionView: UICollectionView, cellForItemAt indexPath: IndexPath)</code> の内部で <code>addSubview</code> をするのは危なくて、このような現象が発生しやすくなっちゃいますね。  </p>
<p>UICollectionViewを用いた画像一覧で、画像の遅延読み込みを行なった場合などでも、違う画像がチラつくなどの問題が発生します。<br />そういう時にも <code>prepareForReuse</code> でを使って、再利用時には <code>imageView.image = nil</code> にする処理が必要になります。</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/9/24 18:56:17</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>あと <code>prepareForReuse</code> をする際には <code>super.prepareForReuse()</code> を呼ばないと怪しい挙動になることもあるのでちゃんと読んであげる必要があります！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/9/24 21:18:06</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p><code>prepareForReuse</code>という再利用時に呼ばれる関数があることも知らなかったので勉強になりました！<br />ありがとうございます！  </p>
<p>データ数によって cellに表示する view の数を変更したい場合はどうしても、<code>collectionView(*_* collectionView: UICollectionView, cellForItemAt indexPath: IndexPath)</code> の中で <code>addSubview</code> をするしか思い付かなかったのですが、このやり方は危ないからダメというよりは、やるなら <code>prepareForReuse()</code> を使って初期化などの処理をしようという感じでしょうか？<br />それとも他に推奨されているやり方があるということでしょうか？</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/9/25 10:05:34</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>うーん、今回の例だと、自分なら単純に <code>section</code> を用いるかなーと思います。  </p>
<p>UICollectionView側では以下のようにして  </p>
<pre><code>func numberOfSections(in collectionView: UICollectionView) -&gt; Int {  
    return colors.count  
}  

func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -&gt; Int {  
    return colors[section].count  
}  

func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -&gt; UICollectionViewCell {  
    let cell = collectionView.dequeueReusableCell(withReuseIdentifier: R.reuseIdentifier.customCollectionViewCell, for: indexPath)!  
    cell.configure(color: colors[indexPath.section][indexPath.row])  

    return cell  
}  </code></pre><p>UICollectionViewCellでは単に  </p>
<pre><code>final class MainCollectionViewCell: UICollectionViewCell {  

    func configure(color: UIColor) {  
        contentView.backgroundColor = color  
    }  

}  </code></pre><p>って感じにしますね。  </p>
<p>もし各セルごとにレイアウトが異なる場合には、別のカスタムセルを用意してやるかなぁって感じですね。  </p>
<p>それでも実現できない場合には、 <code>prepareForReuse</code> で <code>removeFromSuperview</code> をするかなぁと思うんですが、セルの再利用してる意味があんまりないのでは？と思いますし、恐らくパフォーマンス的にもよくないと思うので、滅多にやることはないですね…。</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/9/25 20:05:07</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>UICllectionView は section を横並びで、cell は縦並びという感じにできるんですね！  </p>
<p>帰ったら試してみます！<br />回答頂いたことの受け取り方が違かったら何度も申し訳ありませんがまた質問させてください🙇‍♂️</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/9/25 20:15:32</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>あっ そういう構成だったんですね。普通に縦並びで考えてました…<br />私の方もあとで改めてみてみますね！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/9/25 20:31:22</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>よくあるニュースアプリみたいなのをイメージしてました！  </p>
<p>カテゴリーが「おすすめ」「新着」と存在したら2ページ分横にスワイプができて、「おすすめ」カテゴリーのページではおすすめ記事のデータ数分、縦に記事が並んで、「新着」カテゴリーのページでは新着記事のデータ数分、縦に記事が並ぶ感じです！  </p>
<p>すみません、お手数をおかけ致します。</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/9/25 21:46:01</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>あーこういうイメージってことですかね？</p>
</td>
          <td>
            <a href="undefined/F01BSD8NY1F-iOS の画像.png" target="_blank"><img src="undefined/F01BSD8NY1F-iOS の画像.png" width="150" alt="iOS の画像 /></a>",<a href="undefined/F01BDQ553LJ-iOS の画像.png" target="_blank"><img src="undefined/F01BDQ553LJ-iOS の画像.png" width="150" alt="iOS の画像 /></a>"
            </td>
        </tr>
<tr>
          <td>2020/9/25 21:50:40</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>もしこういうUIなら、それぞれ別のものとして捉えて<br />カテゴリ部分はUICollectionViewで<br />記事の部分はUICollectionViewやUITableViewで  </p>
<p>その２つを連携させるのにUIPageViewController を用いる<br />って風に自分ならすると思います…！</p>
</td>
          <td>
            <a href="undefined/F01AZ2RBZ9D-iOS の画像.png" target="_blank"><img src="undefined/F01AZ2RBZ9D-iOS の画像.png" width="150" alt="iOS の画像 /></a>"
            </td>
        </tr>
<tr>
          <td>2020/9/25 22:41:27</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>分かりました！<br />ありがとうございます！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/10/3 16:59:49</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>reoさんの「【Swift 3】UINavigationControllerを用いた画面遷移のアニメーション変更【CATransition】」の記事 についての質問です！  </p>
<p>Navigation遷移のアニメーションを変更するため、UINavigationControllerのカスタムクラスに記述する下記のコードの<br />最後の <code>return super.pushViewController(viewController, animated: false)</code> という部分についてなのですが、  </p>
<pre><code>override func pushViewController(_ viewController: UIViewController, animated: Bool) {  
        //もともとのアニメーションを削除  
        self.view.layer.removeAllAnimations()  
        if(animated){  
            //新しいアニメーションをつける  
            let transition:CATransition = CATransition()  
            transition.duration = 0.25  
            transition.type = kCATransitionMoveIn  
            transition.subtype = kCATransitionFromTop  
            self.view.layer.add(transition,forKey:kCATransition)  
        }  
        return super.pushViewController(viewController, animated: false)  
}  </code></pre><p><code>pushViewController(_ viewController: UIViewController, animated: Bool)</code> メソッドは戻り値を受け取るようになっていないにも関わらずなぜ return の後ろに記述することができるのでしょうか？</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/10/3 19:47:56</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>かなり前で覚えのない記事だったのでちょっとみてきたんですが、  </p>
<pre><code>popViewController(animated: Bool) -&gt; UIViewController?  </code></pre><p>の方につられて書いてしまっているだけですね…なので return をつけずに書けば良いとは思います！  </p>
<p>こういう風にかける理由としては、<br />関数には返り値がない場合には <code>Void</code> と指定します。  </p>
<pre><code>override func pushViewController(_ viewController: UIViewController, animated: Bool) -&gt; Void {  
}  </code></pre><p>省略されているだけで、<code>Void</code> を返す関数なわけですね。  </p>
<p>例えばguard文などで  </p>
<pre><code>private func hoge() {  
    guard isSelected else { return }  
}  </code></pre><p>とかで <code>return</code> を書くじゃないですか。  </p>
<p>これも  </p>
<pre><code>private func hoge() -&gt; Void {  
    guard isSelected else { return Void() }  
}  </code></pre><p>とすることができるんですね。  </p>
<p>普通はこんな風に <code>return Void()</code> とは書きませんが、これでも問題なくビルドすることができます。  </p>
<pre><code>override func pushViewController(_ viewController: UIViewController, animated: Bool) -&gt; Void {  
    // 親でもVoidを返されるので、問題なく動く  
    return super.pushViewController(viewController, animated: false)  
}  </code></pre><p>ただ、<code>return</code> を書くと関数を抜けてしまうので、それ以後の処理は行われません。  </p>
<pre><code>override func pushViewController(_ viewController: UIViewController, animated: Bool) {  
    return super.pushViewController(viewController, animated: false)  
    print("ここはよばれない")  
}  

override func pushViewController(_ viewController: UIViewController, animated: Bool) {  
    super.pushViewController(viewController, animated: false)  
    print("よばれる")  
}  </code></pre><p>明示的に関数の最後ですよというのがわかるので、そういう意味合いで <code>return</code> をつけるのはアリかなーとも思います！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/10/3 19:47:59</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>説明が難しい…ｗ これで大丈夫でしょうか？！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/10/3 20:30:34</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>ありがとうございます！<br />記事の投稿日見てだいぶ昔の記事だったので質問するか迷った末にさせて頂きましたw  </p>
<p>基礎的な部分でそもそも2つ勘違いしていました。<br />1つは、コードの読み込みって人が文章を読むときと同じように、左上から読まれると思っていたので戻り値が指定されていない関数の場合は、<br /><code>return</code> が呼ばれた時点で <code>return</code> より右側の <code>super.pushViewController(viewController, animate: false)</code> は普通実行されないものだと思っていました。  </p>
<p>2つ目は、戻り値の指定されていない関数で <code>return</code> の右側に数字とか文字列を書くとエラーが出るので <code>return</code> の右に書かれたものは戻り値と認識されて、<br />「戻り値を指定してないのに値を返すな」的な感じでエラーが出ているのかと思っていたのですが、実際は「戻り値は Void型で指定されてるのに違う型の値を返すな」という意味でエラーが出ていて、値ではなく処理を書くことは大丈夫だったんですね。  </p>
<p>聞いてみてよかったです！<br />助かりました、ありがとうございます！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/10/3 20:35:42</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><blockquote>
<p>「戻り値を指定してないのに値を返すな」的な感じでエラーが出ているのかと思っていたのですが、実際は「戻り値は Void型で指定されてるのに違う型の値を返すな」という意味でエラーが出ていて  </p>
</blockquote>
<p>わかりやすいｗｗ<br />助けになれたならよかったです！！🙇‍♀️<br />古い記事でもむしろその頃よりは成長して答えられるようになってるはずなので、気にせずなんでも聞いてくださいね〜！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/10/6 22:39:40</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>R.Swiftの導入手順についての質問です！  </p>
<p>R.generated.swift ファイルをプロジェクトに追加する時に,<br />「Copy items if needed のチェックを外してください。」と説明があったのですがここのチェックを外す理由とはなんでしょうか？<br />記事のURL:<br /><a href="https://qiita.com/skycat_me/items/76423e1c534088a62f7f" rel="noopener noreferrer">https://qiita.com/skycat_me/items/76423e1c534088a62f7f</a>  </p>
<blockquote>
<p>Xcode外で追加したファイルはXcodeに認識されないことがよくあります。  </p>
</blockquote>
<blockquote>
<p>そのような場合は、Xcode でドラッグ＆ドロップして追加することで問題なく認識されます。  </p>
</blockquote>
<blockquote>
<p>このとき、<code>Copy items if needed</code>にはチェックをいてておきましょう。  </p>
</blockquote>
<blockquote>
<p>（その場所に同じファイルがなければコピーして作ってくれます。もしない場合にチェックしていなければ、選択したものを直接参照するようになります）  </p>
</blockquote>
<p>別の記事(R.Swift導入とは関係ない記事)で上記のような説明があったのですが、チェックをつけてプロジェクトに追加した時とチェックなしで追加した時の違いがわかりませんでした。</p>
</td>
          <td>
            <a href="undefined/F01BM39U4RM-スクリーンショット 2020-10-06 22.23.33.png" target="_blank"><img src="undefined/F01BM39U4RM-スクリーンショット 2020-10-06 22.23.33.png" width="150" alt="スクリーンショット 2020-10-06 22.23.33.png /></a>"
            </td>
        </tr>
<tr>
          <td>2020/10/6 23:16:07</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>これ以前のXcodeのバージョンだと、 <code>Copy items if needed</code> にチェックを入れてしまうと<br />重複してしまうみたいな挙動してた気がするんですけど、今だとどちらも問題なく想定どおりになりますね。。<br />（ <code>hogehoge.xcodeproj/project.pbxproj</code> に複数参照されてしまっていたような記憶…）  </p>
<p>そう言う理由でこれを外しておかないと <code>R.swift</code> はうまくはいらなかった記憶が微かにあるんですが。。<br />今はどちらでも大丈夫かもしれないですね。  </p>
<p>あえていうなら…<br /><a href="https://github.com/mac-cain13/R.swift" rel="noopener noreferrer">https://github.com/mac-cain13/R.swift</a><br /><code>R.swift</code> の <code>README</code> に書いてある導入方法に uncheck をしてねって書いてあるからですかねｗ  </p>
<blockquote>
<ol>
<li>Build your project, in Finder you will now see a <code>R.generated.swift</code> in the <code>$SRCROOT</code>-folder, drag the <code>R.generated.swift</code> files into your project and <em>uncheck</em> <code>Copy items if needed</code></li>
</ol>
</blockquote>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/10/6 23:26:47</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>なるほど、重複の可能性があったんですね！<br />README英語すぎて全く気づかなかったですw<br />ありがとうございます！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/10/8 23:45:00</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>UIPageViewController についての質問です！<br />ページの切替方法についてなのですが、スワイプ以外での切替は可能なのでしょうか？( ボタンをタップしたらページを切り替えるなどです )</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/10/9 16:05:15</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>できますよー！<br />ボタンをタップした時などに  </p>
<pre><code>setViewControllers([viewController], direction: .forward, animated: true, completion: nil)  </code></pre><p>を呼んであげれば切り替えできます！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/10/9 20:10:15</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>UIpageViewController のスワイプ動作は画面遷移なんですね！<br />スクロールで切り替えていると UIScrollViewのページング動作と同じ認識をしてしまっていて画面遷移である事に気づきませんでした😑  </p>
<p>ありがとうございます！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/10/15 21:33:32</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>忙しい時にすみません！<br />RxSwiftの勉強をしたいのですが、おすすめの参考書とかってありますか？</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/10/15 21:44:33</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>うーーん 自分が勉強した当時は  </p>
<p>この記事シリーズを読むのと<br /><a href="https://qiita.com/k5n/items/17f845a75cce6b737d1e" rel="noopener noreferrer">https://qiita.com/k5n/items/17f845a75cce6b737d1e</a>  </p>
<p>比較して学ぶRxSwift入門<br /><a href="https://www.amazon.co.jp/dp/4844398792/ref=cm_sw_r_tw_dp_x_FpeIFb3BVFR2B" rel="noopener noreferrer">https://www.amazon.co.jp/dp/4844398792/ref=cm_sw_r_tw_dp_x_FpeIFb3BVFR2B</a>  </p>
<p>を読みました！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/10/15 21:46:12</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>RxSwift入門の本、よかったらPDF持ってるんであげますよ…</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/10/15 21:48:27</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>ありがとうございます！<br />もらうのは悪いので半額払います！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/10/15 21:48:48</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>実はこれ自分ももらったやつなんですよｗｗｗ</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/10/15 21:49:04</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p><a href="https://drive.google.com/file/d/1MQjicCMuKT5awMn_ecHul833AnTUNVSD/view" rel="noopener noreferrer">https://drive.google.com/file/d/1MQjicCMuKT5awMn_ecHul833AnTUNVSD/view</a></p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/10/15 21:50:05</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>リンク知っている人はみんなみれる本っぽいので…！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/10/15 21:50:36</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>簡単なもので良かったら次の課題RxSwiftにしてみます？</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/10/15 21:52:50</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>そうなんですねw<br />本当にありがたいです🙇‍♂️  </p>
<p>課題やってみたいです！！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/10/15 22:00:40</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>了解ですー！<br />息抜きがてら作れたら明日にでも出します！  </p>
<p>ちょっと無理だったら来週末くらいになっちゃうかもです…</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/10/15 22:02:37</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>全然ゆっくりで大丈夫です！<br />ありがとうございます！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/10/29 21:30:17</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>お手隙の際で大丈夫ですので、ご対応頂ければと思います。  </p>
<p>○質問内容  </p>
<pre><code>Carthage での RxSwift 導入の仕方  </code></pre><p>○おこなった手順  </p>
<pre><code>1, Cartfile作成  
2, Cartfileに github "ReactiveX/RxSwift" を記述する  
3, ターミナルで carthage update --platform ios --no-use-binaries を入力して実行  

4, 添付画像の画面で RxSwift.framework が表示されない &lt;- 問題部分  </code></pre><p>○補足情報  </p>
<pre><code>- 3の手順で carthage update --platform ios ではエラーが出ていたため、 --no-use-binaries をつけることでエラーは解消されました。  

- 次に3の手順で carthage update --platform ios --no-use-binaries で実行すると Task failed with exit code 1: このエラーが出たので、  
&lt;https://qiita.com/pinoerumo/items/0a340078ea2e0f8d01b0&gt;  この記事を参考にエラーを解決しました。  

上記2つのエラーを解消後、他のエラーは確認できないのですが、4の手順で RxSwift.framework が表示されず解決方法が分からずにいます。  </code></pre><p>○教えて頂きたい事  </p>
<pre><code>- おこなった手順に記載した手順に間違った手順はあるか？  
- Carthageで RxSwift導入の正しいやり方  </code></pre><p>こちらお手数ですがよろしくお願いします！</p>
</td>
          <td>
            <a href="undefined/F01DSE51A9J-スクリーンショット 2020-10-29 0.03.52.png" target="_blank"><img src="undefined/F01DSE51A9J-スクリーンショット 2020-10-29 0.03.52.png" width="150" alt="スクリーンショット 2020-10-29 0.03.52.png /></a>"
            </td>
        </tr>
<tr>
          <td>2020/10/29 21:33:56</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>これ ここから Carthage フォルダ内の <code>RxSwift.framework</code> を探せば行けると思います！</p>
</td>
          <td>
            <a href="undefined/F01EA55FK4Y-スクリーンショット 2020-10-29 21.32.37.png" target="_blank"><img src="undefined/F01EA55FK4Y-スクリーンショット 2020-10-29 21.32.37.png" width="150" alt="スクリーンショット 2020-10-29 21.32.37.png /></a>"
            </td>
        </tr>
<tr>
          <td>2020/10/29 21:34:30</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>ここのリストには Carthage で入れたライブラリは多分 でてこないはず...</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/10/29 21:36:45</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>行けました！！<br />ありがとうございます！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/11/5 10:52:29</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>アプリリリースできましたので良かったらどうぞ！！！  </p>
<p><a href="https://apps.apple.com/jp/app/repotch/id1537512055|https://apps.apple.com/jp/app/repotch/id1537512055" rel="noopener noreferrer">https://apps.apple.com/jp/app/repotch/id1537512055|https://apps.apple.com/jp/app/repotch/id1537512055</a></p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/11/5 10:53:52</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>まだちょっと、新しいバージョンがありますってアラートが出ちゃうバグとか<br />広告が出ないとかあって、宣伝とかもしてないんですけど、<br />今審査出したのが通れば直るはずなので、とりあえずご報告です！！😭</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/11/5 10:54:49</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>落ち着いたので、遅くなっちゃいましたが次の課題作りもします！<br />お待たせしちゃって申し訳ないです！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/11/5 22:41:20</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>おー！お疲れ様です！！<br />アイコンがすでにおしゃれ！って思ってたらアプリ自体の出来がすごすぎた笑<br />普通に出回ってるアプリよりだいぶかっこいい！！  </p>
<p>課題作りもありがとうございます！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/11/6 10:21:16</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>ありがとうございます！！<br />是非 勉強する時とか課題に取り組む時とかに使ってくれると嬉しいです！🙇‍♀️  </p>
<p>あと、最初に出した設定画面の課題なんですが、実際にアプリに組み込んでみて思うところがあったので<br />リファクタリングしてまた見せますねー！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/12/16 0:28:54</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>課題とは別に質問です！<br />課題のプルリクとかぶってしまって申し訳ないですが、どちらもゆっくりで大丈夫です！<br />れおさんのアプリの Repotch のタイマーをスタートする時などのスライド動作について教えて頂きたいのですがあれはどのように実装しているのでしょうか？<br />ドラックでの viewの操作の方法で自分が知っているものは、  </p>
<ul>
<li><code>*func* touchesMoved(*_* touches: Set&amp;lt;UITouch&gt;, with event: UIEvent?)</code>  </li>
<li><code>UIPanGestureRecognizer</code><br />の2つだけなのですが、どちらを使ってもあんなに滑らかな挙動にすることができないのですが他の方法がわかりませんでした。</li>
</ul>
<p>view操作を滑らかにするコツなどございましたら教えて頂けますと助かります！<br />お手隙の際にお願い致します！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/12/17 6:19:50</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>アレはですねー <code>UIPanGestureRecognizer</code> の方を使って実装してます！<br />タップして動かしている間は、普通に <code>UIPanGestureRecognizer</code> で座標を変えているだけです！  </p>
<p>xib上で設定した <code>UIView</code> の 左側の <code>Constraint</code> をコード上で扱えるようにして（以下画像）<br /><code>UIPanGestureRecognizer</code> のイベント発生時にその <code>Constraint</code> を動かしています！  </p>
<pre><code>@objc func handlePanGesture(sender: UIPanGestureRecognizer) {  
    let position = sender.translation(in: self)  
    let velocity = sender.velocity(in: self)  
    switch sender.state {  
    case .began:  
        break  
    case .changed:  
        contentViewConstraintLeft.constant = position.x  
    // 以下略  
    }  
}  </code></pre></td>
          <td>
            <a href="undefined/F01GW8V6WKG-スクリーンショット 2020-12-17 5.28.15.png" target="_blank"><img src="undefined/F01GW8V6WKG-スクリーンショット 2020-12-17 5.28.15.png" width="150" alt="スクリーンショット 2020-12-17 5.28.15.png /></a>"
            </td>
        </tr>
<tr>
          <td>2020/12/17 6:28:36</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>むしろ頑張っているのは指を離したあとのアニメーションの方ですね。。  </p>
<p>実際に座標を変える時の関数が此方のコードです！  </p>
<pre><code>private func update(position: CGPoint, animated: Bool = false, duration: TimeInterval = 0.25) {  
    contentViewConstraintLeft.constant = position.x  

    if animated {  
        setNeedsLayout()  
        UIView.animate(withDuration: duration) { [weak self] in  
            self?.layoutIfNeeded()  
        }  
    }  
}  </code></pre><p>指を動かしているときは、<code>animated = false</code> で、<code>.changed</code> の時に呼び出しています。  </p>
<p>指を離した後（ <code>.ended</code> ）の時は、元いた場所に戻るか、最後までスライドさせるかの条件分岐をして上記の関数の <code>position</code> に渡し、 <code>animated = true</code> に指定しています。  </p>
<p>最後までスライドさせる時は <code>duration</code> が自然になるように速度とか考慮して計算しているので、その辺がかなり頑張っているかなーって感じですね。  </p>
<p><code>NSLayoutConstraint</code> をアニメーションさせる時は、 <code>constant</code> を変えた後に  </p>
<pre><code>setNeedsLayout()  
UIView.animate(withDuration: duration) { [weak self] in  
    self?.layoutIfNeeded()  
}  </code></pre><p>でアニメーションさせることができるので、ここはちょっとコツ（？）です！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/12/17 7:56:09</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>参考コードまでありがとうございます！<br /><code>UIPanGestureRecognizer</code> であんなにスルスル動くんですね、指を離した時の動作もスムーズだから余計に滑らかに見えたのかもです!  </p>
<p>あと参考コードで使用している<code>setNeedsLayout()</code> は呼び出すことでどんな役割があるのでしょうか？<br />調べた感じだと、  </p>
<ul>
<li>サブビューも含めて自身を起点とした配下のViewすべてを再描画する  </li>
<li><code>layoutIfNeeded</code> より処理が軽い  </li>
<li><code>layoutIfNeeded</code> と違い即座に反映されるわけではない？<br />こんな特徴があることがわかったのですが、この認識だと <code>LayoutIfNeeded</code> だけでよくないかな〜？と思いました。</li>
</ul>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/12/17 8:44:39</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>あーいらないですね、これｗ<br />自分は <code>setNeedsLayout()</code> をトリガーとして、先に UI更新するよっていうことを知らせておく必要があるのかなって思っていたんですが、<br /><code>layoutIfNeeded()</code> だけで十分だったみたいです！  </p>
<p>むしろ、他のSubview等の更新がある場合に、そこも同時にアニメーションしてしまわないように、以下のようにする必要がある場合もあるようです。  </p>
<pre><code>// 他の部分のUI更新がある場合にはアニメーションしてしまわないようにする  
layoutIfNeeded()  
// 処理を行う  
contentViewConstraintLeft.constant = position.x  
// アニメーションさせる  
UIView.animate(withDuration: duration) { [weak self] in  
    self?.layoutIfNeeded()  
}  </code></pre><p>ちなみに此方の質問回答を参考にして実装しています！<br /><a href="https://stackoverflow.com/questions/12622424/how-do-i-animate-constraint-changes" rel="noopener noreferrer">https://stackoverflow.com/questions/12622424/how-do-i-animate-constraint-changes</a></p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/12/17 10:15:20</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>なるほど！  </p>
<p>ちなみに<code>LayoutIfNeeded</code> 以外の説明読んでも必要性がわからなかったのですが、必要になった事ってありますか？  </p>
<pre><code>- setNeedsDisplay  
- setNeedsLayout  
- layoutSubviews  </code></pre><p>自分が読んだ参考サイトです！<br /><a href="https://qiita.com/h1d3mun3/items/467c9a16d30b5de73969" rel="noopener noreferrer">https://qiita.com/h1d3mun3/items/467c9a16d30b5de73969</a></p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/12/17 10:42:44</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>自分も基本的には <code>layoutIfNeeded</code> しか使わないですね。<br />今回の質問のおかげで <code>setNeedsLayout</code> も使わなくていいことが判明しましたし…ｗ  </p>
<p><code>layoutSubviews</code> に関しては、直接呼ぶのには使わないんですけど、 <code>override</code> して処理を書くことは結構ありますね。  </p>
<pre><code>override func layoutSubviews() {  
    super.layoutSubviews()  
    updateScale()  
}  </code></pre><p>みたいな感じで使うことは結構あります！  </p>
<p>それ以外のはほぼほぼ使わないかもですねー。</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/12/17 10:45:33</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>上記の記事のコメントを読んだ感じ  </p>
<blockquote>
<p>layoutIfNeededはその名の通り、レイアウトの必要がなければ何もしません。  </p>
</blockquote>
<blockquote>
<p>強制的に適用したい場合にはsetNeedsLayoutしてから、layoutIfNeededを呼ぶ必要があります。  </p>
</blockquote>
<blockquote>
<p>これが必要なのは、レイアウト結果に対してさらに何かをしたい場合のみです。  </p>
</blockquote>
<p>と書かれているので、<code>setNeedsLayout</code> が先にいる場合もある...のかな…？<br />自分のスライドアニメーションのやつではなくても正しく動作はしたんですけど、いる場合もあるかもですね...</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/12/17 23:45:34</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>とりあえずは <code>layoutIfNeeded</code> が使えれば困らなそうですね！<br />ありがとうございます！！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/12/27 16:47:02</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>課題とは別で質問です！<br />れおさんのAppAppの記事( <a href="https://uruly.xyz/refactor-appapp-9/|https://uruly.xyz/refactor-appapp-9/" rel="noopener noreferrer">https://uruly.xyz/refactor-appapp-9/|https://uruly.xyz/refactor-appapp-9/</a> )で<br />この記事 ( <a href="https://github.com/blkbrds/rxswift-tutorials/blob/02ccbf74c3f7181311542acba4b6fbc7ec004cbc/FS/FS/Classes/Service/DatabaseManager.swift|https://github.com/blkbrds/rxswift-tutorials/blob/02ccbf74c3f7181311542acba4b6fbc7ec004cbc/FS/FS/Classes/Service/DatabaseManager.swift" rel="noopener noreferrer">https://github.com/blkbrds/rxswift-tutorials/blob/02ccbf74c3f7181311542acba4b6fbc7ec004cbc/FS/FS/Classes/Service/DatabaseManager.swift|https://github.com/blkbrds/rxswift-tutorials/blob/02ccbf74c3f7181311542acba4b6fbc7ec004cbc/FS/FS/Classes/Service/DatabaseManager.swift</a> )を参考に DatabaseManager を作ったと書いてあったので見ていたのですが、  </p>
<pre><code>1 func write() -&gt; Observable&amp;lt;Void&gt; {  
2    return Observable.create({ (observer) -&gt; Disposable in  
3       do {  
4          try self.realm.write {  
5             observer.onCompleted()  
6          }  
7       } catch {  
8          observer.onError(error)  
9       }  
10      return Disposables.create()  
11   })  
12 }  </code></pre><p>この部分のコードが分かりませんでした。  </p>
<p>4行目と5行目の間に <code>realm.add(hoge)</code> みたいに何かを保存する処理があれば、保存処理完了後に <code>Observable</code> にイベントを流すのかなとも思ったのですが、それがないので他に意味があるのかな？と思いました！  </p>
<p>お手数ですが、対応頂けますと助かります！<br />よろしくお願い致します！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/12/29 0:02:04</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>ちょっと調査もしてみたんですけど、全然わかんないですねこれｗｗ  </p>
<p>自分がプロジェクトで Realm + RxSwift でやる時に参考した記事では以下のようにしてますねー。  </p>
<pre><code>    static func add&amp;lt;T&gt;(element: T, update: Bool = false) -&gt; Observable&amp;lt;()&gt; where T: Object {  
        return Observable.create { observer in  
            do {  
                let realm = try Realm()  
                try realm.write {  
                    // NOTE: 既に存在する場合、変更箇所のみupdate, 存在しない場合は登録する  
                    realm.add(element, update: .modified)  
                    observer.onNext(())  
                    observer.onCompleted()  
                }  
            } catch let error {  
                observer.onError(error)  
            }  
            return Disposables.create()  
        }  
    }  </code></pre><p><a href="https://qiita.com/Slowhand0309/items/846d01733e23f8e1fe1c" rel="noopener noreferrer">https://qiita.com/Slowhand0309/items/846d01733e23f8e1fe1c</a></p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/12/29 0:15:26</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>実際にそのプロジェクトで使われているところ見てみたんですけど、なるほどこうやって使うのかーって感じですが、こうする意味って何でしょうね。  </p>
<pre><code>func toggleFavorite() {  
    guard Venue.fetch(by: venue.id) != nil else {  
        venue.isFavorite = !venue.isFavorite  
        DatabaseManager.shared.addObject(venue)  
        return  
    }  
    DatabaseManager.shared.write().subscribe({ (event) in  
        switch event {  
        case .completed:  
            self.venue.isFavorite = !self.venue.isFavorite  
        default: break  
        }  
    }).dispose()  
}  </code></pre></td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/12/29 0:27:09</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>調査までお手数をお掛けしました！<br />最初に貼ってくださったコードの方が分かりやすいのでそちらを参考にさせて頂きます！<br />質問させて頂いたコードは無視しますw<br />ありがとうございます！！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/12/29 0:33:54</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>ざっとみた感じ、思いつくメリットは<br />Realm の <code>Object</code> を更新するときって、 <code>realm.write</code> の中以外の場所で更新しようとすると  </p>
<blockquote>
<p><em>‘RLMException’, reason: ‘Attempting to modify object outside of a write transaction - call beginWriteTransaction on an RLMRealm instance first.’</em>  </p>
</blockquote>
<p>という風に怒られてしまうんですよね。  </p>
<p>なので 例えば  </p>
<pre><code>final class Hoge: Object {  

    @objc dynamic var uid: String = ""  
    @objc dynamic var name: String = ""  
      
}  </code></pre><p>の <code>update</code> をする時に  </p>
<pre><code>func update(hoge: Hoge, name: String) throws {  
    let realm = try Realm()  
    try realm.write {  
        hoge.name = name  
    }  
}  </code></pre><p>という風な関数を アップデート項目ごとに作らなきゃいけなくなるのですが、この <code>DatabaseManager</code> を使うと、どの項目のアップデートでも、これひとつでできるようになりますね。  </p>
<pre><code>// これはクラッシュ  
hoge.name = "hoge"  

// 用意した update 関数を使う  
do {  
   try update(hoge: hoge, name: "hoge")  
} catch {  
   print(error)  
}  

// DatabaseManager を使う  
DatabaseManager.shared.write().subscribe { (event) in  
    switch event {  
    case .completed:  
        hoge.name = "hoge"  
    default: break  
}  </code></pre><p>これは地味に使えるかもしれないですね…！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/12/29 0:34:05</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>めっちゃｗｗ調査してましたｗｗ</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/12/29 0:49:46</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>すげーー！！<br />実際に使われているプロジェクトを見て調べるとかもやったことがなかったので、今度はやってみます！<br />githubのコードを理解できる気がしないですが、、、  </p>
<p>使い方の参考まで考えてくださり本当にありがとうございます！！！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/12/29 15:45:40</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>GitHub 上 or クローンして Xcode で開いて、メソッド名等で、検索をかけて調べてみるといいですよ！  </p>
<p>理解できなくても適当に投げてくれれば自分も考えれますので！！👍</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2020/12/29 16:23:21</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>なるほど、クローンすれば見やすいですね！<br />ありがとうございます！！<br />⛩️🙏</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/1/1 10:52:08</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>あけましておめでとうございます！<br />去年、唐突なメンター依頼を引き受けてくださってありがとうございます！<br />めちゃめちゃ助かってます！！  </p>
<p>物覚えが悪くてかなりの苦労をお掛けしてしまいますが、難易度MAXの育成ゲーム感覚で今後も助けて頂けますと嬉しいです！<br />自分も力をつけて、れおさんみたいに初心者でも分かりやすいと思えるような説明ができるようになることを目標にしているので、<br />直した方がいいことなど、気になったことはどんどん指摘してもらえればと思います！  </p>
<p>今年もよろしくお願いします🐓</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/1/1 11:38:04</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>あけましておめでとうございますー！🎍🐄  </p>
<p>此方こそ、去年はわざわざお声がけ頂きありがとうございました！<br />おかげさまで私も教えることの楽しさを感じたり、すごく勉強になっていたりしています！  </p>
<p>今年もジャンジャン質問していただけたらと思います！よろしくお願いしますー！🙇‍♀️  </p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/1/12 23:30:25</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>プログラミングと関係ない質問になってしまうのですが、れおさんが画像付きで教えてくださる時に添付した画像のように加工していると思うのですが、<br />なんのアプリを使っているか教えて頂けないでしょうか？</p>
</td>
          <td>
            <a href="undefined/F01JB5UGDQE-iOS の画像.png" target="_blank"><img src="undefined/F01JB5UGDQE-iOS の画像.png" width="150" alt="iOS の画像.png /></a>"
            </td>
        </tr>
<tr>
          <td>2021/1/12 23:47:20</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>これは Skitch ってアプリですね！<br /><a href="https://apps.apple.com/jp/app/skitch-%E6%92%AE%E3%82%8B-%E6%8F%8F%E3%81%8D%E8%BE%BC%E3%82%80-%E5%85%B1%E6%9C%89%E3%81%99%E3%82%8B/id490505997|https://apps.apple.com/jp/app/skitch-%E6%92%AE%E3%82%8B-%E6%8F%8F%E3%81%8D%E8%BE%BC%E3%82%80-%E5%85%B1%E6%9C%89%E3%81%99%E3%82%8B/id490505997" rel="noopener noreferrer">https://apps.apple.com/jp/app/skitch-%E6%92%AE%E3%82%8B-%E6%8F%8F%E3%81%8D%E8%BE%BC%E3%82%80-%E5%85%B1%E6%9C%89%E3%81%99%E3%82%8B/id490505997|https://apps.apple.com/jp/app/skitch-%E6%92%AE%E3%82%8B-%E6%8F%8F%E3%81%8D%E8%BE%BC%E3%82%80-%E5%85%B1%E6%9C%89%E3%81%99%E3%82%8B/id490505997</a></p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/1/12 23:47:45</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>ありがとうございます！！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/1/13 0:32:30</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>課題とは別の質問です！  </p>
<p>○ 基本的な動作  </p>
<ul>
<li>UITabBarController を使っていてそれぞれの画面の動作は添付した画像のような動作です！</li>
</ul>
<p>○ 前提となる情報<br />LIST画面<br />• ListViewController<br />• ListViewModel<br />• ListViewModelInput<br />• ListViewModelOutput<br />• ListViewModelType<br />課題でおこなっていた作りと同じです！  </p>
<p>○ 困っていること<br />1, ListViewController の ViewWillAppear で ListViewModelInput のトリガーに accept をする。<br />2, realm に保存したデータを取得する。<br />3, 取得したデータを ListViewModelOutput の Observable に bind する。<br />4, ListViewController で subscribe する。  </p>
<p>という流れの実装をしています。  </p>
<p>viewWillAppear で accept しているので画面が表示されるたびに1 ~ 4 の動作をする想定だったのですが、<br />ListViewController の表示2回目以降は accept しても ListViewModelInput のトリガーが動作しませんでした。<br />(1度目の表示時はうまく動きます)  </p>
<p>ListViewController の表示のたびに 1~4 の動作が行われるようにするにはどうすれば良いでしょうか？<br />せっかく画像編集のアプリを教えて頂いたのにうまく説明できず申し訳ないです🙇‍♂️<br />お手隙の際に教えていただけますと助かります！<br />よろしくお願い致します！</p>
</td>
          <td>
            <a href="undefined/F01JWQFV4KT-HOME.JPG" target="_blank"><img src="undefined/F01JWQFV4KT-HOME.JPG" width="150" alt="HOME.JPG /></a>",<a href="undefined/F01JJBZEBL3-LIST.JPG" target="_blank"><img src="undefined/F01JJBZEBL3-LIST.JPG" width="150" alt="LIST.JPG /></a>"
            </td>
        </tr>
<tr>
          <td>2021/1/13 5:02:01</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>課題の <code>ArtcilesViewController</code> におきかえると前提条件は以下のような感じですかね？  </p>
<p><code>UITabBarController</code> 上にある  </p>
<pre><code>let tabBar = UITabBarController()  
let articlesViewController = ArticlesViewController(nib: R.nib.articlesViewController)  
let articlesViewModel = ArticlesViewModel()  
articlesViewController.inject(.init(viewModel: articlesViewModel))  

let firstViewControler = FirstViewController()  
let firstViewModel = FirstViewModel()  
firstViewControler.inject(.init(viewModel: firstViewModel))  

let navigationController = UINavigationController(rootViewController: articlesViewController)  
tabBar.viewControllers = [navigationController, firstViewControler]  </code></pre><blockquote>
<p>1, ListViewController の ViewWillAppear で ListViewModelInput のトリガーに accept をする。  </p>
</blockquote>
<p>の部分は <code>ArticlesViewController</code> でいうとこんな感じ…？  </p>
<pre><code>override func viewWillAppear(_ animated: Bool) {  
    super.viewWillAppear(animated)  

    // ここで accept  
    viewModel.input.updateItemsTrigger.accept(())  
}  </code></pre><p>試しにこれで動かしてみたんですが <code>viewWillAppear</code> はちゃんと呼ばれて、トリガーも動作してますね。  </p>
<p>まず、<code>ListViewController</code> の <code>viewWillAppear</code> 自体が呼ばれているかどうかのチェックをお願いします！<br /><code>viewWillAppear</code> が呼ばれて、<code>accept</code> まで動いているのにも関わらず動作しない場合は、2番の Realm に保存したデータを取得するところが怪しいかなーって気がします！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/1/13 10:13:19</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>ありがとうございます！<br />帰ってからもう一度確認してみます！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/1/14 0:05:48</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p><code>viewWillAppear</code> が呼ばれて、<code>accept</code> までは動作していました！<br />で最初に質問させて頂いた時の手順は少し省いていたので、どの流れのどこまで処理が走っているかをコメントしました。<br />お手数ですが見ていただけますと幸いです！  </p>
<pre><code>/*  
 手順1  
 PlayListViewController の viewWillAppear で getPlaylistTrigger.accept をする  

 手順2  
 パターン1  
 ・getPlaylistTrigger を Action の input に bind する &amp;lt;- 2回目以降の accept 時は実行されない  
 パターン2  
 ・getPlaylistTrigger を sbscribe して Action の input に onNext する &amp;lt;- 2回目以降の accept 時も実行される  

 手順3  
 Action で Realm に保存されているデータを取得する処理をする  
 &amp;lt;- 2回目以降の accept 時、手順2のパターン1 は bind すら実行されないので手順3の処理も行われない  
 &amp;lt;- 手順2のパターン2 は onNext はされているが手順3の処理は行われない  
 */  

typealias PlaylistSectionModel = AnimatableSectionModel&amp;lt;String, Video&gt;  

protocol PlayListViewModelInput {  

    var getPlaylistTrigger: PublishRelay&amp;lt;Void&gt; { get }  
}  

protocol PlayListViewModelOutput {  

    var playlistDataSources: Observable&amp;lt;[PlaylistSectionModel]&gt; { get }  
}  

protocol PlayListViewModelType {  

    var input: PlayListViewModelInput { get }  
    var output: PlayListViewModelOutput { get }  
}  

class PlayListViewModel: PlayListViewModelType {  

    var input: PlayListViewModelInput { self }  
    var output: PlayListViewModelOutput { self }  

    let getPlaylistTrigger: PublishRelay&amp;lt;Void&gt; = .init()  
    let playlist: PublishRelay&amp;lt;[Video]&gt; = .init()  
    private let getPlaylistAction: Action&amp;lt;Void, [Video]&gt; = .init { (_) -&gt; Observable&amp;lt;[Video]&gt; in  
        // 手順3  
        let videoObjectObserver = RealmManager.shared.rx.getObjects(type: VideoObject.self) // 2回目以降は手順2のパターン1, パターン2 どちらでも通らない  
        return videoObjectObserver  
            .map { videoObject -&gt; [Video] in  
                return videoObject.map { object -&gt; Video in  
                    Video(videoUUID: object.videoUUID, videoName: object.videoName, videoCode: object.videoCode)  
                }  
            }  
    }  

    private let disposeBag = DisposeBag()  

    init() {  
        // 手順2のパターン1  
        getPlaylistTrigger  
            .bind(to: getPlaylistAction.inputs) // &amp;lt;- 2回目以降の accept 時は通らない  
            .disposed(by: disposeBag)  

        // 手順2のパターン2  
//        getPlaylistTrigger  
//            .subscribe(onNext: {  
//                self.getPlaylistAction.inputs.onNext(()) // &amp;lt;- 2回目以降の accept 時も通る  
//            }).disposed(by: disposeBag)  

        getPlaylistAction.elements  
            .bind(to: playlist)  
            .disposed(by: disposeBag)  
    }  
}  

extension PlayListViewModel: PlayListViewModelInput {}  

extension PlayListViewModel: PlayListViewModelOutput {  

    var playlistDataSources: Observable&amp;lt;[PlaylistSectionModel]&gt; {  
        return playlist.map { [PlaylistSectionModel(model: "", items: $0)] }  
    }  
}  </code></pre></td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/1/15 14:42:31</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>ちょっと試してみたんですが 手順2の部分はパターン1, 2 のどちらでもちゃんと通っているはず…  </p>
<p>問題は手順3の <code>Action</code> 内ですね。<br />ここで空の配列を渡すようにしてやってみると、一応此方では通っていることが確認できました！  </p>
<pre><code>private let getPlaylistAction: Action&amp;lt;Void, [Video]&gt; = .init { (_) -&gt; Observable&amp;lt;[Video]&gt; in  
    // 手順3  
    print("getPlaylistActionの実行")  
    return .just([])  
}  </code></pre><p>なので<br /><code>RealmManager.shared.rx.getObjects(type: VideoObject.self)</code> の部分が問題のはず…  </p>
<p>あと、ちょっと余計なお節介かもですが...<br /> <code>Realm</code> のオブジェクトは <code>VideoObject</code> -&gt; <code>Video</code> と変換して利用するよりも、<code>Video（Realmに保存してあるObject)</code> だけを用意してそのまま使ってしまう方が良いかと思います！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/1/15 14:56:18</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>最近自分も <code>RxSwift</code>  + <code>Realm</code> でやっているんですが、<br />今回のように「更新したいタイミングで  <code>getPlaylistTrigger</code> を発火させるような方法」と、<br />もうひとつ 「Realmオブジェクトの変更を直接監視する方法」があります！  </p>
<p>此方の記事を参考にして実装しました<br /><a href="https://qiita.com/sora0077@github/items/57da95debfcc10bc0f52" rel="noopener noreferrer">https://qiita.com/sora0077@github/items/57da95debfcc10bc0f52</a>  </p>
<pre><code>import RxSwift  
import RealmSwift  

extension Results {  

    public enum RealmChangeStatus {  
        case initial  
        case insert  
        case delete  
        case update  
    }  

    public func changeStatus() -&gt; Observable&amp;lt;Results&amp;lt;Element&gt;&gt; {  
        return Observable.create { observer in  
            // 単に変更したかどうかだけを返す  

            MainScheduler.ensureExecutingOnScheduler()  

            let token = observe { (changes: RealmCollectionChange) in  
                switch changes {  
                case .error(let error):  
                    observer.onError(error)  
                default:  
                    observer.onNext(self)  
                }  
            }  

            return Disposables.create {  
                token.invalidate()  
            }  
        }  
    }  
}  </code></pre><p>このような <code>Realm</code> の <code>Results</code> 型の extension を用意して、以下のように利用することができます！  </p>
<pre><code>let realm = try! Realm()  
realm.objects(VideoObject.self)  
    .changeStatus()  
    .map { Array($0) }  
    .bind(to: playlist)  
    .disposed(by: disposeBag)  </code></pre><p>此方だと、特にリロード処理を書かなくても Realmオブジェクトに変更があった場合に 更新処理が走ることになります。<br />こういう方法もあるよっていうだけで、これも良し悪しだと思いますので、使うかどうかはお任せします！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/1/15 14:57:08</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p><code>RealmManager.shared.rx.getObjects(type: VideoObject.self)</code> の中身を見せていただけたら<br />原因わかりそうな気がしますので、よければよろしくお願いしますー！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/1/15 15:25:42</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>おー、リロード処理なしで 更新してくれるのは便利ですね！<br />使ってみます！！  </p>
<blockquote>
<p><code>Realm</code> のオブジェクトは <code>VideoObject</code> -&gt; <code>Video</code> と変換して利用するよりも、<code>Video（Realmに保存してあるObject)</code> だけを用意してそのまま使ってしまう方が良いかと思います！  </p>
</blockquote>
<p>これについてもアドバイス頂きありがとうございます！<br />ちょっとまだ理解ができてないので後で考えて見ます！  </p>
<p>Realm 部分のコードは下記です！<br />お手隙の際にご確認いただけますと幸いです🙇‍♂️  </p>
<pre><code>final class RealmManager {  

    static let shared = RealmManager()  
    var realm: Realm {  
        do {  
            return try Realm()  
        } catch {  
            fatalError("Realmのインスタンスに失敗")  
        }  
    }  
}  

extension RealmManager: ReactiveCompatible {}  

extension Reactive where Base == RealmManager {  
    func saveObject&amp;lt;T: Object&gt;(obj: T) -&gt; Observable&amp;lt;Bool&gt; {  
        return Observable.create { (observer) -&gt; Disposable in  
            do {  
                try RealmManager.shared.realm.write {  
                    RealmManager.shared.realm.add(obj)  
                }  
                observer.onNext(true)  

            } catch {  
                observer.onNext(false)  
            }  
            return Disposables.create()  
        }  
    }  


    // 該当部分  
    func getObjects&amp;lt;T: Object&gt;(type: T.Type) -&gt; Observable&amp;lt;[T]&gt; {  
        return Observable.create { (observer) -&gt; Disposable in  
            let results = RealmManager.shared.realm.objects(type)  
            let objects: [T] = results.map { $0 }  
            observer.onNext(objects)  
            return Disposables.create()  
        }  
    }  
}  </code></pre></td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/1/15 17:32:43</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>はい！！！コード見てすぐ原因わかりました！！（嬉しい）（自分も結構最近ハマったので）  </p>
<p><code>Observable</code> を返すときには、 <code>onCompleted()</code> が必要になります！<br />なので修正箇所は以下ですね！  </p>
<pre><code>    // 該当部分  
    func getObjects&amp;lt;T: Object&gt;(type: T.Type) -&gt; Observable&amp;lt;[T]&gt; {  
        return Observable.create { (observer) -&gt; Disposable in  
            let results = RealmManager.shared.realm.objects(type)  
            let objects: [T] = results.map { $0 }  
            observer.onNext(objects)  
            // ここに onCompleted() が必要！！！  
            observer.onCompleted()  
            return Disposables.create()  
        }  
    }  </code></pre></td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/1/15 17:50:00</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>仕組みはちょっと自信ないんですけども<br />例えば、 <code>onCompleted()</code> を書かなかった場合には、ずっと解放されない（ <code>dispose</code> されない）状態になるんですね。  </p>
<pre><code>// onCompleted を呼んでいない場合  
func getObjects&amp;lt;T: Object&gt;(type: T.Type) -&gt; Observable&amp;lt;[T]&gt; {  
    return Observable.create { (observer) -&gt; Disposable in  
        let results = RealmManager.shared.realm.objects(type)  
        let objects: [T] = results.map { $0 }  
        observer.onNext(objects)  

        return Disposables.create {  
            print("disposeされました。")  
        }  
    }  
}  </code></pre><p>これだと、1度は <code>onNext</code> が発火しますが、その後はこの中にも通らない状態になってしまいます。  </p>
<p>この挙動は、 <code>Action</code> 側の仕様っぽいですね。<br /><code>onCompleted()</code> を呼ばない状態で、 <code>getPlaylistAction.errors</code> の方を購読してみると、2回目以降は此方に流れてきていました！  </p>
<pre><code>getPlaylistAction.elements  
    .subscribe(onNext: { elements in  
        // 1回目はちゃんと通る  
        print("成功", elements)  
    })  
    .disposed(by: disposeBag)  

getPlaylistAction.errors  
    .subscribe(onNext: { error in  
        // 2回目以降はこっちにきてしまう  
        print("エラー", error)  
    })  
    .disposed(by: disposeBag)  </code></pre><p>エラー内容は <code>notEnabled</code> というエラーで  </p>
<blockquote>
<p><em>The operation couldn’t be completed. (Action.ActionError error 1.)</em><br />と書かれていました。<code>onCompleted</code> を呼んでいないので operation が完了してないよってことですね。  </p>
</blockquote>
<p>なので、正しくは  </p>
<pre><code>func getObjects&amp;lt;T: Object&gt;(type: T.Type) -&gt; Observable&amp;lt;[T]&gt; {  
    return Observable.create { (observer) -&gt; Disposable in  
        let results = RealmManager.shared.realm.objects(type)  
        let objects: [T] = results.map { $0 }  
        observer.onNext(objects)  
        // onCompleted() を書く  
        observer.onCompleted()  
        return Disposables.create {  
            print("disposeされました。")  
        }  
    }  
}  </code></pre><p><code>onCompleted()</code> を書いて、一度 elements まで流れたら すぐに <code>dispose</code> される必要がある、ということですね。</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/1/15 20:49:10</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>できましたーー！！！<br />ありがとうございます！  </p>
<p><code>Observable.create</code> をするときは必ず <code>onError</code> か <code>onCompleted</code> を呼ばないといけないんですね！<br /><code>dispose</code> の働きについて全くよくわかってないので、もうちょっと考えてからこれについても質問させてください🙇‍♂️🙇</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/1/15 20:51:43</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>了解です！良かったです！！！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/1/17 11:28:46</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>先日アドバイス頂いた下記の部分についての質問なのですが、<br /><code>VideoObject</code> はレルムのオブジェクトとして使うため <code>Object</code> を継承させています。<br /><code>Video</code> は <code>collectionView.rx.items(dataSource: dataSources)</code> に <code>bind</code> するためのクラスなので <code>Equatable</code> を継承しないといけないのですが、 レルム のための <code>Object</code> と <code>Equatable</code> を両方継承することができないため分けているのですが一緒に継承する方法はありますか？  </p>
<blockquote>
<p>Realm のオブジェクトは <code>VideoObject -&gt; Video</code> と変換して利用するよりも、<code>Video（Realmに保存してあるObject)</code>  だけを用意してそのまま使ってしまう方が良いかと思います！  </p>
</blockquote>
<p><a href="https://ningen-damono.slack.com/archives/C017TTWH63F/p1610689351007300" rel="noopener noreferrer">https://ningen-damono.slack.com/archives/C017TTWH63F/p1610689351007300</a></p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/1/17 12:05:01</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>Realm の <code>Object</code> は <code>Equatable</code> には適合しているはずです！<br />多分 <code>AnimatableSectionModel</code> を使うために <code>IdentifiableType</code> に適合する必要があるということ…かなと思います。  </p>
<p>ちょっと中身はわからないんですが、 以下のように <code>IdentifiableType</code> に適合させることで <code>collectionView.rx.items(dataSource: dataSources)</code> に bind できるはずです！  </p>
<pre><code>import UIKit  
import RxCocoa  
import RxDataSources  
import RxSwift  
import RealmSwift  

final class Video: Object {  

    @objc dynamic var uid: String = ""  

    override static func primaryKey() -&gt; String? {  
        return "uid"  
    }  
}  

// MARK: - IdentifiableType  

extension Video: IdentifiableType {  

    var identity: String {  
        return isInvalidated ? "deleted-object-\(UUID().uuidString)" : uid  
    }  
}  </code></pre><p>単純に <code>return uid</code> としてしまうと、 削除された後に削除されたオブジェクトの uid を参照してクラッシュしてしまうので、<code>isInvalidated</code> で削除されている場合には、一意の適当な文字列を返すようにしています！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/1/17 15:05:42</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>おーできました！<br />Realm って変数に <code>@objc dynamic</code> とか付けなきゃなので他の目的と一緒に使えると思ってなかったです！  </p>
<blockquote>
<p>単純に <code>return uid</code> としてしまうと、 削除された後に削除されたオブジェクトの uid を参照してクラッシュしてしまうので、<code>isInvalidated</code> で削除されている場合には、一意の適当な文字列を返すようにしています！  </p>
</blockquote>
<p>これも助かりました！ひゃくぱー詰まってたと思うのでww</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/1/17 23:37:18</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>意外と使えるのですよ！自分も以前までは知らなくて分けて使ってましたｗｗ<br />またハマったり、質問あればいつでも聞いてくださいー！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/2/13 14:25:27</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>メンターを引き受けて頂いてから半年経ったので少しですが月額料金を上げさせて頂きたいと思います！<br />大した増額ができずに申し訳ないですが、こちらの内容で引き続きお世話になれればと思いますのでご確認お願い致します！  </p>
<pre><code>1, 更新日 2021/02/01  
2, 終了日 未定  
- 備考  
- reoさんがやめたくなったらその時に終了するのもOK  
- 上記の「やめたくなったら終了」が全てなので終了日の設定はとりあえず無くしました。  

3, 料金 月 15000円  
- 支払い方法 kyashアプリでの支払い  
- 月の中旬頃に支払いをする  

4, 課題コードレビュー  
- 支払い方法 kyashアプリでの支払い  
- コードレビューにかかる見込み時間 × 2000円  
- 課題を頂く都度、金額を設定してもらう  
- コードレビューをお願いする時に支払いをする  

5,対応して頂きたいこと  
- 勉強で詰まったことなどのアドバイス  
- 課題コードレビュー  

変更点  
- 1の更新日を2月にしました  
- 3の月額を変更いたしました。  </code></pre></td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/2/14 18:10:27</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>ええ！ 全然気にしなくてよかったんですが 😭 でも 有り難く引き受けさせて頂きますね！  </p>
<p>私は毎月金額と見合ってるくらい力になれてるのかなーと思っているぐらいなので、<br />私の都合とか気にせず、どしどし質問して頂ければと思います！！答えられる時に答えますので！！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/2/14 18:10:42</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>これからもよろしくお願いします 🙇‍♀️</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/2/14 19:56:25</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>よかったです！！<br />めちゃめちゃいつも助けられてます！本当に！<br />こちらこそ、これからもよろしくお願いします🙇‍♂️</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/3/1 0:58:36</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>RxSwiftから離れた部分の質問なのですが、tableViewのcellの高さの設定を可変にするため <code>UITableView.automaticDimension</code> で設定していると、<br /><code>tableView.reloadData()</code> でセルを追加する時に <code>contentOffset.y</code> がずれてしまうのですが、これの解決方法が何かございましたら教えて頂きたいです！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/3/1 12:25:35</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>現象は理解しました！<br />これ結構ズレてるんですね…<br />そこそこ大変そうなので時間ある時にちょこちょこ調べてみますね！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/3/1 13:31:57</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>ありがとうございます！<br />自分も昨日軽い気持ちで調べ始めたら全然解決しなくてw<br />なんかこういう質問されたなぁぐらいで、分かった時に教えて頂けると助かります！！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/3/1 14:17:18</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>ｗｗｗ了解です！<br />自分も結構気になるので調べてわかったことあったら都度共有しますね！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/3/30 11:06:05</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>課題とは別の RxSwift についての質問です！  </p>
<p><code>質問したい内容</code><br />一つの変更を全ての画面で監視したい  </p>
<p><code>動作のイメージ</code><br />Youtube のような画面設計があったとして、<br />TabBarController<br />• HomeViewController<br />• FollowViewController<br />• NoticeViewController<br />• LibraryViewController<br />HomeViewController から ChannelViewController を開いておく。<br />どこかしらの画面で アプリのベースとなるカラーを変更する。<br />カラーの変更が行われたことを全ての画面で監視して、変更された色を反映させる。  </p>
<p><code>考えたこと</code><br />BroadCastViewModel のように全画面で監視するための ViewModel を作成する？<br />これだと全画面で ViewModel のインスタンスを2つ持つことになるので、BroadCastViewModel をシングルトンとして作成する？  </p>
<p>お手隙の際に教えていただけますと幸いです！<br />よろしくお願い致します！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/3/30 12:05:55</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>おはようございます〜☀️<br />そうですねーーー結構色々方法あって難しい話ですねｗ  </p>
<ol>
<li><em>シングルトンで作る</em>  <blockquote>
<p>BroadCastViewModel のように全画面で監視するための ViewModel を作成する？</p>
</blockquote>
</li>
</ol>
<blockquote>
<p>これだと全画面で ViewModel のインスタンスを2つ持つことになるので、BroadCastViewModel をシングルトンとして作成する？  </p>
</blockquote>
<p><code>ViewModel</code> として作るというよりかは、Manager 的に作ってしまって良いかな…？って気もします。  </p>
<pre><code>// グローバルに用意する  
class ColorManager {  
    static let mainColor = PublishSubject&amp;lt;UIColor&gt;()  
}  </code></pre><p>ボタンタップで <code>ColorManager</code> の中の <code>UIColor</code> を変えてしまって  </p>
<pre><code>// ボタンタップでグローバルの色を変更する  
let changeColorButtonTrigger: PublishRelay&amp;lt;Void&gt; = .init()  

changeColorButtonTrigger  
    .map { UIColor.getRandomColor() }  
    .bind(to: ColorManager.mainColor)  
    .disposed(by: disposeBag)  </code></pre><p>実際に使いたいところでは、<code>ColorManager</code>の変更を監視しておく  </p>
<pre><code>// グローバルなColorManagerの色が変更されたら、背景色を変える  
ColorManager.mainColor  
    .bind(to: backgroundColorRelay)  
    .disposed(by: disposeBag)  </code></pre><p>こんな感じにすれば、どこからでも使うことができます。  </p>
<p>逆に、どこからでも変更可能になってしまうのと、シングルトンはテストがしづらいという問題点があるので、好まない人もいるかもしれない？ですね。</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/3/30 12:06:34</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>👆はちょっと古いですが此方の記事 <a href="https://qiita.com/yuzushioh/items/a80c250c72291435d04a" rel="noopener noreferrer">https://qiita.com/yuzushioh/items/a80c250c72291435d04a</a> 参考にしました。</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/3/30 12:14:02</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><ol>
<li><em>UserDefaults を使う</em><br />色の話だったら、一度設定したら変更を保存しておきたいかなーと思うので、<code>UserDefaults</code> に保存しておくのもアリかなって思います。</li>
</ol>
<p><code>UserDefaults</code> の値の変更通知は <code>NotificationCenter</code> でとれるので、それを利用してやるのが良いかなーと思います！<br />以下の記事を参考にしてみてください！<br /><a href="https://qiita.com/GeneralD/items/9f218dabed6c6cc527cf" rel="noopener noreferrer">https://qiita.com/GeneralD/items/9f218dabed6c6cc527cf</a></p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/3/30 12:58:42</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>☀️☀️<br />なるほど〜！ありがとうございます！<br /><code>Reactive</code> を extension する系のコードへの苦手意識がやばいですww<br />色々書いてみて慣れるしかないですね！  </p>
<p>れおさんなら値を保存する必要がない場合はシングルトンのやり方で保存する必要がある場合は <code>UserDefaults</code> を使うかな？という感じですか？</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/3/30 13:06:04</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>私も最近ようやくその辺わかるようになってきたんで、難しいですよね。。<br />私なら、保存する必要ないならシングルトンでやっちゃうかもしんないですね。<br />それか 大元の <code>UITabBarController</code> を通して全部の画面に外から渡すやり方をするかも... 😭  </p>
<p>保存するなら、保存する項目によって <code>UserDefaults</code> or <code>Realm</code> に保存をするかな？って思います！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/3/30 13:33:26</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>分かりました！<br />参考にさせて頂きます！！  </p>
<p>課題の方はサンプルコード頂いたところで止まっているので、時間のある時に修正してプッシュします！<br />お待たせして申し訳ないです🙇‍♂️</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/3/30 15:43:46</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>いえいえ！小林さんのペースで大丈夫ですよ〜<br />あと、次の課題が特に思い付いていないので、もしやりたいことあったら教えてください！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/3/30 20:17:21</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>ありがとうございます！<br />課題についてちょっといくつか考えて見ます！！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/3/30 22:23:00</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>お願いします！！🙏</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/6/6 22:23:44</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>課題とは別の質問です！  </p>
<p>前提情報：  </p>
<pre><code>1, realm に保存しているデータをもとに UITableViewを表示します。  
2, tableViewCell のなかに削除ボタンを配置します。  
3, ボタンをタップすると、「本当に削除しますか？」のような確認ダイアログを表示します。(UIAlertController)  
4, ダイアログの OKボタンをおしたら、realm からデータの削除をします。  </code></pre><p>ダイアログの表示は <code>Router</code> で行おうと思っています。<br />なので、削除ボタンが押されたら <code>viewModel</code> の <code>input</code> に <code>bind</code> して、<code>viewModel</code> から<br /><code>router</code> の ダイアログを表示する関数を呼び出して、ダイアログの OKボタンを押されたら、<code>viewModel</code> を通して <code>realm</code> からデータを削除する。<br />削除が完了したら <code>viewController</code> で監視している <code>Observable</code> に処理を流して <code>tableView</code> を更新する。<br />という処理をしたいのですが、<br /><code>UIAlertAction</code> の OKボタンをタップした時に <code>viewModel</code> に <code>bind</code> するにはどうするべきでしょうか？  </p>
<p>お手隙の際に教えて頂けますと幸いです！<br />よろしくお願い致します！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/6/10 11:17:07</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>遅くなってしまってごめんなさい！  </p>
<p>ちょっと Rx っぽくはないんですが考え方としては Router 側で <code>completion</code> を用意してやるので良いかな？って思います！  </p>
<pre><code>final class ArticleRouter: ArticleRoutable {  

    private(set) weak var viewController: ArticleViewProtocol!  

    init(viewController: ArticleViewProtocol) {  
        self.viewController = viewController  
    }  

    func showAlert(completion: (() -&gt; Void)?) {  
        let alertController = UIAlertController(title: "削除します", message: "", preferredStyle: .alert)  
        let okAction = UIAlertAction(title: "OK", style: .default) { _ in  
            completion?()  
        }  
        alertController.addAction(okAction)  
        viewController.present(alertController, animated: true, completion: nil)  
    }  
}  </code></pre><p>ViewModel で使う時は  </p>
<pre><code>showAlertTrigger  
    .subscribe(onNext: {  
        router.showAlert {  
            print("ここで reload 処理をする")  
        }  
    })  
    .disposed(by: disposeBag)  </code></pre><p>でもこの辺ももっと Rx にハマる感じで作ることもできると思うのですが、今はこんな感じでやってますね。。</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/6/10 20:11:22</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>いえ！全然大丈夫です！<br />Rxの勉強してからコールバックを忘れてましたw<br />ありがとうございます！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/6/19 14:31:27</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>質問です！<br />添付した画像のように <code>PlayListViewController</code> にすべで表示されている動画は <code>SelectVideoViewController</code> に遷移した段階でチャックをつける。という動作をしたいです。(遷移時に <code>PlayListViewController</code> の動画情報を渡す)<br /><code>SelectVideoViewController</code> をを表示する際に <code>Realm</code> に保存されているすべての動画を取得して、<code>PlayListViewController</code> から受け取った動画の情報と比較して、一致する動画を表示するセルにチェックマークを付けるのが目的なのですが、遷移時に受け取る動画情報を <code>ViewController</code> で受け取る方法しか思いつかないのですが、<code>ViewModel</code> で受け取って Rxっぽいやり方はありますでしょうか？  </p>
<p>ちなみに <code>ViewController</code> で受け取る方法で考えていたのは、<br />1, <code>[Video]</code> の変数を用意して遷移時にその変数で動画の情報を受け取る。<br />2, cell を作成するときに 1 の配列の 動画とセル作成の元になっている動画を比較して一致するものがあればチャックマークを付ける。<br />3, cell をタップした時の動作：<br />• チャックが付いている場合<br />　　1の配列から削除してテーブルをリロード  </p>
<p>• チェックが付いてない場合<br />　　1の配列に加えてテーブルリロード  </p>
<p>みたいな感じで考えていました。  </p>
<p>お手すきの際にご対応頂けますと幸いです！<br />よろしくお願いいたします！</p>
</td>
          <td>
            <a href="undefined/F0254QHDYRM-スクリーンショット 2021-06-19 14.03.55.png" target="_blank"><img src="undefined/F0254QHDYRM-スクリーンショット 2021-06-19 14.03.55.png" width="150" alt="スクリーンショット 2021-06-19 14.03.55.png /></a>"
            </td>
        </tr>
<tr>
          <td>2021/6/20 0:14:58</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>連続した質問で申し訳ないです！  </p>
<pre><code>struct PlayStatusSubject {  

    static let endVideoPlayNextVideo: PublishRelay&amp;lt;Void&gt; = .init()  
}  </code></pre><p>上記のように <code>static</code> な <code>PublishRelay</code> を作成して <code>subscribe</code> しているのですが、これを <code>subscribe</code> している画面を閉じても <code>dispose</code> されていないみたいで<br />画面を開くたびに <code>subscribe</code> 数が増えてしまっています。<br />画面を2回開くと <code>endVideoPlayNextVideo</code> に対する1回の <code>accept</code> で <code>subscribe</code> 内の処理が2回呼ばれてしまう感じです！  </p>
<p><code>static</code> なオブサーバーの <code>dispose</code> のやり方は他とは異なるのでしょうか？<br />こちらもお手すきの際に教えて頂けますと幸いです🙇‍♂️</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/6/26 0:19:27</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>このまえ質問させていただいた↑↑の質問ですが、<code>subscribe</code> のなかの処理で <code>self</code> を強参照していたことが原因でした！<br />れおさんが普通なら <code>dispose</code> されることを確かめてくれたおかげで気づけました！ありがとうございます⛩️🙏<br /><a href="https://ningen-damono.slack.com/archives/C017TTWH63F/p1624115698007200" rel="noopener noreferrer">https://ningen-damono.slack.com/archives/C017TTWH63F/p1624115698007200</a></p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/6/26 15:31:26</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>おお なるほど！！よかったです😊<br />此方こそ原因の共有ありがとうございます！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/6/29 10:19:27</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>質問です！<br /><code>RxDataSources</code> を使用した <code>TableView</code> についてです！  </p>
<p><code>HistoryCell.swift</code>  </p>
<pre><code>final class HistoryCell: UITableViewCell {  

    @IBOutlet private weak var productNameLabel: UILabel!  
    @IBOutlet weak var menuButton: UIButton!  

    var disposeBag = DisposeBag()  

    override func prepareForReuse() {  
        super.prepareForReuse()  
        disposeBag = DisposeBag()  
    }  

    func configure(product: Product) {  
        productNameLabel.text = product.name  
    }  
}  </code></pre><p>このようにセルのカスタムクラスを作って、そのクラスに <code>menuButton</code> としてボタンを持たせて、<br /><code>menuButton</code> をタップした時に <code>ViewModel</code> に <code>indexPath</code> を流す処理をします。  </p>
<p><code>HistoryViewController.swift</code>  </p>
<pre><code>final class HistoryViewController: UIViewController {  

// 省略 //  

    private lazy var configureCell: RxTableViewSectionedAnimatedDataSource&amp;lt;ProductsSectionModel&gt;.ConfigureCell = { _, tableView, indexPath, item in  
        let cell = tableView.dequeueReusableCell(withIdentifier: R.reuseIdentifier.historyCell, for: indexPath)!  
        cell.configure(product: item)  
        cell.menuButton.rx.tap  
            .map { indexPath }  
            .bind(to: self.viewModel.input.showMenuTrigger)  
            .disposed(by: cell.disposeBag)  
        return cell  
    }  


// 省略 //  

}  </code></pre><p>このコードだとセルを削除したあと <code>menuButton</code> と紐づいた <code>indexPath</code> はセルが生成された時のもののままなので、セルを削除したときに、<br />セルの <code>indexPath.row</code> が1から0になってもボタンと紐づく <code>indexPath.row</code> は1のままになってしまいます。  </p>
<p>そのため自分がいましている対応は  </p>
<pre><code>cell.menuButton.rx.tap  
            .map { _ -&gt; IndexPath? in  
                // ここで indexPath を取り直さないと、cell が生成された時の indexPath をもっていることになるのでセルが削除された時に実際の indexPath とずれる  
                // cell が3つあったとして indexPath が0のものを削除した後 1だったものはそのまま1を持ち続けるため、indexPath 1 をもったボタンは indexPath 0 の cell に表示されている状態になってしまう  
                let point = tableView.convert(cell.menuButton.center, from: cell)  
                return tableView.indexPathForRow(at: point)  
            }  
            .filter { $0 != nil }  
            .map { $0! }  
            .bind(to: self.viewModel.input.showMenuTrigger)  
            .disposed(by: cell.disposeBag)  </code></pre><p>こんな感じで <code>menuButton</code> をタップした時に <code>indexPath</code> を取得しなおしています。  </p>
<p>教えて頂きたいこととしては、  </p>
<pre><code>- このやり方以外のちゃんとした方法はあるか (セルをタップした時にそのセルに紐づいたオブジェクトがとれるのと同じような)  
- 今回のこのケース以外でも、セルに表示しているボタンとセルをちゃんと紐づける方法はあるか  </code></pre><p>上記2点？ほぼ同じかもなので1点について教えて頂けますと幸いです！！  </p>
<p>よろしくお願い致します！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/7/1 14:52:14</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>お待たせしました！回答です！<br />一番簡単な解決方法は、<code>IndexPath</code> を用いない！だと思います。  </p>
<pre><code>    private lazy var configureCell: RxTableViewSectionedAnimatedDataSource&amp;lt;ProductsSectionModel&gt;.ConfigureCell = { _, tableView, indexPath, item in  
        let cell = tableView.dequeueReusableCell(withIdentifier: R.reuseIdentifier.historyCell, for: indexPath)!  
        cell.configure(product: item)  
        cell.menuButton.rx.tap  
             // ここで indexPath ではなく、 item をわたす  
            .map { item }  
            .bind(to: self.viewModel.input.showMenuTrigger)  
            .disposed(by: cell.disposeBag)  
        return cell  
    }  </code></pre><p>この <code>ConfigureCell</code> はいわゆる <code>tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath)</code> に当たる部分になります。<br />小林さんのいう通り、セル上のメニューボタンを押した時と実際の indexPath が等しいとは限りません。セルの削除後に <code>reloadData</code> 等をして再設定されない限りは前回の indexPath を持ってしまいます。  </p>
<blockquote>
<p>このやり方以外のちゃんとした方法はあるか (セルをタップした時にそのセルに紐づいたオブジェクトがとれるのと同じような)  </p>
</blockquote>
<p>なので、 <code>item</code> を渡すことで、セルに紐づいたオブジェクトを取ることができると思います！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/7/2 0:21:43</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>おー！<br />感覚的に <code>indexPath</code> がずれるなら <code>item</code> も <code>indexPath</code> 同様にずれていると思ってしまってたんですが、<br />たしかによく考えればなるほどです！<br />ありがとうございます！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/7/2 1:05:28</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>連続した質問で申し訳ないです！<br /><code>[weak self]</code> について質問したいです！  </p>
<p>このまえ <code>subscribe</code> 内で <code>self</code> をつかう時に <code>[weak self]</code> をつけていなかったため、<code>dispose</code> されずに複数回 <code>subscribe</code> されてしまったことがあったので、<br />少し動作を確認していて思ったのですが、 通常のクロージャーはクロージャー内の処理が終わったらクロージャーが破棄される？ような感じだとおもうので、<br /><code>popViewController</code> -&gt; <code>closure</code> の処理終了 -&gt; コントローラーの参照が破棄される。<br />みたいになり、必ず <code>[weak self]</code> が必要なわけではないとなんとなく分かるのですが、RxSwift の <code>subscribe</code> に関しては <code>disposed(by: disposeBag)</code> で <code>unSubscribe</code> する場合、コントローラーのインスタンスが削除されたら <code>DisposeBag</code> の中身が削除される順番になるという認識で正しければ <code>subscribe</code> 内で <code>self</code> を使う場合必ず、<code>[weak self]</code> を使わないと <code>unSubscribe</code> はできないと思ってしまっています。(おそらく <code>map</code> などのオペレータ内でも <code>[weak self]</code> が必ず必要)  </p>
<p><code>popViewController</code> をしても <code>subscribe</code> のクロージャー内でコントローラーのインスタンスを持ってしまっているためコントローラーの参照がきれない。なので<br />unSubscribe もされない。感じかな？  </p>
<p>なので RxSwift では <code>subscribe</code> や <code>map</code> などのオペレータ内で <code>self</code> を使う時は必ず <code>[weak self]</code> が必要という認識なのですが、あっていますでしょうか？<br />毎回ややこしい質問ですみません🙇‍♂️</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/7/2 16:09:59</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>認識正しいと思います!  </p>
<p>ざっくりとですが検証してNotionにまとめてみました！<br />&lt;<a href="https://www.notion.so/RxSwift-weak-self-d87ceb5e02054d5f8886a3ee30903a05|RxSwift" rel="noopener noreferrer">https://www.notion.so/RxSwift-weak-self-d87ceb5e02054d5f8886a3ee30903a05|RxSwift</a> での weak self について&gt;</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/7/2 16:12:00</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>あと検証中に気づいたんですが、前回の質問の <code>configureCell</code> の <code>.bind(to: self.viewModel.input.showMenuTrigger)</code> の部分で強参照にしてしまうと <code>deinit</code> が呼ばれなくなってしまいますね...  </p>
<pre><code>    private lazy var configureCell: RxTableViewSectionedAnimatedDataSource&amp;lt;ProductsSectionModel&gt;.ConfigureCell = { _, tableView, indexPath, item in  
        let cell = tableView.dequeueReusableCell(withIdentifier: R.reuseIdentifier.historyCell, for: indexPath)!  
        cell.configure(product: item)  
        cell.menuButton.rx.tap  
             // ここで indexPath ではなく、 item をわたす  
            .map { item }  
             // ここの self で強参照してしまうと deinit が呼ばれない！！  
            .bind(to: self.viewModel.input.showMenuTrigger)  
            .disposed(by: cell.disposeBag)  
        return cell  
    }  </code></pre></td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/7/2 22:15:05</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>未だに <code>[weak self]</code> に関してよく分かってなかったので少し前進した気がします！<br />まとめの作成までありがとうございます！！<br />検証の仕方も勉強になります🤓</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/7/6 22:27:58</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>2つ質問させてください！  </p>
<p>リリースしたアプリで AdmobとGoogleAnalyticsの実装を組み込んでいます。<br />そこでなのですが、<br />1, リリースしたアプリに広告が表示されるようになるのは大体どのくらいかかるものなのでしょうか？  </p>
<p>2, Analyticsは導入していれば実装でなにもしていなくても、Dashboardなどに何かしらの動きがあるのかと思ったのですがこちらも反映には時間がかかるものなのでしょうか？  </p>
<p>ここら辺はじめて実装したのでミスなのか、反映が遅いのかが分からなかったので教えて頂けますと助かります！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/7/7 20:14:16</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>1について<br />Admobで AppStore とのリンクを行うことで広告が出るようになります！<br />そこの AppStore とのリンクするところに表示されるのに一週間以上かかる場合があります。<br />私は1ヶ月以上待ってもアプリ連携に自分のアプリが出てこないことがありました…。そういう場合は待っててもでない可能性が高いので、Googleのフォーラムにて質問することでAdmobチームが対応してくれます！！<br />もし全然連携に出てこない場合はまた聞いてください！お問い合わせ方法を伝授します！！  </p>
<p>2 について<br />Analyticsのリアルタイムで見ているやつとかは、実装中でも見れるハズなので、反映はそこまで遅くないはず？と思います。<br />友人に聞いたところ、反映に時間かかることもあるよーと言われたのですが、個人的にはそんなかからないハズと思っています。<br />まだ反映されてないということなら、なんか実装がおかしいのかも？？って気もするので確認してみるといいかもしれないです！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/7/7 20:40:17</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>1について<br />なるほどー、2週間ぐらい待ってみます！<br />ダメだった時にまた相談させてください！  </p>
<p>2について<br />やっぱり普通はそんなに反映に時間がかかるものではないんですね。<br />見直してみます！  </p>
<p>回答ありがとうございます！！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/8/14 15:45:21</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>れおさんはM1 Mac 使ってたりしますか？？</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/8/14 16:54:15</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>いや！使ってないですね😭 Intel です！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/8/14 18:39:52</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>了解です！ありがとうございますー😊</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/10/1 10:23:00</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>今月からまた再開できそうでしょうか？？<br />余裕ができてからで大丈夫ですので考えていただければうれしいです😊</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/10/1 10:26:05</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>あ！そうでした！10月ですね！！<br />レスポンス早くはちょっと難しいかもしれませんが、それで宜しければ再開しましょう！🙇‍♀️</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/10/1 10:28:05</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>ありがとうございます！<br />今月からまたよろしくお願いします！！！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/10/1 10:28:33</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>了解ですー！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/10/9 23:38:39</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>Firebaseの導入について質問です！<br />正しく Firebase の導入ができていれば添付した画像のところは反映されるものでしょうか？</p>
</td>
          <td>
            <a href="undefined/F02H8H5J22F-スクリーンショット 2021-10-09 23.37.11.png" target="_blank"><img src="undefined/F02H8H5J22F-スクリーンショット 2021-10-09 23.37.11.png" width="150" alt="スクリーンショット 2021-10-09 23.37.11.png /></a>"
            </td>
        </tr>
<tr>
          <td>2021/10/9 23:54:45</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>そこの Dashboard はもしかするとちょっと反映が遅いかも？ですが<br />リアルタイムの方には、導入後すぐにでてくるはずです！</p>
</td>
          <td>
            <a href="undefined/F02H5HGSX45-スクリーンショット 2021-10-09 23.54.10.png" target="_blank"><img src="undefined/F02H5HGSX45-スクリーンショット 2021-10-09 23.54.10.png" width="150" alt="スクリーンショット 2021-10-09 23.54.10.png /></a>"
            </td>
        </tr>
<tr>
          <td>2021/10/10 0:29:33</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>リアルタイムのとこの1分あたりのユーザー数のところが自分が起動していれば1になったりする感じでしょうか？？</p>
</td>
          <td>
            <a href="undefined/F02GTTC0QCX-スクリーンショット 2021-10-10 0.28.18.png" target="_blank"><img src="undefined/F02GTTC0QCX-スクリーンショット 2021-10-10 0.28.18.png" width="150" alt="スクリーンショット 2021-10-10 0.28.18.png /></a>"
            </td>
        </tr>
<tr>
          <td>2021/10/10 1:34:55</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>そうですね！1になります！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/10/10 10:49:36</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>Firebaseの導入手順をまとめてみたので間違っているところがないか見て頂けないでしょうか？</p>
</td>
          <td>
            <a href="undefined/F02H632TT9B-Firebase導入手順.pages" target="_blank">Firebase導入手順.pages</a>
            </td>
        </tr>
<tr>
          <td>2021/10/10 14:42:22</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>わかりました！！<br />これ自分もサンプルでやってなくてAnalyticsのデータきてませんでした！（FirebaseAuth の方は機能してた）  </p>
<p>原因としましては <code>Other Linker Flags</code> に <code>-ObjC</code> が設定されていないからでした。<br />なので一度此方の設定をお試しください！</p>
</td>
          <td>
            <a href="undefined/F02HYS5TNF2-スクリーンショット 2021-10-10 14.36.55.png" target="_blank"><img src="undefined/F02HYS5TNF2-スクリーンショット 2021-10-10 14.36.55.png" width="150" alt="スクリーンショット 2021-10-10 14.36.55.png /></a>"
            </td>
        </tr>
<tr>
          <td>2021/10/10 14:44:36</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>あと、設定ファイルの件につきまして  </p>
<blockquote>
<p>ダウンロードした設定ファイルはプロジェクト内で追加したフォルダと同じ場所に移動させるべきでしょうか？  </p>
</blockquote>
<p>というよりかは、最初から <code>Copy items if needed</code> にチェックを入れた状態で <code>Resources</code> フォルダ以下に入れるのをお勧めします！<br />チェックを入れてないと、例えばダウンロードフォルダにあるファイルを参照していたりするので。  </p>
<p>Xcode上のツリーとディレクトリの構成は常に一致していた方が良いと思いますよ！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/10/10 15:21:50</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>ありがとうございます🙇‍♂️<br />無事にできました！！<br />ずっと <code>-ObjC</code> を <code>-objC</code> にしてましたw</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/10/10 15:22:24</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><blockquote>
<p><code>Copy items if needed</code> にチェックを入れた状態で  </p>
</blockquote>
<p>これは特別チェックを外すという指示がない場合はチェックを入れるという認識でしょうか？</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/10/10 15:38:23</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>そうですね！<br />前回 <code>R.swift</code> 導入のの時に <code>R.generated.swift</code> は チェックを外しましょう！とありましたが<br />あれは既にプロジェクトのディレクトリ内の同じ場所に生成されていたので、チェックを入れることにより重複する可能性がありました。（実際には重複することはないので、多分現在は入れておいても大丈夫です。）  </p>
<p>例えば今回だと、ブラウザ上でインストールした <code>GoogleService-Info.plist</code> は一度ダウンロードフォルダに入ります。<br />そこから、 Xcode にドラック&amp;ドロップをして、<code>Copy items if needed</code> にチェックを入れなかった場合、ダウンロードフォルダ上のファイルを参照することになります。  </p>
<p>これの何が問題かと言いますと、例えばダウンロードフォルダの整理を行うなどで消してしまった場合には、参照するファイルを失ってしまいます。<br />また、Git管理したいものであれば、<code>.xcodeproj</code> には <code>~/User/Library/Download/GoogleService-Info.plist</code> を参照することになってるになってるけれど、別の人の環境だとそこにファイルは存在しないのでエラーになってしまいます。（自分自身でも改めてクローンしたら無くなってた！とかもあります。）  </p>
<p>という感じでリスクが結構あるので、基本的には <code>Copy items if needed</code> はチェックを入れておきましょう！<br />もし外してねとの指示があった場合には、どうして外すのかを考えるといいかもですね！</p>
</td>
          <td>
            <a href="undefined/F02HBDKC7FE-スクリーンショット 2021-10-10 15.32.11.png" target="_blank"><img src="undefined/F02HBDKC7FE-スクリーンショット 2021-10-10 15.32.11.png" width="150" alt="スクリーンショット 2021-10-10 15.32.11.png /></a>"
            </td>
        </tr>
<tr>
          <td>2021/10/10 15:49:07</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>なるほど！<br /><code>R.generated.swift</code> は先に Finder の方のディレクトリに作成されて、そこから Xcodeのプロジェクトに追加する時に <code>Copy items if needed</code> にチェックを入れると重複する恐れがあったということだったんですね！<br />チェックが必要な時といらない時の差がやっと理解できました！ありがとうございます🙏  </p>
<p>ちなみに <code>Other Linker Flags</code> に <code>-ObjC</code> が設定が必要なのは、Firebase との接続処理は内部で objective-c のコードで行われていてそれを動かすのに必要という認識でしょうか？</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/10/10 15:55:31</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><blockquote>
<p><code>R.generated.swift</code> は先に Finder の方のディレクトリに作成されて、そこから Xcodeのプロジェクトに追加する時に <code>Copy items if needed</code> にチェックを入れると重複する恐れがあった  </p>
</blockquote>
<p>そうですそうです！ちなみに自分は <code>R.generated.swift</code> 以外でそこのチェックは外したことはないです！  </p>
<blockquote>
<p>ちなみに <code>Other Linker Flags</code> に <code>-ObjC</code> が設定が必要なのは、Firebase との接続処理は内部で objective-c のコードで行われていてそれを動かすのに必要という認識でしょうか？  </p>
</blockquote>
<p>これちょっと説明が難しいというか、自分もあんまりよくわかってないので一度まとめてみますね！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/10/10 16:02:49</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>Static Library で発生する問題で  </p>
<blockquote>
<p>UNIXの Static library実装 と Objective-C の動的な性質の違いによって引き起こされるとのこと。  </p>
</blockquote>
<p><a href="https://developer.apple.com/library/archive/qa/qa1490/_index.html" rel="noopener noreferrer">https://developer.apple.com/library/archive/qa/qa1490/_index.html</a>  </p>
<blockquote>
<p>Passing the -ObjC option to the linker causes it to load all members of static libraries that implement any Objective-C class or category. This will pickup any category method implementations. But it can make the resulting executable larger, and may pickup unnecessary objects. For this reason it is not on by default.  </p>
</blockquote>
<blockquote>
</blockquote>
<blockquote>
<p>リンカに -ObjC オプションを渡すと、Objective-C のクラスやカテゴリを実装したスタティック・ライブラリのすべてのメンバーをロードします。これにより、あらゆるカテゴリーのメソッドの実装がピックアップされます。しかし、実行ファイルのサイズが大きくなったり、不要なオブジェクトがピックアップされたりする可能性があります。このような理由から、この機能はデフォルトではオンになっていません。  </p>
</blockquote>
<p>上記リンクに説明が書いてあるんですが、読んでも理解するのかなり厳しい話ですねこれ。。。<br />Static Library で発生することを覚えておいて、もし問題が発生したらコレかも！ぐらいの認識で、いいのかも。。全てを理解するにはなかなか学ぶことが多すぎる感です 😭</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/10/10 16:06:01</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>やっぱり相当複雑なものなんですね！<br />Static Library で発生する問題ということが分かっただけでも十分助かりました！<br />ありがとうございます😊</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/10/10 16:11:40</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>此方こそ勉強する機会ありがとうございます！🙇‍♀️<br />全てを理解するのって本当に難しいので、経験的にあー <code>-ObjC</code> フラグが足りてないのかも！って思えれば<br />それでいいと思います！！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/10/10 16:17:09</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>わかりました！<br />本当に助かりました！！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/10/16 17:40:33</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>RxDataSourcesについての質問です！<br />1,  </p>
<pre><code>private lazy var configureCell: RxCollectionViewSectionedAnimatedDataSource&amp;lt;VideosSectionModel&gt;.ConfigureCell = { _, collectionView, indexPath, item in  
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: R.reuseIdentifier.homeVideoCollectionViewCell, for: indexPath)!  
        cell.configure(item: item)  
        return cell  
    }  </code></pre><p>2,  </p>
<pre><code>viewModel.output.dataSources  
            .debug("確認 = dataSources")  
            .bind(to: collectionView.rx.items(dataSource: dataSource))  
            .disposed(by: disposeBag)  </code></pre><p>2の <code>collectionView.rx.items</code> へのバインドの処理は一度しか流れていないのですが、 1のコードの部分が item数 * 2 回処理が走ってしまします。<br />(<code>item</code> に入るデータのもととなる配列数が 1つなら2回、2つなら4回 という感じです)  </p>
<p>このような挙動が起きる原因に思い当たることはありますか？  </p>
<p>お手隙の際にご対応のほどよろしくお願い致します！！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/10/16 18:16:05</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>ちなみにデータが１つの時に 1の処理の部分で <code>indexPath</code> を確認したところ <code>section</code> も <code>row</code> も0で2回とも流れていました！<br />itemの中身も同じです！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/10/16 18:28:51</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>Real Time Databaseの変更を監視しているところで accept している時だけなっているみたいで、調査するのは難しいと思うのでもう少し自分で調べます！<br />なので、もし何か思いつくことがあれば！ぐらいで時間は割かなくて大丈夫です🙇‍♂️  </p>
<pre><code>// RealTimeDatabase の変更を監視  
let uuidString = UIDevice.current.identifierForVendor?.uuidString ?? UUID().uuidString  
        databaseRef = Database.database().reference().child("users").child(uuidString)  
        databaseRef.observe(.value, with: { [weak self] snapshot in  
            let value = snapshot.value  

            guard let videosDic = value as? NSDictionary,  
                  let dic = videosDic["videos"] as? NSDictionary,  
                  let allKeys = dic.allKeys as? [String] else { return }  

            let videos: [Video] = allKeys.map { key in  
                guard let dic = dic[key] as? NSDictionary else { fatalError() }  
                print(dic)  
                let uuid = UUID(uuidString: dic["uuid"] as! String)!  
                let videoName = dic["video_name"] as! String  
                let url = URL(string: dic["url"] as! String)!  
                return Video(uuid: uuid, videoName: videoName, url: url)  
            }  

            self?.viewModel.input.updateItemsTrigger.accept(videos) // 1回しか流れてない  
        })  </code></pre></td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/10/16 18:29:58</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>了解です！！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/10/19 23:58:17</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>FirebaseStorageへのアップロード処理のタスクをシングルトンの変数で保持して、タスクを代入したクラスと別のクラスで監視しようとして下記のようなコードで実装しましたが、 <code>uploadTask</code> を監視している場所の処理がされませんでした。  </p>
<p><code>uploadTask</code> に代入したクラスと別のクラスで監視をするためにどうすればいいでしょうか？<br />お手隙の際に教えて頂けますと幸いです！！  </p>
<p>○ アップロードタスクを保持するクラス  </p>
<pre><code>import FirebaseStorage  

final class FirebaseTask {  
      
    static let shared = FirebaseTask()  
    var uploadTask: StorageUploadTask?  
}  </code></pre><p>○ アップロード処理  </p>
<pre><code>extension Reactive where Base == Storage {  

    enum DownloadError: Error {  
        case notFoundURL  
    }  
    /// 動画のアップロード  
    static func upload(data: Data) -&gt; Observable&amp;lt;String&gt; {  
        return Observable.create { observer in  
            let videoName = Int(Date().timeIntervalSince1970)  
            let storageRef = Storage.storage().reference().child("videos").child("\(videoName).mp4")  
            let metadata = StorageMetadata()  
            metadata.contentType = "video/mp4"  

            // FirebaseTask.shared.uploadTask を他の Controller で監視する  
            FirebaseTask.shared.uploadTask = storageRef.putData(data, metadata: metadata) { _, error in  
                if let error = error {  
                    observer.onError(error)  
                    return  
                }  

                observer.onNext((videoName.description))  
                observer.onCompleted()  
            }  
            return Disposables.create()  
        }  
    }  
}  </code></pre><p>○ 保持したアップロードタスクを監視　ここの処理がされない  </p>
<pre><code>FirebaseTask.shared.uploadTask?.observe(.progress, handler: { [weak self] snapshot in  
            self?.progress.showAtRatio()  
            let totalCount = snapshot.progress?.totalUnitCount ?? 1  
            let completedCount = snapshot.progress?.completedUnitCount ?? 1  
            let rate = CGFloat(completedCount) / CGFloat(totalCount)  
            print("レート = \(rate)")  
            self?.progress.updateRatio(CGFloat(rate))  
        })  </code></pre></td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/10/20 0:07:48</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>すみません！FirebaseStorage 環境用意しようと思って気づいたら数日立ってました。。。<br />なかなか見てあげられなくて申し訳ないです 😭<br />明日環境用意して合わせて見て見ます！！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/10/20 9:36:45</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>環境まですみません！！！<br />Firebase系のものとかは調べるための環境を整える必要が出てしまうので、もし気づいたことがあれば！ぐらいでお願いしているので、<br />全然大丈夫です！  </p>
<p>今回の質問も Firebase が絡んでいますが、参照の保持の仕方がおかしいのかな？とかが分からなかったので質問させて頂きました🙇‍♂️</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/10/20 9:38:52</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>いえいえ！お気になさらず！<br />Firebase系は今後も質問されること多いと思うので、一度用意しておけば此方でも試せるので！<br />逆に用意してなくて何も答えてあげられない方が悲しいので 😭</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/10/20 9:41:46</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>ありがとうございます！<br />本当に助かります！！！！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/10/25 22:19:37</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>めちゃくちゃ遅くなってしまって申し訳ないです！  </p>
<blockquote>
<p>FirebaseStorageへのアップロード処理のタスクをシングルトンの変数で保持して、タスクを代入したクラスと別のクラスで監視しようとして下記のようなコードで実装しましたが、 <code>uploadTask</code> を監視している場所の処理がされませんでした。  </p>
</blockquote>
<p>解決策ではないんですが、原因について調べてみました！なんとなくわかるんですが、説明が難しく、わかりづらかったらすみません🙇‍♀️  </p>
<p>色々問題点はあるんですが、まず第一として、<code>FirebaseTask.shared.uploadTask?.observe(.progress, hanlder: {})</code> を設定しているところでは、 まだ <code>uploadTask</code> が <code>nil</code> なので、そもそもこのメソッドは通ってないんじゃないかな？？って気がしています。  </p>
<p>また <code>storageRef.putData(data, metadata: metadata, completion: {})</code> の部分で返り値を返しているタイミングが不明だったので 順番を見てみました。  </p>
<p>シングルトンの <code>FirebaseTask</code> の <code>uploadTask</code> に <code>didSet</code> 内で <code>print</code> を追加します。  </p>
<pre><code>import FirebaseStorage  

final class FirebaseTask {  

    static let shared = FirebaseTask()  
    var uploadTask: StorageUploadTask? {  
        didSet {  
            print("🐈 FirebaseTask.shared.uploadTask の didSet")  
        }  
    }  
}  </code></pre><p>次に <code>Storage</code> の extension 内でも以下のように <code>print</code> を追加しました。  </p>
<pre><code>extension Reactive where Base == Storage {  

    enum DownloadError: Error {  
        case notFoundURL  
    }  
    /// 動画のアップロード  
    static func upload(data: Data) -&gt; Observable&amp;lt;String&gt; {  
        print("🐈 upload")  
        return Observable.create { observer in  
            let videoName = Int(Date().timeIntervalSince1970)  
            let storageRef = Storage.storage().reference().child("videos").child("\(videoName).mov")  
            let metadata = StorageMetadata()  
            metadata.contentType = "video/mov"  

            FirebaseTask.shared.uploadTask = storageRef.putData(data, metadata: metadata) { metadata, error in  
                print("🐈 putData completion", metadata)  
                if let error = error {  
                    print("error", error)  
                    observer.onError(error)  
                    return  
                }  

                observer.onNext((videoName.description))  
                observer.onCompleted()  
            }  

            FirebaseTask.shared.uploadTask?.observe(.progress, handler: { snapshot in  
                let totalCount = snapshot.progress?.totalUnitCount ?? 1  
                let completedCount = snapshot.progress?.completedUnitCount ?? 1  
                let rate = CGFloat(completedCount) / CGFloat(totalCount)  
                print("🐈 observe", rate)  
            })  
            return Disposables.create()  
        }  
    }  
}  </code></pre><p>これを実行して見てみると添付画像のような順で <code>print</code> がされます。  </p>
<p><code>didSet</code> -&gt; <code>observe</code> -&gt; <code>completion</code> の順で呼ばれているので、体感と合っている気がします。（ちょっとこれ順番違うかなと思って見てみたんですが、特に異常なかったので無視してくださいｗｗこんな方法でやってるんだーぐらいで）</p>
</td>
          <td>
            <a href="undefined/F02JQSZ9LEA-スクリーンショット 2021-10-25 22.05.46.png" target="_blank"><img src="undefined/F02JQSZ9LEA-スクリーンショット 2021-10-25 22.05.46.png" width="150" alt="スクリーンショット 2021-10-25 22.05.46.png /></a>"
            </td>
        </tr>
<tr>
          <td>2021/10/25 22:25:35</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>で、このデバッグ見てようやく解決策わかりました！！  </p>
<p>シングルトンに持たせるのは <code>BehaviorRelay</code> もしくは <code>PublishRelay</code> になると思います！<br />今回だと、<code>progress</code> を渡す <code>PublishRelay&amp;lt;CGFloat&gt;</code> を用意してやればOKです！（初期値がゼロで明確なので、 <code>BehaviorRelay&amp;lt;CGFloat&gt; = .init(value: 0)</code> でも良いかも）  </p>
<pre><code>import FirebaseStorage  

final class FirebaseTask {  

    static let shared = FirebaseTask()  

    var progressRelay: PublishRelay&amp;lt;CGFloat&gt; = .init()  
}  </code></pre><p>この <code>progressRelay</code> を upload の中で呼んであげれば良いですね！  </p>
<pre><code>extension Reactive where Base == Storage {  

    enum DownloadError: Error {  
        case notFoundURL  
    }  
    /// 動画のアップロード  
    static func upload(data: Data) -&gt; Observable&amp;lt;String&gt; {  
        return Observable.create { observer in  
            let videoName = Int(Date().timeIntervalSince1970)  
            let storageRef = Storage.storage().reference().child("videos").child("\(videoName).mov")  
            let metadata = StorageMetadata()  
            metadata.contentType = "video/mov"  

            // この子はシングルトンにはしない  
            let uploadTask = storageRef.putData(data, metadata: metadata) { _, error in  
                if let error = error {  
                    observer.onError(error)  
                    return  
                }  

                observer.onNext((videoName.description))  
                observer.onCompleted()  
            }  

            // 上記の obeserver.onNext より先に呼ばれる  
            uploadTask.observe(.progress, handler: { snapshot in  
                let totalCount = snapshot.progress?.totalUnitCount ?? 1  
                let completedCount = snapshot.progress?.completedUnitCount ?? 1  
                let rate = CGFloat(completedCount) / CGFloat(totalCount)  
                // ここで PublishRelay に明示的に送る  
                FirebaseTask.shared.progressRelay.accept(rate)  
            })  
            return Disposables.create()  
        }  
    }  
}  </code></pre><p>実際にプログレスを見たい部分では  </p>
<pre><code>FirebaseTask.shared.progressRelay  
    .subscribe(onNext: { progress in  
        print(progress)  
    })  
    .disposed(by: disposeBag)  </code></pre><p>このように監視してやればOKです！  </p>
<p>これで一応シングルトンを用いて、他のクラスからでも進捗がみれるはずです！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/10/26 0:33:07</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>めちゃくちゃ大変な調査ありがとうございます😭  </p>
<p><code>putData completion</code> は <code>uploadTask</code> が完了してから呼ばれるんですね！<br />よくよく考えればそうなるか！とも思えるんですが混乱しますw  </p>
<p><code>uploadTask</code> をシングルトンにしなくても、必要なデータを流すシングルトンを作ればよかったんですね！<br />丁寧にありがとうございます！やってみます！！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/10/26 0:37:26</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>いえいえ！よくよく考えればそうなるか〜をなかなか説明するのが難しくて私も結構混乱してますｗ<br />またハマったらお気軽に聞いてくださいね 🤝<br />FirebaseStorage 環境はバッチリできたので！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/10/26 0:42:03</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>ありがとうございます😊<br />心強いです！！！！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/11/10 21:51:18</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>画面遷移アニメーションで添付した動画のような動きでモーダルを表示したいのですがやり方がよく分からず教えて頂きたいです！<br />3枚目の画像は下記の記事参照です！<br /><a href="https://hiromiick.com/custom-transition-animation-image-zoom/" rel="noopener noreferrer">https://hiromiick.com/custom-transition-animation-image-zoom/</a>  </p>
<p>質問1:<br />画面遷移アニメーションの処理の流れが、<br />FirstViewController -&gt; containerView -&gt; SecondViewController<br />みたいなので containerView に SecondViewController の tableView と同じレイアウトの View を配置したいのですが、参照はコピーせずに見た目は一緒の違うインスタンスの View を作成することは可能でしょうか？  </p>
<p>containerView で SecondViewController で表示する tableView と見た目が全く一緒のViewを下から上に昇ってくるアニメーションして、完了したら containerView が消えて SecondViewController が表示される。というようにしたいです！  </p>
<p>質問2:<br />containerView は <code>transitionContext.completeTransition(true)</code> を呼び出した後、自動的に破棄されないのでしょうか？<br />参考にしている記事では、画面遷移アニメーション完了後 containerView に <code>addSubview</code> している view を <code>removeFromSuperview()</code> で破棄しているのですが、<br />containerView が破棄されるなら <code>addSubview</code> している view も破棄されないのかな？と思いました！  </p>
<p>お手隙の際に2点について教えていただけますと幸いです！！</p>
</td>
          <td>
            <video controls width="150"><source src="undefined/F02LRKZ914M-iOS の画像.MP4" type="video/mp4" /></video><a href="undefined/F02LRKZ914M-iOS の画像.MP4" target="_blank">iOS の画像.MP4</a>,<a href="undefined/F02M783PP1P-スクリーンショット_2021-11-10_21_33_22-2.png" target="_blank"><img src="undefined/F02M783PP1P-スクリーンショット_2021-11-10_21_33_22-2.png" width="150" alt="スクリーンショット_2021-11-10_21_33_22-2.png /></a>",<a href="undefined/F02LDVB4FL7-スクリーンショット 2021-11-10 21.21.08.png" target="_blank"><img src="undefined/F02LDVB4FL7-スクリーンショット 2021-11-10 21.21.08.png" width="150" alt="スクリーンショット 2021-11-10 21.21.08.png /></a>"
            </td>
        </tr>
<tr>
          <td>2021/11/15 19:59:24</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>遅くなってすみません！！<br />作りたい画面遷移アニメーションについて確認したいのですが、こういう感じですかね？？？  </p>
<p>YouTube のような下からにゅっとでてくるセミモーダルだと、特に何もせずに、  </p>
<pre><code>let viewController = SecondViewController()  
present(viewController, animated: true, completion: nil)  </code></pre><p>で添付した動画のようになるので、画面遷移をカスタムする必要もないのかな？って気がしています。  </p>
<p>もしそうじゃないよってことなら詳細教えていただけると助かります！！</p>
</td>
          <td>
            <video controls width="150"><source src="undefined/F02MBDP119Q-iOS の画像.MP4" type="video/mp4" /></video><a href="undefined/F02MBDP119Q-iOS の画像.MP4" target="_blank">iOS の画像.MP4</a>
            </td>
        </tr>
<tr>
          <td>2021/11/15 20:00:09</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>こちらの <code>SecondViewController</code> は <code>View</code> の <code>backgroundColor</code> を <code>clear</code> にしてあげているだけのものになります。</p>
</td>
          <td>
            <a href="undefined/F02MQ3V95PB-スクリーンショット 2021-11-15 19.56.17.png" target="_blank"><img src="undefined/F02MQ3V95PB-スクリーンショット 2021-11-15 19.56.17.png" width="150" alt="スクリーンショット 2021-11-15 19.56.17.png /></a>"
            </td>
        </tr>
<tr>
          <td>2021/11/15 21:04:23</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>先に 質問2 から  </p>
<blockquote>
<p>containerView は <code>transitionContext.completeTransition(true)</code> を呼び出した後、自動的に破棄されないのでしょうか？  </p>
</blockquote>
<p>こちらに関しては、調べたところ破棄されません。  </p>
<p>破棄されないというよりかは  </p>
<blockquote>
<p>FirstViewController -&gt; containerView -&gt; SecondViewController  </p>
</blockquote>
<p>これらは全てスタックされている状態なんですよね。<br />画面遷移の仕組みというのは、実は単に画面を重ねていっているだけなのです。  </p>
<p>例えば、カスタムトランジションを使わない通常の <code>present</code> だけで画面遷移した場合<br />各画面を添付画像のように重ねて表示しています。<br />FirstViewController の上に <code>UITransitionView</code> が乗っていて、その上に <code>SecondViewController</code> が乗っています。  </p>
<p>画面遷移をカスタマイズするというのは、この <code>UITransitionView</code> の設定を手動でやろう！ということですね。  </p>
<p>通常の <code>present</code> を カスタムトランジションを使って行う場合には、小林さんの貼ってくださった参照記事の<br /><code>presentTransition(using transitionContext: UIViewControllerContextTransitioning)</code> の部分を以下のようにすることで再現することができます。  </p>
<pre><code>    private func presentTransition(using transitionContext: UIViewControllerContextTransitioning) {  
        // 画面遷移先  
        guard let toVC = transitionContext.viewController(forKey: .to) else { return }  
        let containerView = transitionContext.containerView  
        let finalFrame = transitionContext.finalFrame(for: toVC)  
        // y座標を高さに指定して、viewを画面外に出す  
        toVC.view.frame = CGRect(x: 0, y: finalFrame.height, width: finalFrame.width, height: finalFrame.height)  
        // 画面遷移先の view として追加する  
        containerView.addSubview(toVC.view)  
        UIView.animate(withDuration: 0.25, delay: 0, options: .curveEaseInOut, animations: {  
            toVC.view.frame.origin.y = 0  
        }, completion: { _ in  
            transitionContext.completeTransition(true)  
        })  
    }  </code></pre><p><code>containerView</code> の上に 次に表示したい <code>view</code> を <code>addSubview</code> して、<br />そのタイミングで <code>view</code> をアニメーションを適当に行って表示させてみたよ〜というのがカスタムトランジションですね。</p>
</td>
          <td>
            <a href="undefined/F02LX04T147-カスタムトランジションを使わない.png" target="_blank"><img src="undefined/F02LX04T147-カスタムトランジションを使わない.png" width="150" alt="カスタムトランジションを使わない.png /></a>"
            </td>
        </tr>
<tr>
          <td>2021/11/15 21:06:36</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>そのため  </p>
<blockquote>
<p>参考にしている記事では、画面遷移アニメーション完了後 containerView に <code>addSubview</code> している view を <code>removeFromSuperview()</code> で破棄しているのですが、  </p>
</blockquote>
<p>この参考記事では、アニメーション用に <code>animationView</code> というものを追加していて、それを破棄しないと、重なったままになってしまうということですね。</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/11/15 21:15:56</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>これを踏まえて 質問１です！  </p>
<blockquote>
<p>みたいなので containerView に SecondViewController の tableView と同じレイアウトの View を配置したいのですが、参照はコピーせずに見た目は一緒の違うインスタンスの View を作成することは可能でしょうか？  </p>
</blockquote>
<p>これは可能ですね！  </p>
<p>以下のようにしてやると、画面遷移先と同じものをdummyの VC を見た目上の画面遷移に使うこともできるかと思います。<br />ただ、今回の場合とかだと単に本物の方の <code>View</code> をアニメーションさせてやればいいかな？？と思います。  </p>
<pre><code>private func presentTransition(using transitionContext: UIViewControllerContextTransitioning) {  
    let toVC = transitionContext.viewController(forKey: .to) as! DetailViewController  
    // ダミー用のVCを用意する  
    let dummyVC = DetailViewController()  
    let containerView = transitionContext.containerView  
    let finalFrame = transitionContext.finalFrame(for: toVC)  

    toVC.view.frame = finalFrame  

    // y座標を高さに指定して、viewを画面外に出す  
    dummyVC.view.frame = CGRect(x: 0, y: finalFrame.height, width: finalFrame.width, height: finalFrame.height)  
    // 本当に表示したい方は隠す  
    toVC.view.alpha = 0  

    containerView.addSubview(toVC.view)  
    containerView.addSubview(dummyVC.view)  

    UIView.animate(withDuration: 1, delay: 0, options: .curveEaseInOut, animations: {  
        dummyVC.view.frame.origin.y = 0  
    }, completion: { _ in  
        toVC.view.alpha = 1  
        dummyVC.view.removeFromSuperview()  
        transitionContext.completeTransition(true)  
    })  
}  </code></pre></td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/11/15 21:23:49</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>あとはもう一つですね、このようにコピーしなくてもいい方法を伝授しておきます！  </p>
<p><code>UIView</code> のスクリーンショットを撮ってそれをアニメーションさせるという方法です。  </p>
<p>動作は先ほどの2つのコードと同じです。<br />次に表示したい VC の画面をスクリーンショットを撮って その画像をアニメーションさせます。  </p>
<pre><code>private func presentTransition(using transitionContext: UIViewControllerContextTransitioning) {  
    let toVC = transitionContext.viewController(forKey: .to) as! DetailViewController  
    let containerView = transitionContext.containerView  

    let finalFrame = transitionContext.finalFrame(for: toVC)  

    toVC.view.frame = finalFrame  
    toVC.view.layoutIfNeeded()  

    // 上記で layoutIfNeeded で描画したあとにスナップショットを撮る  
    let image = toVC.view.screenShot()  
    // その後 透明にして隠す  
    toVC.view.alpha = 0  

    // 実際にアニメーションさせるView (次の画面のスクリーンショット画像をアニメーションさせる）  
    let animationView = UIImageView(image: image)  
    animationView.frame = CGRect(x: 0, y: finalFrame.height, width: finalFrame.width, height: finalFrame.height)  
    containerView.addSubview(toVC.view)  
    containerView.addSubview(animationView)  

    UIView.animate(withDuration: 0.25, delay: 0, options: .curveEaseInOut, animations: {  
        animationView.frame.origin.y = 0  
    }, completion: { _ in  
        toVC.view.alpha = 1  
        animationView.removeFromSuperview()  
        transitionContext.completeTransition(true)  
    })  
}  </code></pre><p>UIViewをUIImageに変換する（スクショを撮る）extensionです。  </p>
<pre><code>import UIKit  

extension UIView {  

    func screenShot() -&gt; UIImage? {  
        let imageBounds = CGRect(origin: CGPoint.zero, size: self.bounds.size)  

        UIGraphicsBeginImageContextWithOptions(self.bounds.size, false, 0)  

        self.drawHierarchy(in: imageBounds, afterScreenUpdates: true)  

        var image: UIImage?  
        let contextImage = UIGraphicsGetImageFromCurrentImageContext()  

        if let contextImage = contextImage, let cgImage = contextImage.cgImage {  
            image = UIImage(  
                cgImage: cgImage,  
                scale: UIScreen.main.scale,  
                orientation: contextImage.imageOrientation  
            )  
        }  

        UIGraphicsEndImageContext()  

        return image  
    }  
}  </code></pre><p>こういう方法を取ることもできます！！  </p>
<p>ちなみにこれの <code>animationView</code> を <code>removeFromSuperview</code> をし忘れると以下の画像のようになります。  </p>
<p>長くなりましたが、何かわからないことがあればまた聞いてください！！🙇‍♀️</p>
</td>
          <td>
            <a href="undefined/F02ME10UZ2Q-スクリーンショット 2021-11-15 21.22.41.png" target="_blank"><img src="undefined/F02ME10UZ2Q-スクリーンショット 2021-11-15 21.22.41.png" width="150" alt="スクリーンショット 2021-11-15 21.22.41.png /></a>"
            </td>
        </tr>
<tr>
          <td>2021/11/15 21:50:40</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><blockquote>
<p>作りたい画面遷移アニメーションについて確認したいのですが、こういう感じですかね？？？  </p>
</blockquote>
<p>その動きで大丈夫です！<br />画面遷移すると後ろの画面は薄暗くなってくれるんですねw  </p>
<p>質問2でいただいた回答を見た感じだと <code>UITransitionView</code> の <code>backgroundColor</code> が薄暗い色に設定されているような感じですね！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/11/15 21:58:21</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>2つのパターンも丁寧に実装方法を教えてくださってありがとうございます！！<br /><code>UIGraphicsBeginImageContextWithOptions</code> は内部的に処理されてることが多いのか理解がむずかしすぎて記憶から消えてました！  </p>
<blockquote>
<p>FirstViewController の上に <code>UITransitionView</code> が乗っていて、その上に <code>SecondViewController</code> が乗っています。  </p>
</blockquote>
<p>カスタムアニメーションをする時の <code>UITransitionView</code> にあたるものは <code>containerView</code>ということでしょうか？<br />↑ すみません！！画像つきで説明してくださってましたね！大丈夫です！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/11/15 22:00:11</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>コードの説明がわかりやすいおかげで、カスタム画面遷移がなんとなくできそうな気がします！！！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/11/15 22:47:52</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><pre><code>let viewController = SecondViewController()  
present(viewController, animated: true, completion: nil)  </code></pre><p>こちらと同じようにやると、FirstViewController が奥に行くような動作をして、下スワイプでモーダルを閉じれてしまう遷移の仕方になってしまうので自分の環境だとできなそうでした！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/11/15 22:50:09</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>連投すみません！動画貼り忘れました！</p>
</td>
          <td>
            <video controls width="150"><source src="undefined/F02MC408ZJ7-Simulator Screen Recording - iPhone 11 Pro Max - 2021-11-15 at 22.40.03.mp4" type="video/mov" /></video><a href="undefined/F02MC408ZJ7-Simulator Screen Recording - iPhone 11 Pro Max - 2021-11-15 at 22.40.03.mp4" target="_blank">Simulator Screen Recording - iPhone 11 Pro Max - 2021-11-15 at 22.40.03.mp4</a>
            </td>
        </tr>
<tr>
          <td>2021/11/15 23:35:07</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>そういえばたしかに iOS13からその挙動するはずですね。。。<br />なんで自分ので今できてるのかがわからんのでちょっとお待ちを！！<br />一応自分は iOS15環境で動かしています！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/11/15 23:53:38</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p><code>modalPresentationStyle</code> で 通常の <code>fullScreen</code> だと背景Viewの透過ができないんですが<br /> <code>overFullScreen</code> というやつを使えば透過ができるので  </p>
<pre><code>let viewController = SecondViewController()  
viewController.modalPresentationStyle = .overFullScreen  
present(viewController, animated: true, completion: nil)  </code></pre><p>で…  </p>
<p>ですが、背景が薄暗くなってくれるやつがコレだと下から一緒に出てきちゃうので多分微妙なんですよね。。<br />カスタムするしかないのか...むむむ<br />ちょっとまた明日にでももう少しみてみますね！  </p>
<p>この辺もご参考に…！<br /><a href="https://qiita.com/hirotakan/items/61bc8ca39714dbc9b301" rel="noopener noreferrer">https://qiita.com/hirotakan/items/61bc8ca39714dbc9b301</a><br /><a href="https://blog.asial.co.jp/1669" rel="noopener noreferrer">https://blog.asial.co.jp/1669</a></p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/11/16 0:16:37</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>ちょっと変わったやり方ですがカスタム遷移なしで  </p>
<pre><code>let viewController = SecondViewController()  
viewController.modalPresentationStyle = .overFullScreen  
present(viewController, animated: true, completion: nil)  </code></pre><p><code>SecondViewController</code> 内で 表示された時と <code>dismiss</code> 時に <code>view</code> の <code>backgroundColor</code> を調節  </p>
<pre><code>final class SecondViewController: UIViewController {  

    override func viewDidLoad() {  
        super.viewDidLoad()  
        view.backgroundColor = .clear  
    }  

    // 表示時  
    override func viewDidAppear(_ animated: Bool) {  
        super.viewDidAppear(animated)  
        UIView.animate(withDuration: 0.2) {  
            self.view.backgroundColor = .black.withAlphaComponent(0.4)  
        }  
    }  

    // dismiss時  
    private func dismiss() {  
        UIView.animate(withDuration: 0.2, animations: {  
            self.view.backgroundColor = .clear  
        }, completion: { _ in  
            self.dismiss(animated: true, completion: nil)  
        })  
    }  

}  </code></pre><p>こういうやり方もありかな…と思います…！</p>
</td>
          <td>
            <video controls width="150"><source src="undefined/F02MCGY4F19-画面収録 2021-11-16 0.13.16.mov" type="video/mov" /></video><a href="undefined/F02MCGY4F19-画面収録 2021-11-16 0.13.16.mov" target="_blank">画面収録 2021-11-16 0.13.16.mov</a>
            </td>
        </tr>
<tr>
          <td>2021/11/16 22:50:35</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>なるほど！<br />カスタム画面遷移で実装しようと思った理由が dismiss 時に何かしらの処理をしないで済むようにしたかったので、<br />カスタム画面遷移で色々実装できるようにしておこうと思います！！  </p>
<p>助かりました！ありがとうございます😊</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/11/17 14:13:16</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>了解です！<br />カスタム画面遷移とかは一度書いてしまえば今後ずっと使いまわせるものですしね！<br />またわからないことあれば、同じ箇所でも全然大丈夫ですので聞いてください〜！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/11/18 10:59:26</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>ありがとうございますー！！！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/11/21 16:54:09</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>遷移元画面へのデータの受け渡しについて質問です！  </p>
<p>使用するファイル<br />First  </p>
<ul>
<li>FirstViewController  </li>
<li>FirstViewModel  </li>
<li>FirstRouter</li>
</ul>
<p>Option  </p>
<ul>
<li>OptionModalController  </li>
<li>OptionModalViewModel  </li>
<li>OptionModalRouter</li>
</ul>
<p>Second  </p>
<ul>
<li>SecondViewController  </li>
<li>SecondViewModel  </li>
<li>SecondRouter</li>
</ul>
<p>○ 全体の流れ<br />FirstViewController から OptionModalController を開いて、OptionModalController で選択したアイテムを FirstViewController, または FirstViewModel で保持する。<br />保持したアイテムを SecondViewModel の init() で渡して、 SecondViewController に表示する。  </p>
<p>○ 質問したいこと<br />OptionModalController で選択したアイテムを SecondViewController に渡すためにはどのような方法で保持しておくのがいいでしょうか？  </p>
<p>1, OptionModal への遷移時に OptionViewModel に FirstViewModalのインスタンスを渡して、OptionModal で選択したアイテムを FirstViewModal で用意した PublishRelay&lt;[String]&gt; に流す。<br />2, OptionModal を閉じる時に 遷移元の画面 (FirstViewController) を取得して、FirstViewController で用意した変数に選択したアイテムを流す。  </p>
<p>このどちらかになるのかな？と思っているのですがもっといい方法などあれば教えて頂けると幸いです！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/11/21 17:21:10</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>すみません！もう一つ上記とは別の内容の質問をさせてください！<br />先日頂いたスナップショットの <code>extension</code> のコードについてなのですが、  </p>
<pre><code>import UIKit  

extension UIView {  

    func screenShot() -&gt; UIImage? {  
        let imageBounds = CGRect(origin: CGPoint.zero, size: self.bounds.size)  

        UIGraphicsBeginImageContextWithOptions(self.bounds.size, false, 0)  

        self.drawHierarchy(in: imageBounds, afterScreenUpdates: true)  

        var image: UIImage?  
        let contextImage = UIGraphicsGetImageFromCurrentImageContext()  

        if let contextImage = contextImage, let cgImage = contextImage.cgImage {  
            image = UIImage(  
                cgImage: cgImage,  
                scale: UIScreen.main.scale,  
                orientation: contextImage.imageOrientation  
            )  
        }  

        UIGraphicsEndImageContext()  

        return image  
    }  
}  </code></pre><pre><code>if let contextImage = contextImage, let cgImage = contextImage.cgImage {  
    image = UIImage(  
          cgImage: cgImage,  
          scale: UIScreen.main.scale,  
          orientation: contextImage.imageOrientation  
    )  
}  </code></pre><p>この部分の <code>UIImage</code> として取得してある <code>contextImage</code> を <code>cgImage</code> に変換してから再度 <code>UIImage</code> に直している理由はなんでしょうか？</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/12/3 18:32:30</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>突然すぎるのですが、よければ僕が働いている職場で副業しませんか？？<br />すごく大まかな会社の概要なのですが、mediableという動画プラットフォームのアプリを作っています！！  </p>
<p><code>話しの経緯</code><br />僕が RxSwift 設計での開発経験を積みたいので会社をやめたいですと上司の方にお話ししたところ、<br />今のコードを全て RxSwift の設計で作り直していいと言ったら続ける？と聞かれたのですが、<br />僕自身、一人の力で RxSwift の設計に作り直せる技量がないので教えてくれる人が欲しいと伝えました。  </p>
<p>すごく勝手なのですが教わるなら Reoさんに教わりたかったので、今プライベートでメンターして頂いている方がいいですと伝えたところ、<br />じゃー声をかけてみてというお話になりましたのでお誘いさせて頂きました！！<br />( Slackのやりとりはもちろん、Reoさんという名前も一切出していないのでご安心頂ければ！！ )  </p>
<p><code>大まかな副業内容</code>  </p>
<pre><code>副業内容の提案１：  
- 開発自体を一緒に進めてもらう  
（副業内容の提案２も含む）  


副業内容の提案２：  
- 質問させてもらう  
- コードレビューをしてもらう  </code></pre><p>まだ今日このようなお話しを上司の方としたばかりなので具体的な事は決まっていません！<br />少しでも興味を持って頂けたら具体的なことも決めていこう！ということなので考えてみて頂けると嬉しいです☺️  </p>
<p>会社のことなど気になることがあれば気軽に聞いてください！！<br />突然のお誘いでご迷惑になっていなければ幸いです🙇‍♂️</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/12/4 13:35:11</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>こんにちは！お誘いありがとうございます！  </p>
<p>話を進めるには色々と情報不足かと思うので、少し自分語りをしていきます！ｗ  </p>
<p>まず、現在の私の仕事状況について。<br />今年の6月ごろからフリーランスで参画している現場があります。12月はちょっと特例で丸1ヶ月お休みをいただいているんですが、1月からは復帰するという契約になっている状態です。  </p>
<pre><code>● 業務委託  
● 1日8時間 週5勤務  
● 3ヶ月ごとの契約更新  
● 完全リモートワーク  </code></pre><p>で、大手でかなり良い所に勤務できている状態なんですが、逆に副業のためにこちらを週3勤務にするとかが不可能な状態なんですね。<br />一度私が週5だと個人開発の時間が取れないので週3とかにしたいです〜と仲介の方に聞いたんですが、現場的に無理らしく、代わりに1ヶ月お休みで交渉してくれて、それで今お休みをいただいている状態です。  </p>
<p>なのでそもそも副業が可能かどうかが怪しいんですね。次の月曜日に確認してみます！  </p>
<pre><code>Reo -&gt; エージェント  
● 副業が可能かどうかを聞く  </code></pre></td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/12/4 13:53:21</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>でも、本当にごめんなさいなんですが、個人的にはあんまり副業をしたいとは思ってないんですよね 😭<br />小林さんと働くのは楽しそう！とは思うのですが、<br />そんなに稼ぎたいとも思ってないですし、なにより個人開発の時間が今より減るのが結構つらいんですよね。  </p>
<p>mediable から辿って少し会社のこと調べたんですが、恐らく原則出社な感じですよね？<br />それもおつらいなーと思って…  </p>
<blockquote>
<p>僕が RxSwift 設計での開発経験を積みたいので会社をやめたいですと上司の方にお話ししたところ、  </p>
</blockquote>
<blockquote>
<p>今のコードを全て RxSwift の設計で作り直していいと言ったら続ける？と聞かれたのですが、  </p>
</blockquote>
<p>あとちょっと失礼なことを言っちゃうんですが、この感じだと作り直さないと思うんですよね！！ｗｗ<br />スタートアップ系だと特に、何を使って設計するかよりプロジェクト自体が成功するかどうかが重要視されると思うので<br />リファクタリングに割く時間はあまり取れなさそうな印象です。  </p>
<p>人の人生なので色々言っちゃうとアレかなって気もするんですが  </p>
<blockquote>
<p>僕が RxSwift 設計での開発経験を積みたいので会社をやめたいですと上司の方にお話ししたところ、  </p>
</blockquote>
<p><code>Reo -&gt; 小林さん</code> に教えるのは今すでにやっていて、正直私から教えられることって既にあまりないかなって気がしてるんですよね。<br />もし本当に私が小林さんと働くことができても、私のスキル以上にはなれないんですよね。<br />それよりも、転職をして他の会社で実運用されている RxSwift のコードを見に行ったり、その現場で教えてもらって、そこでわからなかったことを私に質問する形の方がよっぽど良いんじゃないかな？と思うんですよね。  </p>
<p>色々な人の色々な考えや設計に触れることってすごく大事だと思うので。<br />私自身今参画している現場では、RxSwift で MVVM って感じではないんですが、新しく VIPER 設計というものを使ってみたりしています。<br />あと、私の現場では使ってないんですが(古いiOSが切れなくて)、結構他の現場では SwiftUI が主流になってきていると思うので、そちらも勉強できるところが良かったりするんじゃないかなーって思います！  </p>
<p>私実は小林さんの年齢も知らないんですが（！）もし転職しごろな感じなら、他に行ってみるのって結構アリだと思いますよ！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/12/4 14:10:00</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>いっぱい色々言っちゃってアレなんですが、逆に私からもお誘いさせていただきますね！！  </p>
<p>今小林さんは会社員で、一応ここだとフリーランスになってしまうので少しオススメしづらさはあったんですが<br />私がいま所属している仲介業者さんの紹介をさせていただきたいです！  </p>
<p><a href="https://senyou.dev/" rel="noopener noreferrer">https://senyou.dev/</a>  </p>
<p>Senyou というところなんですが、此方は紹介でしかメンバーになれなくて<br />私は iOS エンジニアの友達から紹介していただいて、Senyou からいただいた案件で今の現場に参画できるようになりました！  </p>
<p>いろんな案件を紹介してくれて、面談のサポートもしてくれるので私的には知り合えて本当に良かったと思っている人たちです！<br />もちろんお金が取られたりすることもないですし、<br />実際に案件が取れなくても怒られたりすることもないですし、取れるまで連絡され続けるってこともないのでｗｗ<br />メリットしかないはず...！です！  </p>
<p>もし気になったら詳細お話しますので、逆によろしくお願いします！🙇‍♀️<br />転職をしなくても、メンバーになっておく（Slackチャンネルに入る）だけでもかなりありだと思います！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/12/4 16:09:16</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>なるほど、そうでしたか！<br />僕もReoさんの勤務形態を詳しくは知らなかったので、もし可能であれば一緒に働きたい！と思いお声がけさせていただきました！  </p>
<p>毎回突拍子もないお誘いですみません🙇‍♂️<br />本当に急なお誘いでしたので気にしないでくださいね☺️  </p>
<p>RxSwift の設計に作り直すことは、僕が残るなら3,4ヶ月使って必ずやっていい という約束はしたので問題なくやらせてもらえそうです！  </p>
<p>今の現場では RxSwift も学べない上に個人的な時間も取りづらいことで、Reoさんへの質問もあまりできてないだけで教えて頂けることが<br />まだまだ全然あると思っています！<br />（当たり前ですが、質問への回答を頂くたびに技量の違いを感じられて楽しいです！）  </p>
<p>ですが、確かに仕事でもReoさんに教わってという感じでやっていたら、僕からする質問は Reoさんがすでに知っていることばかりになってしまうのも<br />楽しくないですね！<br />もしReoさんを誘えなかった場合、他の iOSエンジニアを技術顧問として雇うと上司の方に言われたので、他の契約内容とか次第ではこのまま続けるのもありかな<br />とは思っています！  </p>
<p>メンター依頼も急にしていたので、年齢も開示していると思ってましたww<br />今年26歳になった年です！ Reoさんはここら辺の個人情報の開示はしなくて大丈夫です！！<br />もう結構おじいちゃんなのでコロコロ現場を変えるべきではないかもしれないですが、色々な現場をみたくてすぐ動こうとしちゃってますww<br />エンジニア経験が3年経ったところなのですが、ちょうど一年前にフリーランスで働き始めて、Midworks というエージェントを利用しています！  </p>
<p>Reoさんにお誘いいただいた仲介業者さんは他のエージェントを利用しながらでも利用できますか？<br />もし可能でしたらぜひお話をお聞きしたいです！  </p>
<p>本当に色々考えてくださり、丁寧にご回答いただきありがとうございます😊</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/12/5 0:17:13</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>いえいえ！こうやってお誘いしてくれるのはかなり嬉しいですよ！w<br />というか 小林さん フリーランスだったんですね！ずっと会社員だと思ってました！  </p>
<p>確かに一緒に働くことができると 今のように質問をまとめて細かいところを一緒にやるというよりかは<br />ペアプログラミング的にできるのでそれはまた別物かもしれないですね！<br />ちょっと、こちらの副業が可能かどうか次第もあるのでもう少し考えさせて欲しいです 🙇‍♀️<br />基本的に今の現場が週5から削れないので、結構厳しめではあると思っていただけると。。。<br />多分副業していることを今の現場に開示しない形でしか無理かなぁって感じはしています。。。  </p>
<p>あとは確認したい点は以下の２点ですね。  </p>
<pre><code>- 参画する場合の最低稼働日数 （週何日とか）  
- 完全リモートワークが可能かどうか  </code></pre><p>あと私はあんまり個人情報言うの嫌とかはないのでｗ気にしないで大丈夫ですよ！ｗ<br />自分27歳なのでもっとおばあちゃんですよｗｗ  </p>
<p>Senyou に関しましては、他のエージェントを利用しながらでも全然大丈夫だと思いますよ！<br />自分は他のエージェントとか転職系のを利用したことがないのでわからないですが、<br />代表が直接お話聞いてくれたり、紹介でしか入れないというので 毛色は違うかもです！！  </p>
<p>ちょっと休日に連絡するのはアレかなと思うので月曜日に副業の件も含めて聞いてみます！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/12/5 4:33:20</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>教えてもらい始めた頃は会社員だったんですが、会社に属してるいのがなんとなくやだなぁと思ってフリーランスになっちゃいましたw  </p>
<blockquote>
<p>こちらの副業が可能かどうか次第もあるのでもう少し考えさせて欲しいです  </p>
</blockquote>
<p>分かりました！<br />断るのは悪いなぁなど、こちらのことを考えて無理する必要は全然ないですからね！<br />Reoさんの時間や気持ちだけを優先して考えて頂ければ嬉しいです😊  </p>
<blockquote>
<p>確認したい点は以下の２点  </p>
</blockquote>
<ul>
<li><p>完全リモートワークが可能かどうか<br />こちらは確認済みで、完全リモートで問題ないです！  </p>
</li>
<li><p>参画する場合の最低稼働日数<br />こちらは月曜日に確認してみます！</p>
</li>
</ul>
<blockquote>
<p>あと私はあんまり個人情報言うの嫌とかはないのでｗ気にしないで大丈夫ですよ！ｗ  </p>
</blockquote>
<p>ありがとうございます！！<br />あれだけすごい技術力で27歳はむしろ若すぎます！w  </p>
<p>あまり情報を詰め込みすぎると断りずらさが増してしまうかなと思ったのですが、iOSアプリの開発は僕ともう一人いるのでその情報をふまえて書きます！<br />○ mediable iOSアプリ開発 について  </p>
<pre><code>- 作成しているアプリ内容  
mediable という動画プラットフォームを作っています。  
今は進行差分はないですが、web版の開発が先に進められていたものになります。  
まだweb版がリリースされてからちょうど1年ぐらいしかたっておらず、機能の追加や変更は多発しますw  

- 人数: 2人  
僕は週5日で基本的には出勤して働いています！  
もう一人の方は神戸の方でフルリモートをしています。(毎週 月曜、火曜、水曜 で働いていますが、月6日働けばいいという契約らしいです)  
年齢は50後半くらい？な気がします！  
開発設計、動画機能、認証機能はこの方が担当していて、他の部分を僕がやるといった感じで進めていました。  

- アーキテクチャー  
MVVMと公表していますが、めちゃくちゃですw  
ReSwift というライブラリを使用した、reduxの考えに乗っ取った設計になっています。  

この ReSwift の設計を変える。ということをこれからやっていこうという感じです！  </code></pre><p>副業に関してと Senyou に関して、月曜日に確認承知しました！<br />よろしくお願いします☺️</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/12/6 14:02:50</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><blockquote>
<p>・参画する場合の最低稼働日数  </p>
</blockquote>
<p>24h/月ぐらいでお願いしたいとの事です！<br />2h x 3day x 4week = 24h/月<br />のように1日の稼働量が多いより、日数を割り振れると理想という考えみたいです！  </p>
<p>副業が可能だった場合は、これを踏まえて気楽に考えて頂ければ助かります！！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/12/6 14:54:04</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>お、見落としてましたすみません 😭<br />詳細についてありがとうございます！一度これで副業が可能かどうか聞いてみますね！<br />しばらくおまちを。。</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/12/6 15:12:04</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>ありがとうございます！<br />承知しました！！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/12/6 15:52:27</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>とりあえず投げときました！<br />私の担当の方が忙しいっぽく今日中に回答します〜とのことですのでお待ちください！  </p>
<p>ちなみに ReSwift での設計を選んだのってもう1人のエンジニアの方なんでしょうか？<br />それですと、そちらの方の言い分がありそうで、揉めないかなってちょっと心配していますｗ</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/12/6 16:32:38</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>ReSwift の設計はもう一人の方が選びました！<br />僕も設計を変えるとしたらもう一人の方の機嫌を損ないそうですし、僕が他の案件に移動すればいいだけなんで僕が辞める事をそこまで引き留めなくていいですよ。と上司の方に言ったのですが、事情はこっちで説明するから気にしないでいいよ！と言われたので問題ないですw<br />とは言っても不満には思うかもしれないですが、僕が何か言われる可能性がある程度なので Reoさんには絶対被害が行かないようにしますので安心してください！！！  </p>
<p>ReSwift を選んだ理由も  </p>
<pre><code>- 安全にグローバル変数のような使い方ができる  
- 値の変更を全画面に一気に流すことができる  
- 使い慣れている  </code></pre><p>ぐらいで RxSwift でできる内容のことだと思いますし、今後新しいエンジニアを雇うことになった時も ReSwift経験より、RxSwift経験の方が一般的な気もする<br />のでそこまで正しい言い分はないと思います！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/12/6 17:29:19</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>なるほど！<br />結構 とはいうものの…感はありますねｗ<br />自分だったら週3勤務とかでちょっといない間に設計全部変わってたら、えってなりそうなのでｗｗ<br />多分今小林さんに抜けられるのは会社的にかなり痛い感じなんでしょうね。。。<br />なんとなく、ReSwift のプロジェクト感もわかった気がします。理由を見る感じシングルトンゴリゴリそう…<br />ちなみにプロジェクトで テストとかってされてます...かね？<br />あんまり自分もその辺強くはないんですが。。</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/12/6 17:38:14</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>僕も逆の立場なら、えっ？ってなりますねww  </p>
<p>テストはほとんど書いてないです！<br />ほとんどというのも 2. 3個くらいなのでないに等しいです！！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/12/6 17:59:30</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>そうですよね...！ 😭<br />そんで 既にできているものを壊しに行く（かつまだ設計している人もいる）状態って<br />かなり精神的負担がｗｗｗ厳しい感じします 😭<br />結構 その ReSwift の設計をみてみたいお気持ちと 小林さんと働いてみたいお気持ちがあるんですが<br />すごい気遣い症なのでその人の気持ちを考えるとおつらい感じがするんですよね ；；</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/12/6 18:09:37</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>あと Senyou からお返事いただきました！  </p>
<blockquote>
<p>まずは弊社とカジュアルにお話しする機会をいただければと！  </p>
</blockquote>
<blockquote>
<p>基本的に他のエージェントを使われている方が多いのでその辺もお気になさらないで大丈夫です！  </p>
</blockquote>
<blockquote>
<p>ご都合の良い日程を3つほどいただけますと幸いです！  </p>
</blockquote>
<p>とのことです！  </p>
<p>Zoom or Google Meet で1時間程度お話をする感じだと思います！<br />問題なさそうであれば、一度ご都合の良い日にちをいただければ！🙇‍♀️</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/12/6 18:46:50</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>確かに精神的な負担になりますよね😭<br />配慮ができていませんでした！<br />申し訳ないです！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/12/6 18:47:45</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>日程は明日、希望日を報告でも大丈夫でしょうか？</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/12/6 19:22:15</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>いえいえ私が小心者なだけなので 😭 気にしないでください！  </p>
<p>はい！全然問題ないです！<br />あと私はそのお話会には参加しないと思いますのでｗｗ🙇‍♀️すみません！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/12/6 20:53:13</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>副業の件、考えて頂いてありがとうございます！！<br />またなにか機会があって一緒に働けたら嬉しいです😊</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/12/6 20:55:23</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>Senyou とのお話しの希望日程が決まりましたらまたご連絡致しますので、お手数ですがまたお願いできますと助かります！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/12/6 22:41:01</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>Senyou 面談希望日  </p>
<pre><code>第一希望  
12月14日　13時  

第二希望  
12月15日　13時  

第三希望  
12月21日　13時  

一応時間も希望として書きましたが、希望日の午後であれば別の時間でも大丈夫です！  </code></pre><p>お手隙際に、こちらでお伝え頂けますと幸いです！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/12/7 22:12:07</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>すみません！1日死んでましたorz<br />ありがとうございます！<br />また決まり次第ご連絡させていただきます🙇‍♀️</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/12/8 9:39:48</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>お疲れ様です！<br />ありがとうございます！お手数をおかけいたします🙇‍♂️</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/12/8 12:14:07</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>お疲れ様です！お日にちいただきました！  </p>
<pre><code>12月 14日 (火曜日) · 午後1:00～2:00  
ビデオ通話のリンク: &lt;https://meet.google.com/qzn-ihgj-jwa&gt;  </code></pre><p>でよろしくお願いいたします！ 🙇‍♀️</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/12/8 12:20:25</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>日程確認しました！<br />ありがとうございます！！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/12/8 13:01:23</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>此方もよろしくおねがいしますとのことです！  </p>
<pre><code>お話に先駆けて小林さんの情報をいただきたく、  
こちらのシートにご記入をお願いできますでしょうか？  
&lt;https://docs.google.com/spreadsheets/d/1KAd-d9yo3uy-pfkO9CGt34ncEfRELUDC/edit#gid=739560566&gt;  
スキルシートなどもありましたら事前にいただけますと幸いでございます！  </code></pre><p>お忙しい中ご負担かけてしまって申し訳ないですがよろしくお願いします！<br />恐らく面談日前にはあればいいくらいのものだと思いますので！  </p>
<p>あと、Senyou とのお話をするにあたり、<br />あちらでは私本名でやっておりますので本当に今更ですが名乗っておきます！ｗｗ  </p>
<p>Reo 改め、久保 玲於奈(くぼ れおな）と言います！<br />呼び方等は今まで通りで問題ないですが、Senyouとのお話の時は 久保さんからの紹介で〜という話になるとも思いますので<br />覚えておいていただければ！ｗ</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/12/8 15:41:58</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>シートの記入とスキルシートの件承知致しました！<br />準備して当日の面談に行きたいと思います！  </p>
<p>お名前もありがとうございます！！<br />僕も自己紹介をしていない疑惑があるので念の為 ww<br />改めまして、小林 大希(こばやし だいき) と言います！<br />今後ともよろしくお願い致します😊</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/12/8 16:10:56</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>此方こそ引き続きよろしくお願いします！🙌<br />一応シートの件は記入次第、事前に私に渡していただければ横流ししますので！<br />あっでもこれだと私がシートの内容が みれてしまうんですが 大丈夫ですかね…？？</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/12/8 16:38:53</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>シートの記入、今日少しだけ忙しいので明日になってしまうかもです🙇‍♂️<br />シート内容をれおさんがみれる事については全く問題ないですので、記入が完了でき次第ご報告致します！！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/12/8 17:09:47</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>承知しました！ 急がなくて大丈夫ですのでお時間ある時にお願いします！🙇‍♀️</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/12/9 0:19:51</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>シートを記入致しました！<br />お手数ですがこちらの内容でお送り頂けますと幸いです！<br /><a href="https://docs.google.com/spreadsheets/d/1KAd-d9yo3uy-pfkO9CGt34ncEfRELUDC/edit?pli=1#gid=739560566" rel="noopener noreferrer">https://docs.google.com/spreadsheets/d/1KAd-d9yo3uy-pfkO9CGt34ncEfRELUDC/edit?pli=1#gid=739560566</a></p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/12/9 18:04:26</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>ありがとうございます！！共有しておきました！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/12/14 12:14:53</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>すみません！スプレットシートも事前提出でした！<br />13時までにお手隙な時間があればで構いませんので、こちらでお渡し頂けますと幸いです🙇‍♂️</p>
</td>
          <td>
            <a href="undefined/F02Q69MTWAK-【小林 大希】skillsheet.xlsx" target="_blank">【小林 大希】skillsheet.xlsx</a>
            </td>
        </tr>
<tr>
          <td>2021/12/14 13:59:02</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>無事面談終わりました！<br />エージェントのご紹介を頂いてありがとうございます😊</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/12/14 14:32:48</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>あ！！！ごめんなさい！！！<br />面談お疲れ様でした！遅くなって申し訳ないですが今から渡しておきます 😭 😭</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/12/14 14:35:42</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>渡しておきました… 😭  申し訳ないです紹介しておいて間にちゃんとはいれなくて...</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/12/14 14:41:24</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>いえ！自分がスキルシートの提出を事前であることを見落としてしまっていただけなので！<br />直前でのお願いで責任を感じさせてしまい、こちらこそ申し訳ないです🙇‍♂️  </p>
<p>エージェントさんもすごくいい人で楽しかったです！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/12/14 14:49:54</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>いえいえいえ 😭<br />此方こそわざわざ面談のお時間とっていただきありがとうございました！<br />ぜひ今後活用していただければ嬉しいです！<br />ちなみにお話ってどなたとされたんですか？平野さんですかね？（気になる）</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/12/14 14:54:41</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>面談してくださった方は、平野さんと代表取締役の井上さんでした！<br />れおさんとどうやって知り合ったんですか？みたいな質問があったので、メンターをお願いした経緯をお話しちゃいましたが大丈夫でしたか？？</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/12/14 15:01:25</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>全然大丈夫ですよー！<br />もう完全にいつも私がお話しする方々ですね！！ｗｗ<br />井上さん代表なのにすごいすぎる...本当にメンバー全員見てそうな感じあります 😳<br />私と小林さんは直接お話ししたことはないのに 平野さんと井上さんはお互いと直接お話ししたことある感じが<br />ちょっと面白いですねｗｗ</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/12/14 15:15:47</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>そうなんですね！<br />確かにメンターをお願いした経緯を話した時にお二方とも、めちゃめちゃ想像つくって仰ってました！！w  </p>
<p>井上さんが一人一人を見てそうな感じすごく分かります！<br />1年半お世話になっていて、ほとんど久保さんのこと知らないんですよね〜って事も話しながら笑ってましたww</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/12/14 15:31:50</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>なかなか 自分がいないところの話は恥ずかしみがありますねｗ<br />あと小林さんのメンターするようになってからそんな経ってるとは！！<br />お互い何も知らなくても全然大丈夫なの意外と不思議ですねｗｗ いつもありがとうございます！🙇‍♀️  </p>
<p>結構Senyouの紹介も、おしつけ紹介みたいになったかなーと思っていたので<br />楽しくお話しできたようで本当に良かったです…！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/12/14 15:56:19</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>でも他の人とれおさんの話をすると、れおさんってほんとに存在してるんだって実感しましたww<br />いやいや、こちらこそいつもありがとうございます！！  </p>
<p>Senyouの紹介も、急にメンターをお願いしてきたやばいやつ(笑) から、エージェントさんの紹介をして頂けるくらいになった感じがして、<br />本当に嬉しいです☺️  </p>
<p>今後ともよろしくお願いできますと幸いです！！！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/12/14 16:43:09</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>存在しますよ！！！！ｗｗ<br />平野さんからも先ほど、すごく良い方の紹介ありがとうございます！と連絡いただきました！！  </p>
<p>いまお仕事のお話になっちゃってますが、普通に質問もあればいつでも投げてくださいね！<br />此方こそ、今後ともよろしくお願いします！！🤝</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/12/14 17:06:53</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>おーよかったです！！  </p>
<p>ありがとうございます！<br />また質問でも頼らせていただきますー！！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2021/12/28 0:58:53</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>忙しい時期の質問すみません！<br /><code>barButtonItem</code> の設定をした <code>NavigationBar</code> を複数の画面で使用する時のやり方についての質問させてください！  </p>
<p>下記のような <code>UIBarButtonItem</code> を設定した <code>ViewController</code> の <code>class</code> を作成して、これを継承することで複数画面で<br />同じデザインの <code>NavigationBar</code> を使えるようにしています。<br />このように継承させることを目的とした Controller に配置したボタンのアクションがどの継承先でも同じアクションを想定(画面遷移を想定)している場合、<br />BaseViewController の中でボタンのアクションを定義するべきかなと思うのですが、その場合 ViewModel や Router などは作らず、Controller にアクションを書くべきなのでしょうか？  </p>
<p>1,BaseViewModel を作ると扱いづらい気がすること<br />2,Controller にそのままアクションを書くと設計に統一感がなくなること  </p>
<p>ViewModel を作ると 1 の懸念点が、作らないと 2 の懸念点があるなと感じてどうするべきか気になりました。<br />アクションが全く同じのコンポーネントを作成したときもどのようにするべきかなど教えて頂きたいです！  </p>
<p><code>継承させる目的のclass</code>  </p>
<pre><code>class BaseViewController: UIViewController {  
    let sideMenuButton = UIBarButtonItem()  

    override func viewDidLoad() {  
        super.viewDidLoad()  
        navigationItem.leftBarButtonItem = sideMenuButton  
    }  
}  </code></pre><p>回答は年を越してからなど、個人開発も落ち着いてからで大丈夫なのでお時間のある際に教えて頂けると幸いです！<br />よろしくお願いします！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2022/1/7 12:43:59</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>あけましておめでとうございます！！遅くなってしまい申し訳ないです！  </p>
<p>此方の質問に関しましては、おそらく答えはないかなーと思います。<br />自分の RxSwift+MVVM のプロジェクトでは、 <code>UINavigationController</code> にバナー広告を配置するのに、ご質問の件と似たような形で <code>BaseNavigationController</code> というものを定義しています。<br />この部分では ViewModel や Router を作らず、Controller だけで実装を行っています。  </p>
<p>この辺かなり難しいので、以下は個人的な考えになります！正解かは正直わかりません...！  </p>
<p>例えば今回のように <code>UINavigationBar 上にメニューボタンを置き、どこの画面からでも画面遷移する</code> の部分だけを共通化して BaseViewController 内に実装する場合、 ViewModel と Router を用意した方がいいかもしれません。  </p>
<p>何を優先するかによると思うんですが、設計を優先する場合<br />個人的には画面遷移部分は Router にまとまっていてほしいお気持ちがあって、ViewModel というよりかは Router が欲しいんですが、ViewController が直接 Router を持つのは全体の設計ルール上違うかな…と思います。<br />Viewからのアクションを受け取って Model で何かしら処理を行う必要がある場合 or 画面遷移がある場合には ViewModel を用意したいところです。  </p>
<p>あとｗ よくよく考えると私の使っている MVVM って厳密には MVVM ではないですねｗ MVVM+Router ですねｗ  </p>
<p>ただここまで書いておいてアレですが、実際には ViewModel も Router も用意せず実装しちゃいそうです。</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2022/1/7 13:33:14</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>MVVM とかのアーキテクチャを採用する時って、継承することがほとんどなくなると思うんですよね。<br />なんなら継承は良くない！使わない方がいい！っていうぐらい。。<br />でも、そういった明らかに共通した処理を各画面で書くのも違う…ので本当に難しいですよね。  </p>
<p>私の行っている広告を置いた BaseNavigationController の場合だと  </p>
<blockquote>
<p>自分の RxSwift+MVVM のプロジェクトでは、 <code>UINavigationController</code> にバナー広告を配置するのに、ご質問の件と似たような形で <code>BaseNavigationController</code> というものを定義しています。  </p>
</blockquote>
<blockquote>
<p>この部分では ViewModel や Router を作らず、Controller だけで実装を行っています。  </p>
</blockquote>
<p>FirstViewController では広告を表示 -&gt; SecondViewController では広告を非表示 といったことをしていて<br />継承した ViewController から Base を操作する必要があるんですよね。  </p>
<p>この場合がすごい難しいなーと思っていて、<br />各画面から BaseNavigationController の <code>showBannerView()</code> といったメソッドを呼ぶことになります。<br />実際に私が実装したのは以下になります。(①)  </p>
<pre><code>// SecondViewController 内  
override func viewWillAppear(_ animated: Bool) {  
    super.viewWillAppear(animated)  

    if let base = navigationController as? BaseNavigationController {  
        base.hideBannerView()  
    }  
}  

// BaseNavigationController 内  
func hideBannerView() {  
    bannerView.isHidden = false  
    UIView.animate(withDuration: 1, animations: {  
        bannerView.alpha = 0  
    }, completion: { [weak self] _ in  
        bannerView.isHidden = true  
        self?.changeSafeArea(isHidden: true)  
    })  
}  </code></pre><p>ViewModelを用意した書き方だと以下のようになるのかな？ (②)  </p>
<pre><code>// BaseNavigationController 内  
func hideBannerView() {  
    viewModel.hideBannerTrigger.accept(true)  
}  

override func viewDidLoad() {  
    super.viewDidLoad()  

    viewModel.output.isHiddenBanner  
        .bind(to: bannerViewHidden)  
        .disposed(by: disposeBag)  
}  

private var bannerViewHidden: Binder&amp;lt;Bool&gt; {  
    return .init(self) { (base, isHidden) in  
        if isHidden {  
           // アニメーションしてバナーを隠す  
        } else {  
            // アニメーションしてバナーを表示  
        }  
    }  
}  </code></pre><p>もしくは(③)  </p>
<pre><code>// SecondViewController 内  
override func viewWillAppear(_ animated: Bool) {  
    super.viewWillAppear(animated)  

    if let base = navigationController as? BaseNavigationController {  
        base.viewModel.hideBannerTrigger.accept(true)  
    }  
}  

// BaseNavigationController 内  
override func viewDidLoad() {  
    super.viewDidLoad()  

    viewModel.output.isHiddenBanner  
        .bind(to: bannerViewHidden)  
        .disposed(by: disposeBag)  
}  

private var bannerViewHidden: Binder&amp;lt;Bool&gt; {  
    return .init(self) { (base, isHidden) in  
        if isHidden {  
           // アニメーションしてバナーを隠す  
        } else {  
            // アニメーションしてバナーを表示  
        }  
    }  
}  </code></pre><p>こうやって書いていくと、書き方って本当に無限にあると思います。。。  </p>
<p>ただこの場合だと、②,③のように ViewModel を使う意味って全くないですよね。<br />バナーを隠す処理の時に何かしら Model で処理を行うわけでもなく、画面遷移等を行うわけでもないので、ただ <code>show/hide</code> させればいいだけです。ViewModel に持っていっても単にそのまま画面にまた戻すだけなので。  </p>
<p>なのでこの場合は①のようにして、特に必要ないのでViewModelも用意しません！  </p>
<p>で、この <code>ViewModel と Router がない</code> というのは、この画面から画面遷移も処理も行わず UI の表示のみを行うよ！というのがわかるようになります。<br />少し本題とはずれますが、画面遷移がない画面では Router を用意しない方が良いと思っていて（空のRouterを置かない）、こうすることで、その画面からは画面遷移がないんだなということがファイルの有無だけでわかるようになります。  </p>
<p>質問の回答をまとめると（やっとｗ）  </p>
<pre><code>- Modelでのデータ加工等の処理や画面遷移がない場合は ViewModel は用意しなくてもOK  
- 小林さんの例だと ViewModel と Router を用意してあげる方が *設計的には* 丁寧で Good  
- ただし例外的に ベースとして継承するものは画面遷移があっても ViewController だけを用意するのもアリ  
（ベースは1つだけで、コード量も多くなく、ぱっと見でわかる場合には ViewController だけのがわかりやすい）  

*まとめ*  
時と場合によります！  
私なら例外的にベースだけは ViewModel も Router も用意しないを選択するかもしれません！  
ベースで行う処理がUIに関するもの以外を含む場合には（データの取得等）ViewModelとRouterを用意します。  </code></pre><p>です！<br />全然わかりやすく回答できた気はしないですが、BaseViewModel を作ると扱いづらいと感じる場合には、コードも読みづらく保守もしづらい状態になってしまうと思うので、無理せず例外として認めてしまうのも個人的にはありだと思います！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2022/1/7 13:34:07</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>めっちゃ長くなってしまったｗ　<br />大したこと書いてないのに長々とすみません 🙇‍♀️ 全然まとまんなかった。。ｗ</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2022/1/7 17:46:45</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>すごくわかりやすいです！！  </p>
<p>設計方針は読みやすくするために決めるもので、守ろうとするためにコードが読みづらくなるなら守るべきではない。という感じですね！<br />MVVM ではあまり継承をすることは推奨されてないということも知らなかったので助かりました！<br />Router を作成するかどうかなどでそのクラスの役割を分かりやすくするなど細かいところでも可読性の配慮をするべきですね！  </p>
<p>めちゃめちゃ勉強になりました！ありがとうございます😊</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2022/1/10 15:59:08</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>よかったです 😭<br />私は Swift ではどの設計を使う場合にも継承はあまり使わない方が良いと考えています。<br />UIパーツ周りは、UIView や UIButton を継承することはよくありますし、<br />今回のようなパターンだと継承を用いる方がいいかなと思いますが<br />まずは、 これって継承じゃなくてプロトコルで書けないかな？というのを考えてみて欲しいです！  </p>
<p>こちらの記事も参考になるかなと思います！<br /><a href="https://qiita.com/onishi_820/items/045fc1c6663756bd729b" rel="noopener noreferrer">https://qiita.com/onishi_820/items/045fc1c6663756bd729b</a>  </p>
<blockquote>
<p>読みやすくするために決めるもので、守ろうとするためにコードが読みづらくなるなら守るべきではない。  </p>
</blockquote>
<p>時と場合にはよりますけどね！ｗ<br />結局保守するのは人間ですので、どれだけちゃんと設計に沿ったものでも、設計を理解した人が誰もいなかったら意味のないものだったりします。<br />特に RxSwift は、RxSwift が苦手な人からすると、この処理の後どこにいくんだろう…っていう流れがすごく理解しづらいものだったりしますしね。。<br />ただ設計ルールがないと、チームだと RxSwift を使ったり使わなかったりも起こりうるので（私の今の現場がわりとそうで...）原則設計に沿ったもので、<br />今回のように明らかに BaseViewController を見たらわかるよねというようなところでは緩めてあげればいいと思います！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2022/1/10 16:06:29</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>ちょっと SwiftLint を使う時と似ているかなと思っていて、<br />SwiftLint にも disable rules といってルールを一時的に緩めることができます。  </p>
<pre><code>// swiftlint:disable line_length  
func veryLongFunctions() {  
    // アニメーションなどの長いけど複数に分ける必要もないような内容  
}  </code></pre><p>を使ったり、  </p>
<pre><code>// ルールに従う  
struct User {  
    var userID: String  
}  

// ルールを緩めて id のみを定義する  
struct User {  
    var id: String  
}  </code></pre><p>通常は変数名は3文字以上のルールだけれど <code>id</code> は2文字でもいけるようにするといった風にできます。  </p>
<p>この場合もどちらでも特に問題にはならず、結構好みの問題にもなってくるのかなって気がしますが<br />個人的にはルールを緩めてあげる方がいいかなと思います！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2022/1/10 19:08:15</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><blockquote>
<p>私は Swift ではどの設計を使う場合にも継承はあまり使わない方が良いと考えています。  </p>
</blockquote>
<p>なるほど！処理の共通化には便利なのかな？と思っていたのですが、あまり推奨されたやり方ではないんですね！  </p>
<p>プロトコルについての理解が全然まだ浅いのですがプロトコルは、  </p>
<ul>
<li>依存性を弱める  </li>
<li>多様性を持たせる？<br />を目的として使われることが多いのかなと思っていたのですが同じ処理をまとめるような目的でも使われるのでしょうか？</li>
</ul>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2022/1/11 14:44:35</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>共通化するには継承はもちろん便利なのですが、<br />各画面で異なる実装をする必要が出てきた場合に複雑化しやすいかなーと思っています。<br />あと、実際に目に見えない実装が含まれるので見落としが発生しやすくなる問題もあります。  </p>
<p>また、継承だと1つの親しか持てませんが、プロトコルは複数を適合させることができます。<br />機能ごとにプロトコルを切り分けて、それぞれ持たせることができます。  </p>
<blockquote>
<p>同じ処理をまとめるような目的でも使われるのでしょうか？  </p>
</blockquote>
<p>プロトコルではデフォルトの処理を書くことができるので、共通化にも適しています！  </p>
<pre><code>protocol HogeProtocol {  
    func hoge()  
}  

extension HogeProtocol {  
    func hoge() {  
        // デフォルトの処理を行う  
        print("hoge")  
    }  
}  

final class ViewController: UIViewController, HogeProtocol {  

    override func viewDidLoad() {  
        super.viewDidLoad()  
        // hoge が print される  
        hoge()  
    }  
}  </code></pre><p>また、こうすることで継承とちがい、<code>viewDidLoad</code> で <code>hoge()</code> が実行されることが明示的になります。  </p>
<p>デフォルトの実装と異なることを行いたい場合には単に関数を追加してあげることで、継承でいう <code>override</code> が可能になります。  </p>
<pre><code>final class ViewController: UIViewController, HogeProtocol {  

    override func viewDidLoad() {  
        super.viewDidLoad()  
        // fuga が print される  
        hoge()  
    }  

    func hoge() {  
        print("fuga")  
    }  
}  </code></pre><p>Swift はプロトコルベースの言語になると思っているので、できる限りプロトコルを使っていくのがいいと思います！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2022/1/11 14:53:56</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>まぁでも この extension の形は結局依存しちゃう感じもしているのでほどほどのがいいのかなぁとも思います。<br />難しいですよね。。<br />共通化した方がいいのに共通化すると依存度が増してしまうので。。。</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2022/1/11 15:58:42</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>なるほど！<br />プロトコルの extension をすると、適合させたクラスで必ず定義する必要がある。<br />というルールがなくなるので継承でやるのと変わらないよな〜と思っていたのですが、プロトコルなら複数適合させられるメリットなどを考えると<br />プロトコルで行うデメリットがないですね。  </p>
<p>共通化と依存度のどちらを優先するべきかなどで、その時による感じなんですね！<br />ありがとうございます！！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2022/1/11 18:18:19</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>そうですね！<br />プロトコルで行うデメリットがあるパターンも実はありまして…<br />先ほどサンプル作ろうとして気づいたんですが<br />今回のような ナビゲーションバーにメニューを置いて、そこからの画面遷移を共通化する場合だと継承の方がいいかも…って感じなんですよね。  </p>
<p>今回やりたかった実装なんですが（これはコンパイルエラーになっちゃいます 😭 ）  </p>
<pre><code>protocol MenuNavigationItemViewType: AnyObject {  

    func setupNavigationBarMenu()  
    func onTapMenuButton()  
}  

extension MenuNavigationItemViewType where Self: UIViewController {  

    func setupNavigationBarMenu() {  
        let menuIcon = UIImage(systemName: "ellipsis")!  
        let menuButton = UIBarButtonItem(image: menuIcon, style: .done, target: self, action: #selector(onTapMenuButton))  
        navigationItem.leftBarButtonItem = menuButton  
    }  

    func onTapMenuButton() {  
        let menuViewController = MenuViewController()  
        present(menuViewController, animated: true, completion: nil)  
    }  
}  


final class FirstViewController: UIViewController, MenuNavigationItemViewType {  

    override func viewDidLoad() {  
        super.viewDidLoad()  
        // プロトコルのデフォルトの処理を使う  
        setupNavigationBarMenu()  
    }  
}  </code></pre><p><code>#selector</code> で指定する関数は <code>@objc</code> または <code>@IBAction</code> をつけないといけないんですが、これがプロトコルだと実現できません。  </p>
<blockquote>
<p>Cannot use ‘onTapMenuButton’ as a selector because protocol ‘MenuNavigationItemViewType’ is not exposed to Objective-C  </p>
</blockquote>
<p>といったエラーが出てしまいます。<br />プロトコルやら関数やらに <code>@objc</code> をつけてまわったんですがだめで、おそらく解決策も黒魔術的なものしかないので、それを使うよりかは継承をした方がいいなーって感じですね。  </p>
<p>RxSwift を使うと以下のように書けないことはないんですが、ここまでしてプロトコルにこだわる必要もあるのか？って気もしますｗ  </p>
<pre><code>import RxCocoa  
import RxSwift  

protocol MenuNavigationItemViewType: AnyObject {  

    var disposeBag: DisposeBag { get set }  
    func setupNavigationBarMenu()  
}  

extension MenuNavigationItemViewType where Self: UIViewController {  

    func setupNavigationBarMenu() {  
        let menuIcon = UIImage(systemName: "ellipsis")!  
        let menuButton = UIBarButtonItem(image: menuIcon, style: .done, target: nil, action: nil)  
        menuButton.rx.tap  
            .subscribe(onNext: { _ in  
                let menuViewController = MenuViewController()  
                self.present(menuViewController, animated: true, completion: nil)  
            })  
            .disposed(by: disposeBag)  
        navigationItem.leftBarButtonItem = menuButton  
    }  
}  

final class FirstViewController: UIViewController, MenuNavigationItemViewType {  

    var disposeBag: DisposeBag = DisposeBag()  

    override func viewDidLoad() {  
        super.viewDidLoad()  
        // プロトコルのデフォルトの処理を使う  
        setupNavigationBarMenu()  
    }  
}  </code></pre><p>なので時と場合と人による感じです！<br />書き方ってほんと∞ですね！ 🤔</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2022/1/11 21:02:53</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>サンプルまで本当に助かります😭  </p>
<p>イベントの発火はボタンタップなどのUI操作から行うことが多いのに、プロトコルの extension はそれに対応してないんですね！<br /><code>@IBAction</code> がインスタンスメソッドにのみ指定できる属性として作られているなら、プロトコルで定義したメソッドの処理は基本的に適合先のクラスで行うことが推奨されている感じなんですかね。  </p>
<p>Rxを使わない場合は、  </p>
<ul>
<li><code>@IBAction</code> などの属性が必要な関数で処理を共通化したい場合は、classの継承で作る。  </li>
<li>属性が不要な関数で処理を共通化したい場合は、プロトコルで作る。</li>
</ul>
<p>Rxを使う場合は、  </p>
<ul>
<li>基本的にはプロトコルで作る。  </li>
<li>できない理由があるなら、継承で作る。</li>
</ul>
<p>とりあえずは、こんな感じの使い分け認識にして色々作っている時に考え方を変えた方がいいなという事があったら認識を修正していこうと思います！<br />忙しくなると実装に対しての思考が浅くなってしまうのでなるべく意識してやっていきますー！！！  </p>
<p>分かりやすく回答して頂きありがとうございます！！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2022/1/11 21:23:57</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>正味 Rxじゃなくても  </p>
<blockquote>
<p><code>@IBAction</code> などの属性が必要な関数で処理を共通化したい場合は、classの継承で作る。  </p>
</blockquote>
<p>この場合は継承で問題ないと思います！！  </p>
<p>これは私の思想ってだけなので、いろんな人の protocol vs 継承の 記事とかを読んでみるのも面白いと思います！🙇‍♀️</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2022/1/11 21:45:49</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>分かりました！<br />色々な記事を読んでみます！！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2022/1/26 18:09:22</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>本番環境やステージング環境について質問です！<br />開発環境の切り替えについて調べていると Develop, Staging, Release の3つの環境を用意することが一般的みたいなのですが、<br />Develop と Staging を分ける理由がよくわかりませんでした。  </p>
<p>API のリクエストURLが下記のような感じに別れていたらそれぞれに対応するように分ければいいだけで、Develop環境やStaging環境に違いがあるわけではないのでしょうか？<br /><code>&lt;https://develop.hoge.jp/&gt;</code><br /><code>&lt;https://staging.hoge.jp/&gt;</code><br /><code>&lt;https://hoge.jp/&gt;</code></p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2022/1/31 20:14:53</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>すみません！！！忙しすぎてちょっとまじめに返事できるのが遅くなってしまいそうです！！😭😭🙇‍♀️🙇‍♀️ごめんなさい！  </p>
<p>ざっと ですが、 Developは完全に開発用でなんでもあり環境で、<br />Stagingは実際には公開しないけれどほぼReleaseと同等の環境で<br />Releaseは本番環境という認識です！  </p>
<p>ステージング環境は必須ではありませんが、より安全に本番環境での運用をするためには導入しとくといい感じですね！<br />企業規模とかだと、特に本番環境でやらかすわけにはいかないので、入れておく必要があると思います！<br />API側が特にいきなり本番環境を変更するわけにいかない場合が多く、クライアント側はたしかに向き先を変えるだけで大した違いがでることはないかもです…</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2022/1/31 20:48:33</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>お忙しい中、回答くださってありがとうございます！十分分かりやすいです😊<br />忙しい時はこちらのことは気にしないで大丈夫ですからね！！！！  </p>
<p>またレオさんが落ち着く前に質問を送ってしまうことがあるかもですが、<br />落ち着いた時に対応して頂ければ全然大丈夫ですので無理せず頑張ってください🍙！！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2022/1/31 21:09:43</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>いえいえ！むしろこちらの都合は気にせず投げていただければと思います！🙇‍♀️答えられる時に答えますので！！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2022/2/12 23:27:30</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>CoreNFC での Suicaの履歴を読み取る 参考記事の履歴データ解析の実装コードで2点分からないところがあったので質問させてください！<br />該当コード：<br /><code>*print*("年: ", Int(data[4] &gt;&gt; 1) + 2000)</code>  </p>
<p>質問：<br />1, <code>data</code> は配列ではなく <code>Data型</code> なのですがなぜ <code>data[4]</code> という書き方ができるのか<br />2, <code>data[4]</code> の 4 の部分が配列の index を指定しているわけではない場合何を示しているのか  </p>
<p>こちらお手隙の際に教えて頂けますと幸いです！！  </p>
<p>以下の記事を参考にしてました！<br /><a href="https://qiita.com/m__ike_/items/7dc3e643396cf3381167#%E5%B1%A5%E6%AD%B4%E3%81%AE%E8%A7%A3%E6%9E%90" rel="noopener noreferrer">https://qiita.com/m__ike_/items/7dc3e643396cf3381167#%E5%B1%A5%E6%AD%B4%E3%81%AE%E8%A7%A3%E6%9E%90</a></p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2022/2/14 15:34:09</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>すごく難しい話ですね…！<br /><code>data[4] &gt;&gt; 1</code>  で使われているシフト演算子で自分はプログラミングしてて使ったことないです… 🥶<br />ビット演算等の低レイヤーの処理はほとんど抽象化されて、難しいことをしない場合には<br />ほとんど触れる機会もないので、自分もちょっと理解が曖昧ですが頑張って回答します！  </p>
<p>まず <code>Data型</code> のドキュメントを見ると  </p>
<blockquote>
<p>A byte buffer in memory.  </p>
</blockquote>
<p>というすごくシンプルな説明がされています。メモリ内のバイトバッファらしいです。<br /><a href="https://developer.apple.com/documentation/foundation/data" rel="noopener noreferrer">https://developer.apple.com/documentation/foundation/data</a>  </p>
<p>説明が自分にはちょっと難しいので、丸投げですが、以下の記事がわかりやすいかな？と思います。<br /><a href="https://qiita.com/haru15komekome/items/c8d9c3a1a11f0813acdb" rel="noopener noreferrer">https://qiita.com/haru15komekome/items/c8d9c3a1a11f0813acdb</a></p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2022/2/14 15:56:08</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>ざっくりとした理解で、自分なりにも説明します！<br /><code>Data型</code> は バイトの配列で 1byte の型は <code>UInt8</code> となっています。  </p>
<p>例えば以下のようなUUIDを <code>Data</code> 型に変換してみます。  </p>
<pre><code>let uuid: String = UUID().uuidString  
let data: Data = uuid.data(using: .utf8)  </code></pre><p>以下のようにprintして中身を見てみました。  </p>
<pre><code>print("🐈‍⬛UUID: ", uuid)  
print("🐈‍⬛UUIDカウント: ", uuid.count)  
print("🐈Dataカウント: ", data?.count)  

// 結果  
🐈‍⬛UUID:  45D821C3-CB67-4BA0-86B4-3DE12D714125  
🐈‍⬛UUIDカウント:  36  
🐈Dataカウント:  Optional(36)  </code></pre><p>文字数とDataの <code>count</code> が一致するので 1文字1byteで表されていますね！  </p>
<p>実際にこのDataの中身を見てみます。これは <code>dump</code>を使ってログを出してみます。ちょっと長いですが全部貼りますｗ  </p>
<pre><code>dump(data)  

// 結果  
▿ Optional(36 bytes)  
  ▿ some: 36 bytes  
    - count: 36  
    ▿ pointer: 0x00006000001752f0  
      - pointerValue: 105553117795056  
    ▿ bytes: 36 elements  
      - 52  
      - 53  
      - 68  
      - 56  
      - 50  
      - 49  
      - 67  
      - 51  
      - 45  
      - 67  
      - 66  
      - 54  
      - 55  
      - 45  
      - 52  
      - 66  
      - 65  
      - 48  
      - 45  
      - 56  
      - 54  
      - 66  
      - 52  
      - 45  
      - 51  
      - 68  
      - 69  
      - 49  
      - 50  
      - 68  
      - 55  
      - 49  
      - 52  
      - 49  
      - 50  
      - 53  </code></pre><p>36byteの中身はそれぞれ [52, 53…]といった数字が入っていますね。  </p>
<p>ではこの data の <code>data[4]</code>をみてみます。  </p>
<pre><code>print("🐈data[4]", data?[4])  

let type = type(of: data?[4])  
print("🐈data[4]の型: ", type)  

// 結果  
🐈data[4] Optional(50)  
🐈data[4]の型:  Optional&amp;lt;UInt8&gt;  </code></pre><p>先程のDataの中身の配列のindexが4の時の値 <code>50</code> が取れていることがわかります。<br />そしてこの <code>50</code> の型は <code>UInt8</code> であることがわかります。</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2022/2/14 16:08:38</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>ようやく結論と質問の答えになりますが、  </p>
<blockquote>
<p>1, <code>data</code> は配列ではなく <code>Data型</code> なのですがなぜ <code>data[4]</code> という書き方ができるのか  </p>
</blockquote>
<p>Data型は UInt8の配列のようなものなので <code>data[4]</code> といったアクセスの仕方ができます。  </p>
<blockquote>
<p>2, <code>data[4]</code> の 4 の部分が配列の index を指定しているわけではない場合何を示しているのか  </p>
</blockquote>
<p>配列の index と同じものという認識で大丈夫だと思います！<br />これは <code>Data</code> 型の内部を見てみるとわかりやすいかなと思います。  </p>
<pre><code>    /// A type that represents a position in the collection.  
    ///  
    /// Valid indices consist of the position of every element and a  
    /// "past the end" position that's not valid for use as a subscript  
    /// argument.  
    public typealias Index = Int  </code></pre><p>Arrayの方は以下のように定義されています  </p>
<pre><code>    /// The index type for arrays, `Int`.  
    public typealias Index = Int  </code></pre><p>自分も全然理解ができていない部分で、中身見てみたらこんな感じだったよーという報告で申し訳ないです！<br />実際にそのNFCタグのシフト演算(バイナリデータの解析)部分はさっぱりです… 😇<br />何でビット演算で年月や残高が出せてしまうのか…?! できる人本当すごいですよね…</p>
</td>
          <td>
            <a href="undefined/F032X3096BC-スクリーンショット 2022-02-14 15.55.32.png" target="_blank"><img src="undefined/F032X3096BC-スクリーンショット 2022-02-14 15.55.32.png" width="150" alt="スクリーンショット 2022-02-14 15.55.32.png /></a>",<a href="undefined/F0339MLPTRP-スクリーンショット 2022-02-14 16.00.50.png" target="_blank"><img src="undefined/F0339MLPTRP-スクリーンショット 2022-02-14 16.00.50.png" width="150" alt="スクリーンショット 2022-02-14 16.00.50.png /></a>"
            </td>
        </tr>
<tr>
          <td>2022/2/14 17:20:07</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>やっぱりこういった実装はレアケースなんですね！<br /><code>Data型</code> の理解はやっぱり情報系の勉強をしないと理解できないものな感がすごい。。  </p>
<p><code>UInt型</code> についても <code>Int型</code> より扱える桁数が少ない劣化版でマシン性能が弱かった時代は、<br />こういう型を正確に使ってメモリ管理する必要があったのかな〜みたいな予想をしていたんですが思っていた以上に分からないものでしたw  </p>
<p>Data型 が UInt8 の配列だから、配列のように扱えることも自分ではずっと分からなかったと思うので助かりました！<br />色々と調べて頂きありがとうございました😊</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2022/2/15 23:42:24</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>こういった実装は IoT周りをやろうと思うと扱うことが多くなるみたいですね。。<br />Swiftではあんまり扱わないんですが、プログラミング言語の本や資格の本とかを読むと結構ビット演算も出てくるので<br />一応頭の片隅に置いておいてもいいのかな?とも思います！<br />結局自分も何も理解はできてないんですし使う機会もないんですけどねｗ  </p>
<p>他言語ではポインタとかを利用することも多いのですが、Swiftだと全然使うことがないので<br />低レイヤを意識しないでもアプリを作ることができる Swift は個人的に素晴らしいと思っています! 🎉</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2022/2/17 0:40:54</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>なるほど！<br />最近 swift の表面的な部分しかわからない状態はそろそろまずいなと思って基本情報技術の本を読むことにしましたw  </p>
<p>あと忙しそうな時にわざわざ報告するのも悪いかなと思ったのですが、れおさんに紹介頂いたエージェントさんで副業が決まり先週ぐらいからスタートしました！<br />Senyou所属の人でチームを組んで案件を受ける方式ということだったので面白そうだと思って受けてみましたw  </p>
<p>ということで改めてエージェントの紹介ありがとうございました！！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2022/2/20 15:30:53</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>返事が遅くて申し訳ないです！🐢🙇‍♀️<br />平野さんからもご報告があり案件参画のことは知っていましたが、そういう形態だったんですね！<br />こちらこそ紹介しておいて実は、最近現場を辞めてしまっていたりします。。(ちょっとメンタルやってしまい😢)<br />でも、その時のサポートもすごく良くしてもらって、Senyou はとても良いエージェントさんだと思いますので<br />本当に紹介できてよかったです。<br />あと、自分がこうして現場辞めてしまって Senyou にご迷惑ばかりおかけしてしまっていたので、<br />小林さんが案件をとってくれているのが内心すごくホッとするというか、助かっております。。<br />こちらこそ、Senyou で案件をとっていただきありがとうございました！🙇‍♀️<br />今後ともよろしくお願いいたします！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2022/2/20 17:19:45</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>メンタルが一番大事ですからね！！<br />れおさんはすごく責任感が強くて、完璧主義で、相手目線で物事を考える人っていう印象が強くて負担を抱えてしまいそうな気がするので本当に無理なさらずです！！！！<br />Senyouさんとの最初の面談の時もれおさんの事をすごく褒めてましたし迷惑なんて感じてないと思いますし気にしすぎないで大丈夫だと思いますよ☺️<br />(こんな事を言うとプレッシャーになってしまうかもですが、、、、)  </p>
<p>僕も精神的に潰れていたことがあって、気持ちがわかるというと失礼かもですが辛い状態であることは分かるので、<br />れおさんの働きやすい環境の現場などを焦らず見つけられると嬉しいですね🎉</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2022/2/20 19:24:52</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>ありがとうございます😭<br />メンタル面の不安もあり、しばらく私はお仕事してないと思うので(別件で死ぬほどコードは書いてるんですが)、療養しておきます！🙇‍♀️<br />質問等は全然答えられるはずなので此方のメンタル具合もお気になさらず！  </p>
<p>あと地味に SwiftUI も少し書くようになってきたので、そのへんも対応できるようになるかと思います！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2022/2/20 20:27:06</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>ありがとうございます！！<br />SwiftUI もまだチュートリアルを少しだけ触れたぐらいですが勉強する時に頼らせて頂けると助かります🙇‍♂️</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2022/3/12 21:21:11</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>SwiftUI について2点質問です！<br />1, 公式チュートリアルでこのようなコードが出てきたのですが、<code>\id</code> は <code>Landmark</code>クラスの <code>id</code> を識別子に指定をするという意味でしょうか？<br />2, <code>Landmark</code> に <code>Identifiable</code> を準拠させると <code>id</code> の引数がいらなくなるみたいなのですが、<code>Identifiable</code>に準拠させるだけで <code>id</code> を識別子として扱うという仕様になっているのでしょうか？  </p>
<pre><code>List(landmarks, id: \.id) { landmark in  
   LandmarkRow(landmark: landmark)  
}  </code></pre><pre><code>struct Landmark: Hashable, Codable {  
    var id: Int  
    var name: String  
}  </code></pre><p>お手隙の際にご対応お願い致します！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2022/3/13 1:41:37</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>まず <code>List</code> を扱う場合には 2つの方法があります！  </p>
<ol>
<li><code>質問1</code> のようにデータとともに各要素を識別するためのキーパスを渡す方法  </li>
<li><code>質問2</code> のようにデータ自体の型を <code>Identifiable</code> に適合する方法<br />この2つの方法を理解するには <code>Hashable</code> と <code>Identifiable</code> について理解しておく必要があります…！</li>
</ol>
<p>その前に <code>\.id</code> という書き方について<br />これは <code>KeyPath</code> というものになります。↓公式ドキュメント<br /><a href="https://developer.apple.com/documentation/swift/swift_standard_library/key-path_expressions" rel="noopener noreferrer">https://developer.apple.com/documentation/swift/swift_standard_library/key-path_expressions</a>  </p>
<p>この書き方の <code>List</code> は  </p>
<pre><code>List(landmarks, id: \.id) { landmark in  
   LandmarkRow(landmark: landmark)  
}  </code></pre><p>以下のイニシャライザを使っています。  </p>
<pre><code>public init&amp;lt;Data, ID, RowContent&gt;(_ data: Data, id: KeyPath&amp;lt;Data.Element, ID&gt;, selection: Binding&amp;lt;Set&amp;lt;SelectionValue&gt;&gt;?, @ViewBuilder rowContent: @escaping (Data.Element) -&gt; RowContent) where Content == ForEach&amp;lt;Data, ID, RowContent&gt;, Data : RandomAccessCollection, ID : Hashable, RowContent : View  </code></pre><p>ちょっとシンタックスハイライトもないので見づらいですが…<br /><code>List</code> で引数に渡す <code>id</code> は <code>KeyPath&amp;lt;Data.Element, ID&gt;</code> という型になっています。  </p>
<p>条件を整理すると<br />• <code>Data</code> は <code>RandomAccessCollection</code> に適合する型 (配列等)<br />• <code>ID</code> は <code>Hashable</code> に適合する<br />• <code>RowContent</code> は <code>View</code> に適合する<br />これらを使って <code>List</code> 内では  <code>ForEach</code> を行っています。  </p>
<p>上記の条件より、 <code>KeyPath</code> で指定するのは小林さんの認識通り  </p>
<blockquote>
<p><code>\id</code> は <code>Landmark</code>クラスの <code>id</code> を識別子に指定をするという意味でしょうか？  </p>
</blockquote>
<p>これで正しいということになります！  </p>
<p><code>Landmark</code> のプロパティを利用できるので、 <code>\.name</code> も指定できます。<br />ただしここに指定する <code>id</code> の大事な条件として、<em>他と被らないユニークなIDである必要</em>があります。  </p>
<p>試しにこちらのコードを実行してみるとわかるのですが( <code>Landmark</code> の <code>id</code> がどちらも <code>0</code> になっています)  </p>
<pre><code>struct ContentView: View {  

    var landmarks = [Landmark(id: 0, name: "0番目"), Landmark(id: 0, name: "1番目")]  

    var body: some View {  
        VStack {  
            List(landmarks, id: \.id) { landmark in  
                VStack(alignment: .leading) {  
                    Text("id: \(landmark.id)")  
                    Spacer()  
                    Text("name: \(landmark.name)")  
                }  
            }  
        }  
    }  
}  </code></pre><p>この状態で実行すると、配列のデータの区別ができず、結果としてどちらも同じデータの表示がされてしまいます。</p>
</td>
          <td>
            <a href="undefined/F036T549KDY-スクリーンショット 2022-03-13 1.40.18.png" target="_blank"><img src="undefined/F036T549KDY-スクリーンショット 2022-03-13 1.40.18.png" width="150" alt="スクリーンショット 2022-03-13 1.40.18.png /></a>"
            </td>
        </tr>
<tr>
          <td>2022/3/13 1:50:15</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><blockquote>
<p>この2つの方法を理解するには <code>Hashable</code> と <code>Identifiable</code> について理解しておく必要があります…！  </p>
</blockquote>
<p>長くなってしまいましたが、次にこの部分についてです！  </p>
<p>先ほどの説明にもあった <code>ID は Hashable に適合する</code> 必要があります。<br />ざっくりと <code>Hashable</code> は他と区別ができるもの という認識で大丈夫です。(ハッシュ値の利用ができる型)  </p>
<p><code>Identifiable</code> の中身を見ると以下の様な定義がされています。  </p>
<pre><code>public protocol Identifiable {  

    /// A type representing the stable identity of the entity associated with  
    /// an instance.  
    associatedtype ID : Hashable  

    /// The stable identity of the entity associated with this instance.  
    var id: Self.ID { get }  
}  </code></pre><p><code>Identifiable</code> に適合する型は、<code>id</code> という名の <code>Hashable</code> を持ちます。  </p>
<p>質問1の方法ではその場で指定をしていましたが、<code>Identifiable</code> の方に適合する(つまりユニークなIDをもつ)ようにすれば、特に <code>id</code> を指定しなくても List で使えるようになります。  </p>
<p>なのでこちらも  </p>
<blockquote>
<p><code>Identifiable</code>に準拠させるだけで <code>id</code> を識別子として扱うという仕様になっているのでしょうか？  </p>
</blockquote>
<p>この認識で正しいです！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2022/3/13 1:55:19</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>個人的に SwiftUIにおける List って <code>RxDataSources</code> にすごく似ていると思っています！<br /><code>RxDataSources</code> ではリストで表示するオブジェクトを <code>IdentifiableType</code> に適合する必要がありましたしね！  </p>
<pre><code>// MARK: - IdentifiableType  

extension Article: IdentifiableType {  

    var identity: String {  
        return uid  
    }  
}  </code></pre><p>あと SwiftUI をやる際におすすめサイト貼っておきます！公式ドキュメント + サンプルな感じでオススメです！<br /><a href="https://swiftontap.com" rel="noopener noreferrer">https://swiftontap.com</a></p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2022/3/13 11:25:16</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>まだチュートリアル程度のものだからかもですが SwiftUI ではだいぶ楽に TableView を作れるようになってそうですね！<br />おすすめのサイトもありがとうございます🙇‍♂️  </p>
<p>ちなみに れおさんが SwiftUI を使うときは UIKit と共存して使ってますか？</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2022/3/13 14:47:38</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>作るのは楽ですが痒いところには届かない感じはしてますw  </p>
<p>自分が最近作ったプロジェクトでは、ほぼSwiftUI だけで、まだ SwiftUI が対応してなくてUIKitを使うしかない部分の実装(具体的にはUIDocumentPickerViewControllerの実装等)ではUIKitを使っています！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2022/3/13 15:27:40</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>なるほど、ありがとうございます！<br />SwiftUIだけで既になにか作ってるんですね！  </p>
<p>しばらくは Swiftをメインに勉強を続けますが、SwiftUIも少しずつやっていくのでまた教えて頂けると助かります🙇‍♂️</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2022/3/13 15:45:28</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>リリースしない系のアプリでUIのクオリティは低めなので実践でやったってほどではないんですけどね🙃  </p>
<p>自分も今回の小林さんの質問のおかげで理解深められましたので、こちらこそ今後ともよろしくお願いします！！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2022/4/1 22:34:34</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>SceneDelegate について質問です！<br />れおさんは SceneDelegate を使ってなかったかと思うのですが使用しない理由は何かありますか？<br />プロジェクトを作成したときに勝手に作成されるものだと思うので削除する作業をしていることを考えると少し気になりました！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2022/4/2 11:54:34</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>そういえば自分はわざわざ削除してましたね ！  </p>
<p>iPad で１つのアプリで複数のWindowを同時に立ち上げられる機能(<code>Multiple Windows</code>)をご存知でしょうか？？<br />SceneDelegate はその機能に対応するために必要なんですね。  </p>
<p>なので SceneDelegate を使わないケースは以下の3点ぐらいかな？と思います。  </p>
<pre><code>SceneDelegate を使わないケース  

1. そもそも iPad 向けにアプリをリリースしない場合  
2. iPad 向けでも Multiple Windows 機能を使わない場合  
3. iOS13 未満への対応をしたい  </code></pre><p>今だと、基本的に iOS13未満を含んでアプリを作り始めることもほとんどないので3の理由はもうないですね。<br />1に関しては、iOSでも今後実装されるかもですし、iPad向けにリリースしないから SceneDelegate は使わないでおこ〜ってのはちょっと違うかもしれませんね。。  </p>
<p>なので結局、2の Multiple Windows を使うかどうか、だと思います。<br />SwiftUIのプロジェクトだと、SceneDelegate は最初から作られず、<br />Multiple Windows を使いたい場合のみに使う必要が出てくる形になります。  </p>
<p>個人的には、以前からやっている <code>AppDelegate</code> のみを使った方法が実装しやすいし、<code>SceneDelegate</code> を使うメリットはあんまりないよねって感じですね。<br />SceneDelegateがいることで、AppDelegateの関数が呼ばれなくて(SceneDelegate側が呼ばれて)、あれ？ってなるよりかは、<br />SceneDelegate を削除する手間の方がかからないかなと。  </p>
<p>スゴイ曖昧ではありますが、わざわざ消す理由もほとんどない感じです！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2022/4/2 13:38:33</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>なるほど、<code>Multiple Windows</code> は知りませんでした！  </p>
<blockquote>
<p>iOSでも今後実装されるかもですし、iPad向けにリリースしないから SceneDelegate は使わないでおこ〜ってのはちょっと違うかもしれませんね。。  </p>
</blockquote>
<blockquote>
</blockquote>
<p>もし仕事で0 ~ 1 開発をするということになった場合は <code>SceneDelegate</code> は残しておいた方が、<code>Multiple Windows</code> 対応するという仕様に変わった時に対応しやすかったりする感じで、個人的な開発で <code>Multiple Windows</code> を使わない場合は好みで問題なさそうですね！  </p>
<p>ありがとうございます！！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2022/8/4 13:47:12</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>こんにちはー！<br />久しぶりに質問をさせてください！  </p>
<p>tableView または collectionView の cell追加時のアニメーションの実装はどのように実装してますか？<br />れおさんのアプリのように追加時や削除時などでアニメーションをつけたいです！</p>
</td>
          <td>
            <video controls width="150"><source src="undefined/F03S38ZL6UW-iOS の画像.MP4" type="video/mp4" /></video><a href="undefined/F03S38ZL6UW-iOS の画像.MP4" target="_blank">iOS の画像.MP4</a>
            </td>
        </tr>
<tr>
          <td>2022/8/4 15:31:21</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>お久しぶりです！(改めてw)<br />ちょっと今日はゆっくり自分のコード見る時間が取れなさそうなので明日見させていただきます！すみません！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2022/8/4 22:31:48</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>全然大丈夫です！<br />お時間に余裕がある時にお願いできれば嬉しいです！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2022/8/5 20:38:11</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>まず、OKAIMOでは UIKit のみで実装しています！(RxSwift は使っていません！)  </p>
<p><code>UITableView</code> と <code>UICollectionView</code> のどちらを扱う場合でも実装方法はほぼ同じで、データを更新する際に <code>reloadData()</code> ではなく、以下のメソッドを使うことによってアニメーションを行うことができます。  </p>
<pre><code>// UITableView の場合  
insertRows(at indexPaths: [IndexPath], with animation: UITableView.RowAnimation)  
deleteRows(at indexPaths: [IndexPath], with animation: UITableView.RowAnimation)  
moveRow(at indexPath: IndexPath, to newIndexPath: IndexPath)  
reloadRows(at indexPaths: [IndexPath], with animation: UITableView.RowAnimation)  
// section も同様に用意されている  
insertSections(_ sections: IndexSet, with animation: UITableView.RowAnimation)  

// UICollectionView の場合  
insertItems(at indexPaths: [IndexPath])  
deleteItems(at indexPaths: [IndexPath])  
moveItem(at indexPath: IndexPath, to newIndexPath: IndexPath)  
reloadItems(at indexPaths: [IndexPath])  

// section も同様に用意されている  </code></pre><p>この動画部分(メモの追加/削除)は UITableView で実装されています。<br />UICollectionView の場合だとアニメーションの指定がなく、fade のみになります。(OKAIMOの上部ラベル部分では collectionView の方を使っているので、そこでアニメーションの確認をしていただければ🙇‍♀️！）  </p>
<p>アニメーションをするためには、データ更新前と後での差分を見る必要があるので実装がかなり複雑になっちゃいます。<br />上記のメソッド群を使う場合には、 <code>beginUpdates</code> と <code>endUpdates</code> で囲むか、 <code>performBatchUpdates</code> の中で行う必要があります。  </p>
<pre><code>var dataList = ["ねこ", "いぬ"]  

// アニメーションなし  
dataList.append("きりん")  
tableView.reloadData()  

// アニメーションあり(方法１)  
dataList.append("きりん")  
let indexPath = IndexPath(item: 2, section: 0)  
tableView.beginUpdates()  
tableView.insertRows(at: [indexPath], with: .left)  
tableView.endUpdates()  

// アニメーションあり(方法2)  
dataList.append("きりん")  
let indexPath = IndexPath(item: 2, section: 0)  
performBatchUpdates({  
    tableView.insertRows(at: [indexPath], with: .left)  
})  </code></pre></td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2022/8/5 20:42:18</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>通常のUIKit だけでやる場合だと結構複雑になりますが、 RxSwift を使う場合には<br /><code>RxTableViewSectionedAnimatedDataSource</code> を使ってあげればほぼ自動でアニメーションをつけることができます。  </p>
<pre><code>private lazy var animationConfiguration: AnimationConfiguration = {  
    return AnimationConfiguration(insertAnimation: .fade, reloadAnimation: .none, deleteAnimation: .fade)  
}()  
private lazy var dataSource = RxTableViewSectionedAnimatedDataSource&amp;lt;FoldersSectionModel&gt;(animationConfiguration: animationConfiguration, configureCell: configureCell)  </code></pre><p>みづらくて申し訳ないですが、 上記のように <code>AnimationConfiguration</code> に 追加する時/更新する時/削除する時のアニメーションを指定してあげることでアニメーションを追加することができます 👍</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2022/8/5 20:48:15</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>一応自分は UIKit の場合でも複雑にならないような extension を持っていまして、リロードしたい時は以下のように一文で使えるようにしています！  </p>
<pre><code>collectionView.reloadData(with: BatchUpdates.setup(oldItems: oldLabels, newItems: labels), target: 0)  </code></pre><p>少し古いコードにはなるのですが、もし使いたい場合には、この extension も共有します！🙇‍♀️</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2022/8/5 20:49:55</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>久々で解答難しいwわかりづらかったらすみません！気軽に聞いてください！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2022/8/5 21:45:06</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>久々でも感動的な分かりやすさです！！！<br />UITableViewはデフォルトでアニメーションの種類が結構あるんですね！<br />ちなみにカスタムアニメーションを設定することは、できないもしくはかなり難しいみたいな感じでしょうか？  </p>
<p>extensionの共有に関しては、考えたロジックを簡単にもらうのは申し訳ないので一旦自分で考えてみて、<br />あまりいい感じにまとまらなかった時にまた相談をさせて頂けますと嬉しいです🙇‍♂️</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2022/8/6 19:29:01</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>よかったです😌 extension の件は了解しました！  </p>
<p>カスタムアニメーションについては、やったことがなかったので、私も少し調べてみました。  </p>
<p>UICollectionView の場合は <code>UICollectionViewFlowLayout</code> のカスタムクラスを作ることで、自由にアニメーションをさせることができます。  </p>
<p>自分も初めてだったので、とりあえず検索手順含めて紹介しておきますね！  </p>
<ol>
<li><code>collectionView animation insert</code> で検索  </li>
<li>一番上のStackOverFlow をみてみる（<a href="https://stackoverflow.com/questions/16690831/uicollectionview-animations-insert-delete-items" rel="noopener noreferrer">https://stackoverflow.com/questions/16690831/uicollectionview-animations-insert-delete-items</a> ）  </li>
<li><code>UICollectionViewFlowLayout</code> のカスタムクラスを作って <code>initialLayoutAttributesForAppearingItemAtIndexPath</code> と <code>finalLayoutAttributesForDisappearingItemAtIndexPath</code> を使えば良いらしい！  </li>
<li>実際にカスタムクラスを作って少し触ってみる  </li>
<li>何もわからない… 😢  </li>
<li>GitHub で実際に使っている人を探してみる  </li>
<li>GitHub 内の検索で <code>initialLayoutAttributesForAppearingItemAtIndexPath</code> で検索  </li>
<li>アニメーションっぽいのを書いてる人をみつける (<a href="https://github.com/jBanda96/iosPruebas/blob/164fa27eb835875eb1924a041c6e8025f719fa55/Pruebas/CollectionViews/Layout/FlowLayout.swift" rel="noopener noreferrer">https://github.com/jBanda96/iosPruebas/blob/164fa27eb835875eb1924a041c6e8025f719fa55/Pruebas/CollectionViews/Layout/FlowLayout.swift</a>)  </li>
<li>とりあえずコピペして使ってみる  </li>
<li>使い方がわからんかったので<br />こんな感じで調べました👍</li>
</ol>
<p>UICollectionView でカスタムアニメーションを使う場合は <code>performBatchUpdates</code> で囲む必要はないっぽく代わりに <code>UIView.animate</code> でアニメーション時間を指定してあげる形になるようです！  </p>
<pre><code>// この場合はデフォルトのフェードアニメーションが採用される  
let indexPath = IndexPath(item: 2, section: 0)  
performBatchUpdates({  
    collectionView.insertItems(at: [indexPath])  
})  

// UICollectionViewFlowLayout で指定したアニメーションを使用する場合  
let indexPath = IndexPath(item: 2, section: 0)  
UIView.animate(withDuration: 0.25) {  
    self.collectionView.insertItems(at: [indexPath])  
}  </code></pre><p>UITableView の方は調べられてないですが、UITableView でカスタムアニメーションを頑張るよりかは、<br />カスタムアニメーションを使う場合には そもそも UITableView ではなく UICollectionView を使う選択をするほうがいいのかなって気もします！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2022/8/6 20:06:09</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>調べ方までありがとうございます！！<br />セルアニメーションの実装はなかなか見つからなかったので助かりました☺️  </p>
<p><code>UICollectionViewFlowLayout</code> は色々とセルに対しての役割があるんですね！<br />教えて頂いたものを触れてみます！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2022/8/6 20:27:42</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>そうですね！また触ってみてわからないところがあれば聞いてください！😉</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2023/1/1 18:26:51</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>明けましておめでとうございます！<br />質問が不定期すぎて本当に申し訳ないです🙇‍♂️  </p>
<p>今年もよろしくお願い致します！！！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2023/1/1 18:52:44</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>あけましておめでとうございます！！🎍🌅<br />昨年はSenyou紹介受けてくれたりありがとうございました！<br />あれ以来もしかしてすごい忙しくなってしまった…？とちょっと心配してますw  </p>
<p>是非今年は質問じゃなくても雑談とか近況とかお話ししてくれれば嬉しいです〜😌<br />今年もよろしくお願い致します！🙇‍♀️</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2023/1/1 20:37:45</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>こちらこそ Senyouの紹介を頂きありがとうございました！<br />初めての副業でいい経験になりました！  </p>
<p>ご心配お掛けしてすみません🙇‍♂️<br />作りたいものがなかったり、Swift以外の言語ができないので他の勉強もするべきかみたいに考えていたら急にやる気が出なくなってしまって、、、  </p>
<p>最近うるおいらんどにプロフィールが載ってる事を知って、花譜さん好きなんだ〜と思ってたので質問以外でも話せるのは嬉しいです😊</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2023/1/1 23:58:06</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>なるほどなるほど〜<br />最近私は Android アプリ作っててほとんどSwift には触れてないんですけど、<br />新しいことやるとアイディア湧いたり、逆にやっぱり Swift っていい言語でiOSアプリいいなー！ってなれたりするので、個人的には新しいことやってみるのもいいかもしれないですね！😉  </p>
<p>あのプロフィールすごい恥ずかしくなるw<br />花譜ちゃん良いですよね！最近あんまり追えてないんですがライブまでいったことありますww☺️☺️</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2023/1/2 13:31:25</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>Androidもいいですね！少しGo言語に興味があるので触ってみようかと思います🙌  </p>
<p>プロフィール面白かったですww<br />メンターをお願いした時に自信がなさそうだった理由がなんとなく分かって、それ含めてレオさんにお願いしてよかったと改めて思いました☺️  </p>
<p>ぼくも最近はあまりですが、雛鳥とかは定期的に聴きたくなります！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2023/1/2 15:26:33</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>いいですね！！興味あるものなんでも手出しちゃった方が楽しいと思います！  </p>
<p>恥ずかしいwwでもそう思っていただけたならwよかったです🙃  </p>
<p>雛鳥いいですよね！私はやっぱり心臓と絡繰🫀が一番好きかな〜<br />当時の花譜ちゃん中学生→高校生ぐらいの歳だったのに最近高校も卒業してて結構ビビりますw</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2023/1/2 23:35:51</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>声と歌い方が好きで花譜さんの自身の曲あまり知らないのかもですw<br />中学生時代から活動していた事も知りませんでした！<br />心臓と絡繰 聞いてみたいと思います！  </p>
<p>また質問や近況報告などさせてもらいたいなと思いますのでよろしくお願いします😇⛩️🙏</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2023/1/4 0:08:44</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>ぜひ！聞いてみてください〜☺️  </p>
<p>はいー！こちらこそ本年もよろしくお願いします！🫡</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2023/6/29 19:40:14</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>お久しぶりです！<br />時間が空いてしまってすみません、、また質問をさせて頂きたくご連絡させて頂きました。  </p>
<p>アプリ起動時、条件に応じて最初に表示する画面を替える実装(初回時のみ初期設定画面表示など)について質問をさせてください！  </p>
<pre><code>初回起動時：  
アプリ起動 -&gt; 初期設定画面 -&gt; 通常起動時の初回画面  

通常起動時：  
アプリ起動 -&gt; 通常起動時の初回画面  </code></pre><p>のような動作を実装したいのですが、こちらは  </p>
<pre><code>アプリ起動 -&gt; RootViewController -&gt; 条件判定 -&gt; 初期設定画面表示 -&gt; 初期設定画面を閉じる -&gt; 通常起動画面表示  
                                          -&gt; 通常起動画面表示  </code></pre><p>のような実装になるのでしょうか？  </p>
<p>添付した初回起動時の動作だと初期設定画面を閉じる時には既に通常起動画面が表示されているように見えるので、  </p>
<pre><code>アプリ起動 -&gt; 通常起動画面 -&gt; 条件判定 -&gt; 初期設定画面 -&gt; 初期設定画面を閉じる  </code></pre><p>のようにも添付した動画では見えるのですがアプリ起動時に初期設定画面が表示される際に通常起動画面が少しも見えないので、<br />こちらも違うようにも感じました。<br />どのように添付した動画のような動作の実装ができるかご教授頂けますと幸いです！  </p>
<p>度々不定期での質問となり申し訳ないのですが、お手隙の際にご対応お願い致します🙇‍♂️</p>
</td>
          <td>
            <video controls width="150"><source src="undefined/F05ETRPQJE7-初回起動時.MP4" type="video/mp4" /></video><a href="undefined/F05ETRPQJE7-初回起動時.MP4" target="_blank">初回起動時.MP4</a>,<video controls width="150"><source src="undefined/F05EM9WHPHU-通常起動時.MP4" type="video/mp4" /></video><a href="undefined/F05EM9WHPHU-通常起動時.MP4" target="_blank">通常起動時.MP4</a>
            </td>
        </tr>
<tr>
          <td>2023/6/29 22:16:03</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>ご無沙汰です！🙇‍♀️お元気でしたか？  </p>
<p>早速ですが質問の回答です！<br />添付していただいた動画のように実装する方法は小林さんのおっしゃる通り、2種類やり方があります！  </p>
<p>① rootViewController の設定時点で条件分岐  </p>
<pre><code>アプリ起動 -&gt; RootViewController -&gt; 条件判定 -&gt; 初期設定画面表示 -&gt; 初期設定画面を閉じる -&gt; 通常起動画面表示  
                                          -&gt; 通常起動画面表示  </code></pre><p>② 通常起動画面を開いてから条件分岐  </p>
<pre><code>アプリ起動 -&gt; 通常起動画面 -&gt; 条件判定 -&gt; 初期設定画面 -&gt; 初期設定画面を閉じる  </code></pre><p>①, ②のどちらでも実装は可能となります。  </p>
<h2 id="1の場合"><a class="anchor" aria-hidden="true" tabindex="-1" href="#1の場合"><svg class="octicon octicon-link" viewBox="0 0 16 16" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>1の場合</h2>
<p>まず①の場合は、以下の手順3 の部分が肝になります。  </p>
<pre><code>1. rootViewController に 初期設定画面を設定  
2. 起動後すぐに初期設定画面を開く  
2. 初期設定画面のはじめるボタンを押すと初期設定画面を閉じる 👈  
3. 通常起動画面が表示される  </code></pre><p>動画はフェードアウトするアニメーションにより 初期設定画面 -&gt; 通常起動画面で移動していたので、<br />以下のように <code>modalPresentationStyle</code> を変更して画面遷移を行います。  </p>
<pre><code>// 2. はじめるボタンタップ時  
@IBAction func onTapStartButton(_ sender: UIButton) {  
    let mainViewController = MainViewController(nibName: "MainViewController", bundle: nil)  
    mainViewController.modalPresentationStyle = .overCurrentContext  
    mainViewController.view.alpha = 0  
    present(mainViewController, animated: false) {  
        UIView.animate(withDuration: 0.4) {  
            mainViewController.view.alpha = 1  
        }  
    }  
}  </code></pre><p>これで  </p>
<h2 id="の場合"><a class="anchor" aria-hidden="true" tabindex="-1" href="#の場合"><svg class="octicon octicon-link" viewBox="0 0 16 16" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>②の場合</h2>
<p>続いて②の場合は、以下の手順の2が肝となります。  </p>
<pre><code>1. rootViewController には通常起動画面を設定 (固定）  
2. 起動後、通常起動画面から初期設定画面を表示 👈  
3. はじめるボタンを押すと初期設定画面を閉じる  
4. 通常起動画面が表示される  </code></pre><p>手順2の部分で 通常起動画面 -&gt; 初期設定画面 に画面遷移する時に <code>present(viewController, animated: false)</code> を指定して<br />アニメーションをしないようにします。  </p>
<pre><code>override func viewDidAppear(_ animated: Bool) {  
    super.viewDidAppear(animated)  

    if !finishedOnboarding {  
        let viewController = OnboardingViewController(nibName: "OnboardingViewController", bundle: nil)  
        viewController.modalPresentationStyle = .fullScreen  
        viewController.modalTransitionStyle = .crossDissolve  
        // 開く時はアニメーションを無しにする  
        present(viewController, animated: false)  
    }  
}  </code></pre><p>これにより アプリ起動時に初期設定画面が表示される際に通常起動画面が見えないようにできます！  </p>
<blockquote>
<p>のようにも添付した動画では見えるのですがアプリ起動時に初期設定画面が表示される際に通常起動画面が少しも見えないので、  </p>
</blockquote>
<blockquote>
<p>こちらも違うようにも感じました。  </p>
</blockquote>
<p>またこの場合、手順3で画面を閉じる時は単に <code>dismiss(animated: *true*)</code> をすれば、上記コードの<br /><code>viewController.modalTransitionStyle = .crossDissolve</code> により動画のようなフェードで閉じることができます。</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2023/6/29 22:22:32</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>どちらの方法でも良いと思いますし、他にもやり方はあると思いますが<br />私個人的には ①の <code>rootViewController</code> に設定する時点で条件分岐する方がいいかなと思います！<br />メインの画面は肥大になっていっちゃうことも多いので、<br />初期設定画面を出したかどうかを判定するのは外に出してしまって、<br />メインの画面は初期設定画面について知らない方が責務が切り分けられるかな？と思います！  </p>
<p>もし 求めている回答が SwiftUI だった場合は ちょっと 回答考え直します！🙇‍♀️</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2023/6/30 0:29:38</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>ご無沙汰です！！変わりなく元気です！<br />プログラミングのモチベーション低下とインボイス制度とかで自分の技量でエンジニアとして稼いでいけるか不安を感じて、<br />積立NISAや投資の基礎知識についての本を読んだりしてましたww<br />その結果稼ぐ力がないと投資も何もできないと思って戻ってきました！  </p>
<p>ご回答ありがとうございます！<br />swiftでの実装方法の回答で大丈夫です！  </p>
<h2 id="1の場合-の"><a class="anchor" aria-hidden="true" tabindex="-1" href="#1の場合-の"><svg class="octicon octicon-link" viewBox="0 0 16 16" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>1の場合 の</h2>
<blockquote>
</blockquote>
<pre><code>1. rootViewController に 初期設定画面を設定  </code></pre><p>についてなのですが、こちらは RootViewControllerクラスみたいなものを作成して、<br />AppDelegateの window?.rootViewController = RootViewController() を設定して、<br />RootViewControllerの中で、条件を分岐し 初期設定画面に遷移させる。という認識でしょうか？  </p>
<p>それと初期設定画面をアプリ起動時に表示する場合、通常起動画面は初期設定画面を親コントローラーとして表示することになるかと思うのですが、<br />アプリの起動時の状況によって通常起動画面の親コントローラーが変わってしまうことは気にしなくても大丈夫でしょうか？  </p>
<p>初回起動の場合：<br />• RootViewController<br />    ◦ 初期設定画面<br />        ▪︎ 通常起動画面<br />通常起動の場合：<br />• RootViewController<br />    ◦ 通常起動画面<br />お手隙の際にご確認お願い致します🙇‍♂️</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2023/7/1 5:37:52</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>お元気でなによりです！（変な時間に返信すみません！）<br />そうだったんですね！自分の周りもそういうのわりとちゃんとしててちょっと焦りますww  </p>
<blockquote>
<p>その結果稼ぐ力がないと投資も何もできないと思って戻ってきました！  </p>
</blockquote>
<p>これめっちゃ真理というか、投資系にも怪しいものがいっぱいあるなかで<br />これできる小林さんはめっちゃ安心感ありますね☺️！  </p>
<blockquote>
</blockquote>
<pre><code>1. rootViewController に 初期設定画面を設定  </code></pre><blockquote>
<p>についてなのですが、こちらは RootViewControllerクラスみたいなものを作成して、  </p>
</blockquote>
<blockquote>
<p>AppDelegateの window?.rootViewController = RootViewController() を設定して、  </p>
</blockquote>
<blockquote>
<p>RootViewControllerの中で、条件を分岐し 初期設定画面に遷移させる。という認識でしょうか？  </p>
</blockquote>
<p>まずはこちらですが、<code>UIViewController</code> のサブクラスを作るというよりかは、単に条件に対して設定する <code>rootViewController</code> を変更する形になります。  </p>
<pre><code>import UIKit  

class SceneDelegate: UIResponder, UIWindowSceneDelegate {  

    var window: UIWindow?  

    func scene(_ scene: UIScene, willConnectTo session: UISceneSession, options connectionOptions: UIScene.ConnectionOptions) {  
        guard let scene = (scene as? UIWindowScene) else { return }  

        let window = UIWindow(windowScene: scene)  
        let rootViewController: UIViewController  
        // FIXME: UserDefaults 等で管理  
        let isFinishedOnboarding = true  
        if isFinishedOnboarding {  
            rootViewController = MainViewController(nibName: "MainViewController", bundle: nil)  
        } else {  
            // 初回起動時のみ  
            rootViewController = OnboardingViewController(nibName: "OnboardingViewController", bundle: nil)  
        }  
        window.rootViewController = rootViewController  
        self.window = window  
    }  
}  </code></pre><p>条件分岐が少ない場合には👆のように <code>SceneDelegate</code> (もしくは <code>AppDelegate</code> )内にて書いちゃっていいと思います！  </p>
<p>もし条件が増えそうだなって場合には次のように <code>ApplicationCoordinator</code> というクラスを用意するのがおすすめです。  </p>
<pre><code>import UIKit  

final class ApplicationCoordinator {  

    private let window: UIWindow  
    private let finishedOnboardingKey = "finishedOnboardingKey"  

    private var isInitial: Bool {  
        return UserDefaults.standard.bool(forKey: finishedOnboardingKey)  
    }  

    init(window: UIWindow) {  
        self.window = window  
    }  

    func start() {  
        let viewController: UIViewController  

        if isInitial {  
            // 初期設定画面を表示  
            viewController = OnboardingViewController(nibName: "OnboardingViewController", bundle: nil)  
        } else {  
            // 通常起動画面を表示  
            viewController = MainViewController(nibName: "MainViewController", bundle: nil)  
        }  

        window.rootViewController = UINavigationController(rootViewController: viewController)  
        window.makeKeyAndVisible()  
    }  
}  </code></pre><p>この <code>ApplicationCoordinator</code> を <code>SceneDelegate</code> 内にて以下のようにして使うことができます。  </p>
<pre><code>import UIKit  

class SceneDelegate: UIResponder, UIWindowSceneDelegate {  

    var window: UIWindow?  

    func scene(_ scene: UIScene, willConnectTo session: UISceneSession, options connectionOptions: UIScene.ConnectionOptions) {  
        guard let scene = (scene as? UIWindowScene) else { return }  

        let window = UIWindow(windowScene: scene)  
        self.window = window  

        // ApplicationCoordinator を使って最初に表示する画面を起動する  
        let applicationCoordinator = ApplicationCoordinator(window: window)  
        applicationCoordinator.start()  
    }  
}  </code></pre><blockquote>
<p>それと初期設定画面をアプリ起動時に表示する場合、通常起動画面は初期設定画面を親コントローラーとして表示することになるかと思うのですが、  </p>
</blockquote>
<blockquote>
<p>アプリの起動時の状況によって通常起動画面の親コントローラーが変わってしまうことは気にしなくても大丈夫でしょうか？  </p>
</blockquote>
<p>これは結構難しい問題ですよね。。<br />たまにプロジェクト内で  <code>rootViewController</code> を探索してとってくるような extension を使っている人もいますが<br />そういう場合には多分影響を受けちゃうので、ちょっと注意が必要ですね。  </p>
<p>でも、基本的には親コントローラーが変わることで影響が受けないようになっているべきなので<br />そういう場合はむしろ その extension は使わないように設計を考え直した方がいいと思います。  </p>
<p>なので、 私としての回答は 気にしなくても大丈夫 👍 です！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2023/7/1 13:08:22</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>ご回答ありがとうございます😊  </p>
<blockquote>
<p>基本的には親コントローラーが変わることで影響が受けないようになっているべきなので  </p>
</blockquote>
<blockquote>
<p>そういう場合はむしろ その extension は使わないように設計を考え直した方がいいと思います。  </p>
</blockquote>
<p>こちらについても納得です！  </p>
<p>続けざまの質問になってしまって申し訳ないのですが、<br />UserDefaultでのフラグ管理ではなく APIでフラグを管理している場合、<br />通信処理が入るので AppDelegateや SceneDelegateで rootViewControllerの設定を行うことが難しいかと思うのですが、<br />その場合は通常起動画面は初期設定画面の他に適当なコントローラーを作成し、<br />そのコントローラーでAPIからフラグ取得 -&gt; 通常起動画面は初期設定画面のどちらかに画面遷移みたいな実装になりますか？？</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2023/7/3 1:05:09</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>そうですね、そうなると <code>LaunchViewController</code> みたいな UIViewController を作っちゃった方がいいかもしれないですね！  </p>
<p>一応 あの <code>LaunchScreen.storyboard</code> という起動時に開かれる画面があるので<br />通信処理をするまでは 何も設定せず、通信処理をした後に <code>window.rootViewController = ...</code> をしてみたらどうなるんだろう？<br />ってのをやってみました。  </p>
<p><code>通信中</code> と書かれているのが <code>LaunchScreen.storyboard</code> 上に置いたラベルで、その後の <code>はじめる</code> ボタンが置いてあるのが実際に通信処理後に表示したい UIViewController になります。  </p>
<p>一回黒く暗転してしまう という問題がありますが、もしこれを解決することができれば作らなくてもできる方法はあるのかな？って気もします。  </p>
<p>どう設計するかによってしまうんですが、もし <code>LaunchViewController</code> を作る場合、通信中にはなにかしらの画面が表示されることになりますよね。  </p>
<pre><code>①  
window.rootViewController = LaunchViewController()  

②  
LaunchViewController 内で通信処理  
isInitial -&gt; OnboardingViewController() // 初期設定画面  
!isInitial -&gt; MainViewController() // 通常起動画面  

③  
isInitial == false だったので LaunchViewController -&gt; MainViewController に画面遷移  </code></pre><p>この②の間も何か画面を表示しなきゃならない状態になるんですよね。<br />でもそこはまぁ <code>LaunchScreen.storyboard</code> と全く同じ画面を出しておけばいいと思います！  </p>
<p>自分なら  </p>
<ol>
<li>通信処理をした後に <code>window.rootViewController = ...</code> をする  </li>
<li><code>LaunchViewController</code> 的なのを作って、そこから画面遷移する<br />だと 2 で実装するかなぁって感じです！正解はあんまりなさそうｗ🤔</li>
</ol>
</td>
          <td>
            <a href="undefined/F05ESJW5E4X-IMB_ncwW2G.GIF" target="_blank">IMB_ncwW2G.GIF</a>
            </td>
        </tr>
<tr>
          <td>2023/7/3 22:05:04</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>なるほど！<br />連続した質問でお手数をおかけ致しました🙇‍♂️<br />参考にさせて頂きます！ありがとうございます！！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2023/9/4 21:30:11</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>Senyouさんからの紹介で副業を始めました！<br />ただの近況報告ですw</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2023/9/4 21:36:53</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>おお！そうなんですね！<br />もしかしてあの案件かなって思い当たる節があるんですがそれですかねw ライブ配信系のところ🧐</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2023/9/4 22:02:37</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>ライブ配信のところです！<br />アプリ自体が最近の流行りみたいな内容な気がして面白そうなので受けてみました！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2023/9/4 22:13:15</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>やっぱりあの案件ですか！自分は受けられなかったんですが気になってはいたのでw<br />アプリ内容的に結構いろんな技術見れそうで勉強になりそうでちょっと羨ましいです！🫣</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2023/9/4 23:51:27</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>僕も勉強になりそうだと思って期待してます！<br />今回は近況報告でした笑  </p>
<p>また質問などある時によろしくお願いします！！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2023/9/5 19:03:26</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>はい！近況報告ありがとうございました！<br />質問も雑談もいつでもお待ちしております〜😌</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2024/1/4 12:52:18</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>ご挨拶遅れました。<br />以前うるおいランドのサイトを見た際に出身が石川県と書いてあった覚えがあり、<br />ご挨拶を控えさせて頂いておりました。。  </p>
<p>れおさんや身近な人が被害に遭っていないことをお祈りしておりますが、<br />地元の被害などでも辛い状況の可能性が考えられましたので、<br />忙しい状況でご迷惑になっていないことを願いつつご連絡をさせて頂きました🙇‍♂️</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2024/1/6 1:57:45</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>小林さんあけましておめでとうございます！<br />こちらは無事です！家族も無事です！<br />ご心配いただきありがとうございます😭  </p>
<p>実家は被災地となってしまったのですが、私自身は関東にいるのでみんなと同じくネットで近況を見守っているだけの状況になってますね…<br />2024年大変な始まりとなってしまいましたがお互い乗り切っていきましょう…！<br />今年もよろしくお願いいたします！🙇‍♀️</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2024/1/7 19:00:31</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>実家が被災地になってしまったことは寂しいですね。。<br />れおさんや家族が無事で本当によかったです☺️  </p>
<p>2024年はこれからいい方向に進めるように頑張りましょう！！！<br />こちらこそ、今年もよろしくお願い致します🙇‍♂️</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2024/3/6 23:57:51</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>&lt;@U017VC4LL7L&gt;<br />お久しぶりです！<br />SwiftUIのプレビューがエラーになってしまい原因が分からず思い当たることがございましたら教えて頂きたく質問をさせて頂きます🙇‍♂️  </p>
<p>◯ 環境  </p>
<ul>
<li>M1 Mac  </li>
<li>MacOS Ventura 13.6.1  </li>
<li>Xcode ver15.0</li>
</ul>
<p>◯ エラーが起きる条件  </p>
<ul>
<li>XcodeのBuild SettingsのProduct Nameを DebugとReleaseで別の名前にする (添付画像)<br />(xcconfigで設定した場合も同様)</li>
</ul>
<p>◯ エラー内容  </p>
<ul>
<li>スニペットで貼ります。</li>
</ul>
<p>こちらお手隙の際にご確認頂けますと幸いです！<br />よろしくお願い致します！</p>
</td>
          <td>
            <a href="undefined/F06N0GNBZHC-image.png" target="_blank"><img src="undefined/F06N0GNBZHC-image.png" width="150" alt="image.png /></a>"
            </td>
        </tr>
<tr>
          <td>2024/3/6 23:58:40</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>プレビューのエラーに表示される内容になります。</p>
</td>
          <td>
            <a href="undefined/F06N49X2KEZ-エラー内容.swift" target="_blank">エラー内容.swift</a>
            </td>
        </tr>
<tr>
          <td>2024/3/7 10:40:41</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>お久しぶりです！🫡  </p>
<p>質問の件ですが、新規プロジェクトで再現することができました。<br />まだエラー自体の解決をしたわけではないんですが、気になる点があったので共有しておきますね！  </p>
<p>◯ Configuration の設定について<br />エラーが起きる条件として提示していただいた以下の条件なんですが  </p>
<blockquote>
<p>・XcodeのBuild SettingsのProduct Nameを DebugとReleaseで別の名前にする (添付画像)  </p>
</blockquote>
<blockquote>
<p>(xcconfigで設定した場合も同様)  </p>
</blockquote>
<p>そもそも <code>Product Name</code> って変える必要があるのかな？と思っています。<br />自分のプロジェクトを見てみたんですが、 <code>Product Name</code> を変えていることがなかったので気になりました。  </p>
<p>ちなみにリリース環境とデバッグ環境を xcconfig で設定する場合では自分は以下のように設定しています。  </p>
<pre><code>//  
//  Debug.xcconfig  
//  SampleProject  
//  
//  Created by Reo on 2023/12/26.  
//  

// Configuration settings file format documentation can be found at:  
// &lt;https://help.apple.com/xcode/#/dev745c5c974&gt;  

// もし CocoaPods を使う場合は Configuration に合わせた include が必要  
#include "Pods/Target Support Files/Pods-SampleProject/Pods-SampleProject.debug.xcconfig"  
// Bundle ID の変更で別のアプリとして認識させる  
PRODUCT_BUNDLE_IDENTIFIER = xyz.uruly.SampleProject.debug  
// 実際にアイコンの下に表示される名前  
INFOPLIST_KEY_CFBundleDisplayName = [Debug]サンプル  
// フラグによりコードの切り替えを可能にする (#if DEBUG ~~ #endif)  
SWIFT_ACTIVE_COMPILATION_CONDITIONS = DEBUG  
// Firebase などの設定  
FIREBASE_FILE_PATH = GoogleService-Info-debug.plist  </code></pre><p>例えばアプリ名だけを変えたい場合だと <code>Info.plist</code> の方の <code>Bundle Display Name</code> を変えるだけで十分です。(xcconfig のファイルだと <code>INFOPLIST_KEY_CFBundleDisplayName</code> )  </p>
<p>異なるビルド構成にして別アプリとして区別したい場合には、 <code>PRODUCT_BUNDLE_IDENTIFIER</code> を変更して区別するのがよいんじゃないかな？と思います。  </p>
<p>Product Name を変えた場合のエラーを解決する方法ではないのですが、もしできるようなら Product Name を変えない方針でもいいんじゃないのかな？と思います！むしろダメなパターンがあれば、教えてください...！(CIとかは全く詳しくないので😢)  </p>
<p>でも すでに参画してるプロジェクトがそうだった場合は変えるわけにもいかず...っていうパターンもあると思うので Product Name を変えた状態でプレビュー表示する方法も少し調査してみますね！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2024/3/7 13:49:24</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>&lt;@U017VC4LL7L&gt;<br />ありがとうございます！！  </p>
<blockquote>
<p>そもそも <code>Product Name</code> って変える必要があるのかな？と思っています。  </p>
</blockquote>
<p>xcconfigでビルド環境を分ける方法を調べた時に <code>Product Name</code> を変更している記事を見ていたので必要かと思い変更しておりました。<br />なので <code>Product Name</code> を変更しなくてはいけない理由は特になかったです！<br /><code>INFOPLIST_KEY_CFBundleDisplayName</code> でアプリ名を変更するだけで現状問題なさそうです！  </p>
<blockquote>
<p>すでに参画してるプロジェクトがそうだった場合は変えるわけにもいかず...っていうパターンもあると思うので Product Name を変えた状態でプレビュー表示する方法も少し調査してみますね！  </p>
</blockquote>
<p>お気遣い頂きありがとうございます😊<br />Product Nameを変更しなければいけない状況ではないため、こちらについての調査は大丈夫です！<br />自分も時間がある時に優先度低く調べてみようかと思います！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2024/3/7 14:16:11</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><blockquote>
<p>なので <code>Product Name</code> を変更しなくてはいけない理由は特になかったです！  </p>
</blockquote>
<p>よかったです！<br />ちょっと調べた感じ、解決策がそこしかなかったのでもし強い理由があったら結構困ってましたｗｗ  </p>
<p>ちなみに最近私が使っているビルド環境の設定方法は以下の記事の方法です！<br />こちらも是非参考にしてみてください〜🙇‍♀️<br /><a href="https://zenn.dev/satococoa/articles/b873b96b6dd81d" rel="noopener noreferrer">https://zenn.dev/satococoa/articles/b873b96b6dd81d</a></p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2024/3/7 15:29:15</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>参考サイトについてもありがとうございます！<br />あとすみません、Edit Schemeで Build Configurationを Releaseに設定した Schemeを選択した状態だと、<br />プレビューが表示されないのですがこちらについての対処方法などもご存知でしたら教えて頂きたいです🙇‍♂️</p>
</td>
          <td>
            <a href="undefined/F06NBLUEP51-run.png" target="_blank"><img src="undefined/F06NBLUEP51-run.png" width="150" alt="run.png /></a>"
            </td>
        </tr>
<tr>
          <td>2024/3/8 9:47:41</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>Swift UI のプレビューは Release 用の Configuration を使っていると利用できませんね！<br />対処法は Preview を利用したい時は Debug で利用するしかないです。。  </p>
<p>具体的には <code>Optimization Level</code> (<a href="https://qiita.com/shiz/items/b8d5126210de736d7986#optimization-mode|最適化レベル" rel="noopener noreferrer">https://qiita.com/shiz/items/b8d5126210de736d7986#optimization-mode|最適化レベル</a>) が関係していて、2つのScheme でビルド方法が異なるため、Release に設定している場合は利用できないようです。（正直私も記事を読んでもそうなんだーぐらいの認識です）  </p>
<p>Release では使えないよーというのはこちらのフォーラムに書いてありました！<br /><a href="https://forums.developer.apple.com/forums/thread/649814" rel="noopener noreferrer">https://forums.developer.apple.com/forums/thread/649814</a>  </p>
<p>ちなみに Release を設定している場合にも この <code>Optimization Level</code> を <code>No Optimization</code> に設定してあげることでプレビューは表示されるようになりますが、変えない方がいいかも？と思います！</p>
</td>
          <td>
            <a href="undefined/F06NBA7E8AJ-スクリーンショット 2024-03-08 9.40.46.png" target="_blank"><img src="undefined/F06NBA7E8AJ-スクリーンショット 2024-03-08 9.40.46.png" width="150" alt="スクリーンショット 2024-03-08 9.40.46.png /></a>"
            </td>
        </tr>
<tr>
          <td>2024/3/8 12:24:02</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>そういうものなんですね！<br />ありがとうございます！  </p>
<p>フォーラムの共有と回避策についてもありがとうございます🙇‍♂️</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2024/8/5 23:50:02</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>お久しぶりです！<br />RxSwiftの動作で分からないところがあり質問をさせてください🙏  </p>
<p>○ 起きているバグ<br /><code>getMemberListTrigger</code> を発火させても処理が流れないことがある。<br />アプリ起動後に1,2秒待ってからこの画面に遷移した際に再現しやすい。  </p>
<p>○ 正しく動作する時のdebugログ  </p>
<pre><code>2024-08-05 23:11:34.725: 🐶 3 -&gt; subscribed  
2024-08-05 23:11:34.728: 🐶 2 -&gt; subscribed  
2024-08-05 23:11:34.728: 🐶 1 -&gt; subscribed  
2024-08-05 23:11:34.732: 🐶 subscribeonの前 -&gt; subscribed  
2024-08-05 23:11:34.735: 🐶 shouldUpdate -&gt; subscribed  
2024-08-05 23:11:34.737: 🐶 shouldUpdate -&gt; Event next(())  
2024-08-05 23:11:34.737: 🐶 subscribeonの前 -&gt; Event next(())  
2024-08-05 23:11:34.737: 🐶 1 -&gt; Event next(())  
2024-08-05 23:11:34.742: 🐶 2 -&gt; Event next([])  
2024-08-05 23:11:34.743: 🐶 3 -&gt; Event next(())  </code></pre><p>失敗する時のdebugログ  </p>
<pre><code>2024-08-05 23:10:33.857: 🐶 3 -&gt; subscribed  
2024-08-05 23:10:33.857: 🐶 2 -&gt; subscribed  
2024-08-05 23:10:33.858: 🐶 1 -&gt; subscribed  
2024-08-05 23:10:33.864: 🐶 shouldUpdate -&gt; subscribed  
2024-08-05 23:10:33.866: 🐶 shouldUpdate -&gt; Event next(())  
2024-08-05 23:10:33.875: 🐶 subscribeonの前 -&gt; subscribed  </code></pre><p>○ 分かっていること<br /><code>getMemberListTrigger</code> に <code>.subscribe(on: ConcurrentDispatchQueueScheduler(qos: .background))</code> をつけない場合はバグが発生しない<br />(ちなみに .subscribe(on: ) をつけている理由は、flatMap内の <code>self.memberUseCase.getMemberList()</code> は Realmから取得しているのですがメインスレッドの必要がないので付けてみました)  </p>
<p>○ 期待すること  </p>
<ul>
<li>なぜ <code>.subscribe(on: ConcurrentDispatchQueueScheduler(qos: .background))</code> をつけると、<br /><code>getMemberListTrigger</code> が発火しないのかについて教えて頂きたいです！</li>
</ul>
<p>不定期の質問で申し訳ないのですが、<br />お時間のある時で大丈夫ですのでご教授頂けますと幸いです！</p>
</td>
          <td>
            <a href="undefined/F07FJPE9CV8-コード.swift" target="_blank">コード.swift</a>
            </td>
        </tr>
<tr>
          <td>2024/8/7 16:51:06</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>お久しぶりです！お返事遅れてしまってすみません！<br />とりあえず頂いたコードを動かしてみたんですが、まだ失敗するパターンにまだ遭遇できていないので<br />もう少し詳しく教えていただけると嬉しいです！<br />◯欲しい情報<br />• <code>MemberListViewModel()</code> を生成している場所<br />• もしDIとかで注入している場合は <code>ViewController</code> を含めてインスタンスを生成しているところ<br />• 画面遷移の方法 (アプリ起動後に1,2秒待ってからこの画面に遷移した際 が <code>present</code> なのか <code>navigationController</code> なのか タブ切り替えとかなのかそれ以外なのかが分かればもう少し原因を特定できそう)<br />◯所感<br />いただいたログ的には、ライフサイクル的な問題が関与しているんじゃないかな？と思っています。<br />失敗ログを見る感じ、以下の <code>MemberListViewModel</code>の <code>init</code> で設定している <code>getMemberListTrigger</code> の設定が終わる前に、<code>shouldUpdate</code> が発火してしまっている状態だと思うんですね。  </p>
<pre><code>2024-08-05 23:10:33.857: 🐶 3 -&gt; subscribed  
2024-08-05 23:10:33.857: 🐶 2 -&gt; subscribed  
2024-08-05 23:10:33.858: 🐶 1 -&gt; subscribed  
2024-08-05 23:10:33.864: 🐶 shouldUpdate -&gt; subscribed  
2024-08-05 23:10:33.866: 🐶 shouldUpdate -&gt; Event next(())  
2024-08-05 23:10:33.875: 🐶 subscribeonの前 -&gt; subscribed       // ここでようやく `getMemberListTrigger` の登録が完了しているため  </code></pre><p>なので <code>getMemberListTrigger</code> の登録が確実に終わったタイミングで <code>shouldUpdate</code> から 流してあげることでバグは起きなくなるんじゃないかなと思います。  </p>
<p>◯ debugログについて<br /> <code>debug()</code> ってどうして <code>3-&gt;2-&gt;1</code>の順番なんだろう？ってことと、どうして発火しなくても呼ばれているのかを ChatGPTに聞いてみました。(最近 RxSwift を私自身全然やってなくてこれってこんなんのだっけ？ってなったのでｗ）  </p>
<pre><code>順番が 3 -&gt; 2 -&gt; 1 となる理由:  
各 .debug() オペレーターが配置された位置に関係なく、Observable チェーンの末尾から順番に .subscribe() が実行されます。これは、RxSwift の Observable チェーンが上流から下流に流れるためです。つまり、.bind(to: memberListRelay) から .subscribe(on: ConcurrentDispatchQueueScheduler(qos: .background)) まで、下流から上流へ順番に .subscribe() が実行され、その時点で .debug() がログを出力します。  

debug が呼ばれている理由:  
PublishRelay はサブスクリプションが行われた時点で Observable のチェーンが作成され、.subscribe() メソッドが呼び出されます。このため、トリガーが発火していない状態でも subscribe のログが出力されます。  </code></pre><p>なのでデバッグログ的には以下の部分がセットで、この状態ではじめて <code>getMemberListTrigger</code> が使える状態になったとみなして良さそうです。  </p>
<pre><code>2024-08-07 16:34:39.257: 🐶 3 -&gt; subscribed  
2024-08-07 16:34:39.263: 🐶 2 -&gt; subscribed  
2024-08-07 16:34:39.263: 🐶 1 -&gt; subscribed  
2024-08-07 16:34:39.264: 🐶 subscribeonの前 -&gt; subscribed  </code></pre><p>で、改めて失敗するときのログを見てみると、<code>getMemberListTrigger</code> の登録が完了する前に 🐶 <code>shouldUpdate -&gt; Event next(())</code> でイベントを流してしまっているのがわかります。  </p>
<p><code>getMemberListTrigger</code> に <code>.subscribe(on: ConcurrentDispatchQueueScheduler(qos: .background))</code> をつけない場合はバグが発生しないとのことですが<br />バックグラウンドスレッドで <code>getMemberListTrigger</code> を登録していることで少しこの登録自体も少し遅れてしまっているのかもしれませんね！  </p>
<p>◯まとめ<br />今いただいた情報的には、このバグを解決するために <code>.subscribe(on: ConcurrentDispatchQueueScheduler(qos: .background))</code> の記述をなくすことより、ライフサイクルの見直しをした方がいいんじゃないかなって気がしています！  </p>
<p>先ほど書いたViewModelの生成箇所等の情報いただければ、もう少しアドバイスできるかもしれないので、必要であればください！🙇‍♀️(全然この回答で満足いただければ提供なしでも大丈夫です！）</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2024/8/7 18:45:52</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>ご回答頂きありがとうございます！！<br />自分の環境でも再現する時は連続でするのですがしないときはなかなかしないといった頻度です！<br />正しい動作とバグ発生時の動作の動画を添付させて頂きます🙏<br />(リストが表示されている方が正しい動作です)  </p>
<p><em>◯ 欲しい情報への回答</em>  </p>
<blockquote>
<p>• <code>MemberListViewModel()</code> を生成している場所  </p>
</blockquote>
<p>DIなどはしておらず MemberListViewControllerのインスタンス変数の定義時に定義と同時にインスタンス化も行っております。  </p>
<pre><code>final class MemberListViewController: BaseViewController {  
    private let viewModel = MemberListViewModel()  
    private let disposeBag = DisposeBag()  
      
    override func viewDidLoad() {  
        super.viewDidLoad()  
        setupObserver()  
    }  

    private func setupObserver() {  
        viewModel.memberListObservable  
            .bind(to: memberListBinder)  
            .disposed(by: disposeBag)  
                  
        viewModel.shouldUpdate  
            .filter { $0 }  
            .map { _ in Void() }  
            .debug("🐶 shouldUpdate")  
            .bind(to: viewModel.getMemberListTrigger)  
            .disposed(by: disposeBag)  
    }  
}  </code></pre><blockquote>
<p><code>ViewController</code> を含めてインスタンスを生成しているところ  </p>
</blockquote>
<p><code>MemberListViewController</code> のインスタンスを生成しているところは遷移元画面(<code>HomeViewController</code>)のボタンをタップしたタイミングで生成しております。  </p>
<pre><code>final class HomeViewController: BaseViewController {  
    private let viewModel = HomeViewModel()  
    private let disposeBag = DisposeBag()  

    override func viewDidLoad() {  
        super.viewDidLoad()  
        setupNavigationBar()  
    }  

    private func setupNavigationBar() {  
        navigationItem.title = R.string.localizable.homeTitle()  
          
        let memberListBarButtonItem = UIBarButtonItem(image: UIImage(systemName: "list.clipboard"), style: .plain, target: nil, action: nil)  
        memberListBarButtonItem.let { it in  
            it.tintColor = R.color.color_white_FFFFFF()  
            it.rx.tap  
                .bind(to: transitionMemberListBinder)  
                .disposed(by: disposeBag)  
            navigationItem.rightBarButtonItem = memberListBarButtonItem  
        }  
    }  
}  

// MARK: - Binder  

extension HomeViewController {  
    var transitionMemberListBinder: Binder&amp;lt;Void&gt; {  
        Binder(self) { _self, _ in  
            let memberListViewController = MemberListViewController()  
            let naviMemberList = UINavigationController(rootViewController: memberListViewController)  
            naviMemberList.modalPresentationStyle = .fullScreen  
            _self.present(naviMemberList, animated: true)  
        }  
    }  
}  </code></pre><blockquote>
<p>画面遷移の方法  </p>
</blockquote>
<p>こちらは present遷移をしております。  </p>
<blockquote>
<p><code>debug()</code> ってどうして <code>3-&gt;2-&gt;1</code>の順番なんだろう？ってことと、どうして発火しなくても呼ばれているのか  </p>
</blockquote>
<p>RxSwiftの理解が乏しすぎて疑問を持つこともできなかったです！ww<br />勉強になります！！  </p>
<blockquote>
<p><code>getMemberListTrigger</code> の登録が完了する前に 🐶 <code>shouldUpdate -&gt; Event next(())</code> でイベントを流してしまっているのがわかります。  </p>
</blockquote>
<p>やっぱりsubscribeされる前にイベントを流してることが問題ですよね。<br /><code>MemberListViewModel</code> のインスタンス化は <code>ViewController</code> の変数定義の箇所で行っているのでinitのタイミングと同じという認識をしていて、<br /><code>MemberListViewModel</code> のinit内で問題の <code>Observable</code> の <code>subscribe</code> をしているので、 <code>shouldUpdate</code> のイベントが先に流れる理由が理解できずという状態になっております。  </p>
<p>お手数をお掛けいたしますが追加情報も含め分かることなどございましたらご教授頂けますと幸いです🙇‍♂️<br />部分的なコードだと分かりづらいかと思いますのでgitなどでプロジェクトごとお渡しすることも可能です！<br />必要であればおっしゃって頂けましたら共有をさせて頂きます！</p>
</td>
          <td>
            <video controls width="150"><source src="undefined/F07G8FPPA01-正しい動作.mp4" type="video/mp4" /></video><a href="undefined/F07G8FPPA01-正しい動作.mp4" target="_blank">正しい動作.mp4</a>,<video controls width="150"><source src="undefined/F07FF9678KZ-バグ動作.mp4" type="video/mp4" /></video><a href="undefined/F07FF9678KZ-バグ動作.mp4" target="_blank">バグ動作.mp4</a>
            </td>
        </tr>
<tr>
          <td>2024/8/8 17:36:38</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>追加情報ありがとうございます！  </p>
<p>◯ライフサイクルの問題??<br />うーん、正直なんでだろうって気はしますね😢  </p>
<blockquote>
<p>やっぱりsubscribeされる前にイベントを流してることが問題ですよね。  </p>
</blockquote>
<blockquote>
<p><code>MemberListViewModel</code> のインスタンス化は <code>ViewController</code> の変数定義の箇所で行っているのでinitのタイミングと同じという認識をしていて、  </p>
</blockquote>
<blockquote>
<p><code>MemberListViewModel</code> のinit内で問題の <code>Observable</code> の <code>subscribe</code> をしているので、 <code>shouldUpdate</code> のイベントが先に流れる理由が理解できずという状態になっております。  </p>
</blockquote>
<p>先に <code>MemberListViewModel</code> のインスタンス生成しているので、明らかに <code>viewDidLoad</code> の前にセットアップをしているはず...<br />なのでライフサイクルの問題ってのは違いそうですね。  </p>
<p>◯ <code>subscribe(on:)</code> について<br />原因を調べているときに、Stack Overflow で <code>subscribe(on:)</code> を使っていて困っている人がいました。<br />この人は、バックグラウンドスレッドにしているのに重い処理をするとUIが固まってしまう...という問題にあたり、回答として <code>observe(on:)</code> を使えばいいよと言われています。小林さんの場合もこれで解決できそうな予感...！<br /><a href="https://stackoverflow.com/questions/65109846/how-to-perform-rxswift-in-the-background" rel="noopener noreferrer">https://stackoverflow.com/questions/65109846/how-to-perform-rxswift-in-the-background</a>  </p>
<p>◯ <code>subscribe(on:)</code>　と  <code>observe(on:)</code> との違い<br />この違いについては、以下の記事を読んでみたんですが、難しい！<br /><a href="https://medium.com/eureka-engineering/rxswift%E3%81%AB%E3%81%8A%E3%81%91%E3%82%8B%E3%83%9E%E3%83%AB%E3%83%81%E3%82%B9%E3%83%AC%E3%83%83%E3%83%89%E3%81%AE%E7%90%86%E8%A7%A3%E3%82%92%E6%B7%B1%E3%82%81%E3%82%8B-scheduler%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6-2471ec76e518|https://medium.com/eureka-engineering/rxswift%E3%81%AB%E3%81%8A%E3%81%91%E3%82%8B%[…]2%8B-scheduler%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6-2471ec76e518" rel="noopener noreferrer">https://medium.com/eureka-engineering/rxswift%E3%81%AB%E3%81%8A%E3%81%91%E3%82%8B%E3%83%9E%E3%83%AB%E3%83%81%E3%82%B9%E3%83%AC%E3%83%83%E3%83%89%E3%81%AE%E7%90%86%E8%A7%A3%E3%82%92%E6%B7%B1%E3%82%81%E3%82%8B-scheduler%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6-2471ec76e518|https://medium.com/eureka-engineering/rxswift%E3%81%AB%E3%81%8A%E3%81%91%E3%82%8B%[…]2%8B-scheduler%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6-2471ec76e518</a>  </p>
<p>なので実際に動かしてみて、検証してみました。  </p>
<p>まず、期待する挙動は、「RealmからのMemberの取得をバックグラウンドスレッドで非同期に行い、取得できたら、メインスレッドでUI上にMemberの情報を表示する」だと思います。  </p>
<p>また <code>MemberUseCase</code> では流石に大変なのでRealm入れずに適当に以下のようなコードで検証していますｗ  </p>
<pre><code>final class MemberUseCase {  

    static let shared = MemberUseCase()  
      
    private let shouldUpdateRelay: BehaviorRelay&amp;lt;Bool&gt; = .init(value: true)  

    var shouldUpdate: Observable&amp;lt;Bool&gt; {  
        shouldUpdateRelay  
            .share()  
    }  
      
    func getMemberList() -&gt; Observable&amp;lt;[Member]&gt; {  
        // 3秒待ってみる  
        Thread.sleep(forTimeInterval: 3)  
        let memberList = [  
            Member(id: UUID().uuidString, name: "たこやき"),  
            Member(id: UUID().uuidString, name: "かき氷"),  
            Member(id: UUID().uuidString, name: "りんごあめ")  
        ]  
          
        return .just(memberList)  
    }  
}  </code></pre><p>🟡 検証1: <code>subscribe(on:)</code> を使った場合  </p>
<pre><code>    init() {  
        getMemberListTrigger  
            .debug("🐶 subscribeonの前")  
//            .observe(on: ConcurrentDispatchQueueScheduler(qos: .background))           
            .subscribe(on: ConcurrentDispatchQueueScheduler(qos: .background))    // subscribe(on:)の場合  
            .debug("🐶 1")  
            .flatMap { [weak self] _ -&gt; Observable&amp;lt;[Member]&gt; in                   // このflatMapはメインスレッドで動いている!  
                guard let self = self else { return .empty() }  
                return self.memberUseCase.getMemberList()  
            }  
            .debug("🐶 2")  
            .flatMap { [weak self] memberList -&gt; Observable&amp;lt;Void&gt; in              // このflatMapもメインスレッドで動いている!  
                guard let self = self else { return .empty() }  
                self.memberList = memberList  
                return .just(Void())  
            }  
            .debug("🐶 3")  
            .bind(to: memberListRelay)  
            .disposed(by: disposeBag)  
    }  </code></pre><p>この場合、なんと <code>flatMap</code> 内はメインスレッドで動いています。<br />メインスレッドであることの確認は、上記 MemberUseCase で <code>Thread.sleep(forTimeInterval: 3)</code> で3秒待っているんですが、実際に3秒経った後に画面遷移が行われることで確認しました。  </p>
<p>🟡検証2: <code>observe(on:)</code> の場合  </p>
<pre><code>    init() {  
        getMemberListTrigger  
            .debug("🐶 subscribeonの前")  
　          .observe(on: ConcurrentDispatchQueueScheduler(qos: .background))      // observe(on:)の場合    
//            .subscribe(on: ConcurrentDispatchQueueScheduler(qos: .background))      
            .debug("🐶 1")  
            .flatMap { [weak self] _ -&gt; Observable&amp;lt;[Member]&gt; in                   // このflatMapはバックグラウンドスレッドで動いている!  
                guard let self = self else { return .empty() }  
                return self.memberUseCase.getMemberList()  
            }  
            .debug("🐶 2")  
            .flatMap { [weak self] memberList -&gt; Observable&amp;lt;Void&gt; in              // このflatMapもバックグラウンドスレッドで動いている!  
                guard let self = self else { return .empty() }  
                self.memberList = memberList  
                return .just(Void())  
            }  
            .debug("🐶 3")  
            .bind(to: memberListRelay)  
            .disposed(by: disposeBag)  
    }  </code></pre><p><code>observe(on:)</code> を使った場合は、期待通り、<code>flatMap</code> 内の処理がバックグラウンドで行われました。<br />バックグラウンドスレッドである確認は、画面遷移が完了したあと、3秒後にデータの更新が行われたことで確認しました。  </p>
<p>なので、 <code>subscribe(on:)</code> は必ずしも後続の処理全てが非同期処理になっているわけではないようです。  </p>
<p>◯ ChatGPTにきいてみた<br />これらの違いについて ChatGPTにも聞いてみました！以下のようにまとめてくれました。  </p>
<pre><code>subscribe(on:) を使用すると、以下のような手順で処理が行われます：  
    1. メインスレッドで subscribe(on:) が呼び出される。  
    2. subscribe(on:) は、指定されたスケジューラ（例えばバックグラウンドスレッド）でサブスクリプションを行うように設定します。  
    3. スケジューラがサブスクリプションを処理するタイミングまで待機し、その後、指定されたスレッドでサブスクリプションを実行します。  

## それぞれの違い  
    subscribe(on:):  
        サブスクリプションの開始スレッドを指定。  
        サブスクリプション全体が指定されたスレッドで実行される。  
    observe(on:):  
        イベントの通知スレッドを指定。  
        Observable チェーンの処理が指定されたスレッドで実行される。  

## 具体的な使用シナリオ  
    subscribe(on:) の使用シナリオ:  
        データベースアクセスやネットワークリクエストなど、サブスクリプション自体が重い処理を含む場合に、バックグラウンドスレッドでサブスクリプションを開始する。  
    observe(on:) の使用シナリオ:  
        バックグラウンドスレッドで重い計算を行い、その結果をメインスレッドで UI に反映させる場合に、メインスレッドでのイベント通知を行う。  </code></pre><p>この回答の <code>サブスクリプション</code> の意味は、イベントの購読という意味と、Observableチェーン全体の初期化や設定という意味も含まれているようで、<br /><code>subscribe(on:)</code> をつけたチェーン( getMemberListTrigger.debug("") から .disposed(by: disposeBag)まで)の登録自体が非同期になるよっていう意味なんじゃないか？と私は解釈しました！  </p>
<p>なので、今回起きている問題も、 <code>subscribe(on:)</code> を使うことで、チェーンのセットアップ自体が非同期に行われ、<code>getMemberListTrigger</code> のセットアップが後回しにされてしまい、<code>viewDidLoad</code>の時点では完了していない場合があったということなのかなと思います。  </p>
<p>◯まとめ<br />とりあえず、<code>subscribe(on:)</code> ではなく <code>observe(on:)</code> の方を使えば問題は解決できるんじゃないかと思います！<br />Realmの処理は非同期でやりたい処理ならば、どちらにせよ <code>observe(on:)</code> の方を使えば良さそうです！‎╭( ･ㅂ･)و ̑̑<br />(ちなみに自分は結局バグ自体の再現はできなかったですｗ）</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2024/8/8 22:25:56</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>なるほど！<br />めちゃくちゃ分かりやすいです！<br />共有頂いた参考サイトにも書いてありましたが <code>subscribe(on:)</code> の使い所があまり分からないですねww<br />参考サイト読んでいるときに <code>flatMap</code> の動きはどうなるかな？って思いながら読んでたのですが、<br />レオさんが詳細に検証して下さっていてびっくりしました！<br />毎回細かいところまで調べて共有頂いてありがとうございます🙇‍♂️  </p>
<blockquote>
<p>回答として <code>observe(on:)</code> を使えばいいよと言われています。小林さんの場合もこれで解決できそうな予感...！  </p>
</blockquote>
<p>まだ試せていませんがレオさんから共有頂いた内容で <code>observe(on:)</code> で直りそうな気がしました！<br />動作を確認できたらまたご報告させて頂きます🙏</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2024/8/9 9:59:44</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p><code>observe(on:)</code> に変更したところバグが発生しなくなりました！<br />丁寧なご対応ありがとうございました！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2024/8/9 13:17:37</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>解決してよかったです！🙂‍↕️<br />また何かあればお気軽にどうぞ！！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2025/1/6 12:03:06</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>明けましておめでとうございます⛩️<br />今年もよろしくお願い致します！  </p>
<p>Reoさんは Senyouの忘年会行きましたか？？</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2025/1/6 16:07:54</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>あけましておめでとうございますー！🎋<br />こちらこそ、本年もよろしくお願い致します！🙂‍↕️  </p>
<p>忘年会は行ってないです！そもそもあることも知らなかったですね〜<br />最近はあんまりSenyouとの関わりを持てていないのでgeneralチャンネルも見れないですね😂</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2025/1/6 21:20:26</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>そうだったんですね！<br />自分もSlackを全然見ていなくて気づいた時には募集が締め切られてましたww<br />reoさんが参加していたら直接お礼を言う機会を逃した〜と思っていたので気になってました！  </p>
<p>最近はUdemyで node.jsをの勉強などを始めてみたりして知識の幅を薄くでも広げ始めました🌏<br />その教材が一通り終わったらSwiftUIの教材を進めようかなと思ってます🔰</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2025/1/7 15:45:35</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>なるほど！でも自分は見てても行ってないかもですね〜コミュニケーション苦手なので…w<br />気にしていただいて嬉しいです！ありがとうございます😊  </p>
<p>いいですねー！幅広くやっていると薄くやっているような気がしちゃいますけど、意外と他に通じることがいっぱいあるので！全然思ったより深いはずですよ🌏<br />私も頑張ろうと思います…！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2025/1/7 19:19:50</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>僕も人見知りなので同じようなものですw  </p>
<blockquote>
<p>意外と他に通じることがいっぱいあるので！全然思ったより深いはずですよ  </p>
</blockquote>
<p>そうなんですね！ありがとうございます😊<br />reoさんにそう言って頂けるとより一層やる気が出ます！！  </p>
<p>では！また質問をさせて頂くことがあるかと思いますがよろしくお願い致します🌅</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2025/1/8 22:51:40</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>こちらこそ！今年もよろしくお願いしますー！気軽にご連絡ください！🙇‍♀️</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2025/1/19 17:07:23</td>
          <td><img src="https://secure.gravatar.com/avatar/cb125fbff9049a54f716858583fe59d4.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png" width="50" />reo</td>
          <td class="markdown-body"><p>すみません！メッセージ保存したくてSlack のアプリ的なのいれます...！<br />少し前に以前回答した内容を見たくて実は勝手にSlackのプロプランのトライアルしてまして(SwiftUIのプレビューってなんでみれないんだっけ...ってなりました)<br />トライアル中にメッセージ救出しておきたいなと思いまして今ちょっと戦っております。色々勝手にすみません...！</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2025/1/19 17:15:04</td>
          <td><img src="https://secure.gravatar.com/avatar/7e3be293fa81644e3828a47dc3d418af.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-48.png" width="50" />MessageExporter</td>
          <td class="markdown-body"><p>&lt;@U089P72JS8H&gt;さんがチャンネルに参加しました</p>
</td>
          <td>
            
            </td>
        </tr>
<tr>
          <td>2025/1/19 17:40:49</td>
          <td><img src="https://secure.gravatar.com/avatar/b451b60557be66327a23c5a248493db8.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-48.png" width="50" />kobayashi</td>
          <td class="markdown-body"><p>承知しました！ご報告頂きありがとうございます！<br />自分の方でも昔のログが見れるようになっていてありがたいです🙇</p>
</td>
          <td>
            
            </td>
        </tr>
          </tbody>
        </table>
      </body>
      </html>
    